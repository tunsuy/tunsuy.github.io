<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鱼儿塘</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tunsuy.github.io/"/>
  <updated>2017-02-28T12:45:38.266Z</updated>
  <id>https://tunsuy.github.io/</id>
  
  <author>
    <name>tunsuy</name>
    <email>957126743@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>App三方交互逻辑实践</title>
    <link href="https://tunsuy.github.io/2017/11/16/App%E4%B8%89%E6%96%B9%E4%BA%A4%E4%BA%92%E9%80%BB%E8%BE%91%E5%AE%9E%E8%B7%B5/"/>
    <id>https://tunsuy.github.io/2017/11/16/App三方交互逻辑实践/</id>
    <published>2017-11-16T07:28:06.000Z</published>
    <updated>2017-02-28T12:45:38.266Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/tunsuy/AppInteractive" target="_blank" rel="external">https://github.com/tunsuy/AppInteractive</a></p>
<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>之前有一个公司项目与第三方应用交互的逻辑需要全面测试，那么怎样才能测试到整个交互的所有环节呢</p>
<p>那就是需要一个实际的第三方，并且这个第三方需要包括server端和app端</p>
<p>既然是测试，那么我们只需要将公司项目跟三方有交互的接口做个全面的测试即可，不在乎这个三方是怎样的形式</p>
<p>那么这就好办了，自己实现一个这个的三方项目</p>
<h3 id="交互逻辑图"><a href="#交互逻辑图" class="headerlink" title="交互逻辑图"></a>交互逻辑图</h3><p>1、口袋助理跳转第三方app逻辑示意图：</p>
<img src="/2017/11/16/App三方交互逻辑实践/moa2app.jpg" alt="moa2app.jpg" title="">
<p>2、第三方跳转口袋助理逻辑示意图：</p>
<img src="/2017/11/16/App三方交互逻辑实践/app2moa.jpg" alt="app2moa.jpg" title="">
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>server端：go语言实现<br>app端：iOS</p>
<p>具体实现见github项目地址</p>
<p>根据相关协议从代码层面详细的测试每个交互接口：</p>
<ul>
<li>兼容性</li>
<li>容错性</li>
<li>健壮性</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/tunsuy/AppInteractive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tunsuy/AppInteractive&lt;/a&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="go" scheme="https://tunsuy.github.io/tags/go/"/>
    
      <category term="服务端" scheme="https://tunsuy.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>实现浏览器中实时查看iOS日志</title>
    <link href="https://tunsuy.github.io/2017/09/23/%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8BiOS%E6%97%A5%E5%BF%97/"/>
    <id>https://tunsuy.github.io/2017/09/23/实现浏览器中实时查看iOS日志/</id>
    <published>2017-09-23T07:32:34.000Z</published>
    <updated>2017-02-28T12:47:07.498Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/tunsuy/TSiOSLogWebBrowser" target="_blank" rel="external">https://github.com/tunsuy/TSiOSLogWebBrowser</a></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在测试ios App过程中，有很多时候我们需要一边操作一遍查看输出日志</p>
<p>对于有mac机的来说，当然在xcode下自己打包测试查看日志那是非常方便的，但是大部分的测试是没有mac机的。</p>
<p>虽然开发也有将日志写入文件，但是每次操作完了再去打开文件查看，非常不方便</p>
<p>那有没有一种类似xcode输出日志的方式呢<br>答案就是今天要说的这个： 直接用浏览器实时查看输出的log信息</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>就是在app里面内置一个http server服务器，浏览器作为请求客户端，将app的操作日志实时的输出到浏览器中。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>使用了一个开源框架 GCDWebServer 作为http server<br>具体实现见github项目地址</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1、将手机置于电脑的同一网络，  </p>
<p>2、然后在浏览器上输入 手机IP：port（端口是在代码中任意指定的），<br>然后就可以开始测试app了，你将会看到浏览器中会实时显示你的操作日志出来，跟xcode下查看日志的方式一样，</p>
<p>注：浏览器页面支持 跟随日志自动滚动 ；非常方便</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="/2017/09/23/实现浏览器中实时查看iOS日志/ioslog.jpg" alt="ioslog.jpg" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/tunsuy/TSiOSLogWebBrowser&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tunsuy/TSiOSLogWebBrowser&lt;/
    
    </summary>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="https" scheme="https://tunsuy.github.io/tags/https/"/>
    
      <category term="web" scheme="https://tunsuy.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>自编译mongo3.2测试</title>
    <link href="https://tunsuy.github.io/2016/12/09/%E8%87%AA%E7%BC%96%E8%AF%91mongo3-2%E6%B5%8B%E8%AF%95/"/>
    <id>https://tunsuy.github.io/2016/12/09/自编译mongo3-2测试/</id>
    <published>2016-12-09T02:13:44.000Z</published>
    <updated>2017-02-28T06:20:02.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>公司将mongodb删除机制进行了自定义，改动了相关源码，故需要配合测试mongodb的功能是否正常</p>
<h3 id="检查服务器"><a href="#检查服务器" class="headerlink" title="检查服务器"></a>检查服务器</h3><p>1、检查mongo启动情况</p>
<pre><code>netstat -anpt | grep mong* | grep 0.0.0.0
mongoa --port 27020（相应的端口）——进入mongo
</code></pre><p>2、100集群数据库情况</p>
<pre><code>cat /etc/hosts | grep db——在169.100下查看
</code></pre><p>——3个数据库分片（sh0，sh1，sh2）<br>——2个统计分片（statis-sh0，statis-sh1）</p>
<p>也可以这样查看：</p>
<ul>
<li>进入mongos（169.100下）</li>
<li>进入config数据库中<pre><code>db.shards.find()
</code></pre></li>
</ul>
<h3 id="常用功能测试"><a href="#常用功能测试" class="headerlink" title="常用功能测试"></a>常用功能测试</h3><h4 id="主备切换"><a href="#主备切换" class="headerlink" title="主备切换"></a>主备切换</h4><p>1、shard0：</p>
<ul>
<li>随便进入一个sh0节点服务器<br>通过/etc/hosts可以查看到（169.100下）</li>
<li>查看sh0集群情况<pre><code>rs.status()
</code></pre>找到sh0主节点服务器，并进入<pre><code>执行rs.stepDown(）——切换主备
</code></pre></li>
<li>检查主备切换是否成功<pre><code>rs.status()——集群情况
</code></pre></li>
</ul>
<p>2、依次对shard1、shard2集群进行主备切换</p>
<p>3、也可以关注下主备切换的日志情况</p>
<pre><code>find / -name mongo*.log（找到各mongo进程log）
</code></pre><h4 id="chunk迁移"><a href="#chunk迁移" class="headerlink" title="chunk迁移"></a>chunk迁移</h4><p>（以迁移customer.info表为例）<br>1、查看迁移之前的chunk情况</p>
<pre><code>use config
db.chunks.find({&quot;_id&quot;:/customer.info-did_10000*/, &quot;ns&quot;:&quot;customer.info&quot;}).pretty()
{
    &quot;_id&quot; : &quot;customer.info-did_10000custmid_100&quot;,
    &quot;lastmod&quot; : Timestamp(135, 0),
    &quot;lastmodEpoch&quot; : ObjectId(&quot;54ae3eaaf3a2f2e7d3726927&quot;),
    &quot;ns&quot; : &quot;customer.info&quot;,
    &quot;min&quot; : {
        &quot;did&quot; : NumberLong(10000),
        &quot;custmid&quot; : NumberLong(100)
    },
    &quot;max&quot; : {
        &quot;did&quot; : NumberLong(10000),
        &quot;custmid&quot; : NumberLong(1948)
    },
    &quot;shard&quot; : &quot;shard0&quot;
}
{
    &quot;_id&quot; : &quot;customer.info-did_10000custmid_1948&quot;,
    &quot;lastmod&quot; : Timestamp(136, 0),
    &quot;lastmodEpoch&quot; : ObjectId(&quot;54ae3eaaf3a2f2e7d3726927&quot;),
    &quot;ns&quot; : &quot;customer.info&quot;,
    &quot;min&quot; : {
        &quot;did&quot; : NumberLong(10000),
        &quot;custmid&quot; : NumberLong(1948)
    },
    &quot;max&quot; : {
        &quot;did&quot; : NumberLong(10039),
        &quot;custmid&quot; : NumberLong(451)
    },
    &quot;shard&quot; : &quot;shard2&quot;
}
</code></pre><p>2、执行迁移命令</p>
<pre><code>sh.moveChunk(&quot;customer.info&quot;, {did:10000,custmid:100}, &quot;shard1&quot;)
</code></pre><p>或者</p>
<pre><code>db.adminCommand({moveChunk:&quot;customer.info&quot;, find:{did:10000,custmid:100}, to:&quot;shard1&quot;})
</code></pre><p>PS：一般执行命令都有这两种方式</p>
<ul>
<li>sh. 方式可以不用切换数据库执行</li>
<li>db. 方式必须在admin数据库下<br>PS：迁移条件必须包含片键</li>
</ul>
<p>3、查看迁移情况</p>
<pre><code>use config
db.chunks.find({&quot;_id&quot;:/customer.info-did_10000*/, &quot;ns&quot;:&quot;customer.info&quot;}).pretty()
</code></pre><p>4、也可以关注下主备切换的日志情况</p>
<pre><code>find / -name mongo*.log（找到各mongo进程log）
</code></pre><h4 id="chunk分裂"><a href="#chunk分裂" class="headerlink" title="chunk分裂"></a>chunk分裂</h4><p>1、查看chunk分裂前情况</p>
<pre><code>use config
db.chunks.find({&quot;_id&quot;:/customer.info-did_10000*/, &quot;ns&quot;:&quot;customer.info&quot;}).pretty()
</code></pre><p>2、指定分裂点</p>
<pre><code>sh.splitAt(&quot;customer.info&quot;, {&quot;did&quot;:10000, &quot;custmid&quot;:500})
</code></pre><p>3、检查分裂情况</p>
<pre><code>db.chunks.find({&quot;_id&quot;:/customer.info-did_10000*/, &quot;ns&quot;:&quot;customer.info&quot;}).pretty()
</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>1、重启moa服务<br>PS：因为有的服务可能有缓存，所有在操作了数据库之后需要重启服务才能重新读取数据库数据</p>
<p>2、检查各模块功能情况<br>PS：因为涉及到php、go、c的mongo库，所以需要覆盖以下测试</p>
<ul>
<li>web端、PC端、运营、统计</li>
<li>主要关注点<br>——涉及数据库读写操作的功能<br>——大量读写操作情况<br>——导入导出情况<br>——私有云服务器接入情况<br>——数据删除情况<br>——数据恢复情况</li>
</ul>
<p>3、检查服务器资源情况<br>PS：可以写一个小的脚本（超过一定的阈值则输出到log里面），然后一直在后台运行，然后操作业务<br>最后测试完之后，检查log文件中的资源记录情况</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;公司将mongodb删除机制进行了自定义，改动了相关源码，故需要配合测试mongodb的功能是否正常&lt;/p&gt;
&lt;h3 id=&quot;检查服务器&quot;&gt;
    
    </summary>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/categories/mongodb/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>mongodb集群3.0.X升级3.2.X</title>
    <link href="https://tunsuy.github.io/2016/10/15/mongodb%E9%9B%86%E7%BE%A43-0-X%E5%8D%87%E7%BA%A73-2-X/"/>
    <id>https://tunsuy.github.io/2016/10/15/mongodb集群3-0-X升级3-2-X/</id>
    <published>2016-10-15T02:07:58.000Z</published>
    <updated>2017-02-28T06:20:02.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该文章主要根据官方英文文档来操作的</p>
<p>官方文档：<a href="https://docs.mongodb.com/manual/release-notes/3.2-upgrade/" target="_blank" rel="external">https://docs.mongodb.com/manual/release-notes/3.2-upgrade/</a></p>
<h3 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1、下载二进制文件  </p>
<pre><code>wget https://www.mongodb.com/dr/fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.2.10.tgz
</code></pre><p>2、将该文件放入所有的节点服务器下并解压</p>
<pre><code>tar -zxvf XXXX
</code></pre><p>3、备份configdb（可选）<br>在每个configdb服务器执行：</p>
<pre><code>cp -r /home/moa/db/configdb/data/ /home/moa/db/configdb/data_bak/
</code></pre><p>4、关闭均衡器</p>
<ul>
<li>查看均衡器状态<pre><code>sh.getBalancerState()
</code></pre></li>
<li>关闭<pre><code>sh.stopBalancer()
</code></pre></li>
<li>检查数据没有在迁移<pre><code>use config
while( sh.isBalancerRunning() ) {
    print(&quot;waiting...&quot;);
    sleep(1000);
}
</code></pre></li>
</ul>
<h4 id="开始升级"><a href="#开始升级" class="headerlink" title="开始升级"></a>开始升级</h4><p>1、首先升级分片0<br>1.1 升级分片0集群中的secondary节点</p>
<ul>
<li>停掉该mongod0进程—kill pid</li>
<li>使用最新mongodb进程替换掉mongod0  <pre><code>备份：mv /usr/local/mongodb/bin/mongod0 /usr/local/mongodb/bin/mongod0.bak  
替换：cp /home/mongodb-linux-x86_64-rhel62-3.2.10/bin/mongod /usr/local/mongodb/bin/mongod0
</code></pre></li>
<li>启动该mongod0进程—/etc/init.d/mongod0 restart</li>
</ul>
<p>按照1.1方法依次升级其他的secondary节点<br>ps：在确认上一个secondary状态正常的情况再进行</p>
<pre><code>rs.status()
</code></pre><p>1.2 升级分片0集群中的primary节点</p>
<ul>
<li>停掉primary—rs.stepDown()</li>
<li>检查是否产生了新的primary—rs.status()<br>ps：在其他两个节点查看</li>
<li>按照1的方法升级其他分片</li>
</ul>
<p>1.3 更新选举协议<br>在primary节点执行以下操作：</p>
<pre><code>cfg=rs.conf();
cfg.protocolVersion=1;
rs.reconfig(cfg);
</code></pre><p>2、升级分片1<br>按照1中的方法进行</p>
<p>3、升级config 服务器</p>
<ul>
<li><p>顺序：需要按照mongos中配置的逆序升级</p>
<pre><code>cat /home/moa/db/mongos/mongos.conf
——configdb=config0.moadb.com,config1.moadb.com,config2.moadb.com
</code></pre><p>所以升级顺序应该是：config2、config1、config0</p>
</li>
<li><p>升级：按照1中方法进行（只是这里变成了mongocfgd）</p>
</li>
</ul>
<p>4、升级mognos服务器<br>按照1中方法进行（只是这样换成了mongos）</p>
<p>5、替换掉所以的mongo工具（可选）</p>
<pre><code>cp ./mongodb-linux-x86_64-rhel62-3.2.10/bin/* /usr/local/mongodb/bin/
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;该文章主要根据官方英文文档来操作的&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.mongodb.com/manual
    
    </summary>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/categories/mongodb/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>redmine-数据统计</title>
    <link href="https://tunsuy.github.io/2016/10/08/redmine-%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/"/>
    <id>https://tunsuy.github.io/2016/10/08/redmine-数据统计/</id>
    <published>2016-10-08T12:11:06.000Z</published>
    <updated>2017-02-28T06:20:02.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>语言：python语言</p>
<p>1、地址：<a href="https://github.com/tunsuy/redmine_statis" target="_blank" rel="external">https://github.com/tunsuy/redmine_statis</a></p>
<p>2、统计维度：  </p>
<ul>
<li>个人迭代bug数</li>
<li>模块迭代bug数</li>
<li>个人网上问题数</li>
<li>个人迭代工作粒度</li>
<li>个人遗留问题数</li>
</ul>
<p>如果要加上其他维度的统计，也是非常简单的</p>
<h3 id="redmine表说明"><a href="#redmine表说明" class="headerlink" title="redmine表说明"></a>redmine表说明</h3><p>1、表issues<br>—用来存放issue的标准字段。</p>
<p>2、表custom_fields<br>—该表字段都和创建自定义字段的web页面看到的选择项很像。</p>
<p>3、表custom_values<br>—该表可以用custom_field_id字段和custom_fields表的id关联。 而customized_id 可以和issues表的id相关联</p>
<h3 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h3><p>1、三个表issues, custom_fields和custom_values在一起表达了这么个关系。</p>
<p>2、一个issue的标准字段来自issues表，扩展字段来自custom_fields表，而custom_values和前custom_fields表关联，一起表示一个issue的某个自定义字段的值。</p>
<p>3、当表示issue的自定义字段时，custom_fields.type的值是 ‘IssueCustomField’ 而custom_values.customized_type的值是’Issue’.</p>
<p>4、所有issue的自定义字段值<br>可以先将custom_fields表和custom_values表关联，获得如下结果：</p>
<pre><code>select customized_id as issue_id,custom_field_id,type,name,default_value,value from custom_fields a inner join custom_values b on a.id =b.custom_field_id and a.type = &apos;IssueCustomField&apos; and b.customized_type=&apos;Issue&apos; limit 2;
</code></pre><p>由此可以看出redmine的设计是用记录行数来表示扩展字段的值，所以可以不受mysql表字段的限制。</p>
<h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>基本知识了解：<br>1、授予用户redmine_static 在指定ip下 以 密码 moatest 访问 bitnami_redmine 的 select和excute操作</p>
<pre><code>grant select,excute on bitnami_redmine.* to &apos;redmine_static&apos;@&apos;200.200.169.162&apos; identified by &apos;moatest&apos;
</code></pre><p>2、查询mysql所有用户</p>
<pre><code>select user,host,password from mysql.user;
</code></pre><p>3、刷新权限设置</p>
<pre><code>flush privileges;
</code></pre><p>4、查询 指定IP 下 用户redmine_static 的数据库权限</p>
<pre><code>show grants for &apos;redmine_static&apos;@&apos;200.200.169.162&apos;\G
</code></pre><p>5、取消用户的操作权限</p>
<pre><code>revoke select on bitnami_redmine.* from &apos;redmine_static&apos;@&apos;200.200.169.162&apos; identified by &apos;moatest&apos;;
</code></pre><p>6、授予所有操作权限</p>
<pre><code>grant all privileges on bitnami_redmine.* to &apos;redmine_static&apos;@&apos;200.200.169.162&apos; identified by &apos;moatest&apos;;
</code></pre><p>7、删除用户</p>
<pre><code>drop user redmine_static@&apos;%&apos;;
</code></pre><p>8、创建用户</p>
<pre><code>create user redmine_static@&apos;%&apos; identified by &apos;moatest&apos;;
</code></pre><h3 id="redmine统计说明"><a href="#redmine统计说明" class="headerlink" title="redmine统计说明"></a>redmine统计说明</h3><p>以我们公司项目为例<br>1、项目地址：200.200.169.162<br>2、在redmine服务器中新增一个mysql用户：redmine_static/moatest<br>——该用户只能在169.162中以用户名和密码的方式访问<br>——见如上2说明  </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1、切换python环境：pyenv activate venv2710<br>2、切换到项目路径<br>3、执行：python main.py [统计开始时间 统计结束时间]</p>
<pre><code>eg：python main.py 2016-9-1 2016-12-31
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h3&gt;&lt;p&gt;语言：python语言&lt;/p&gt;
&lt;p&gt;1、地址：&lt;a href=&quot;https://github.com/tunsuy/red
    
    </summary>
    
      <category term="redmine" scheme="https://tunsuy.github.io/categories/redmine/"/>
    
    
      <category term="redmine" scheme="https://tunsuy.github.io/tags/redmine/"/>
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ios：UIWebView与WKWebView注意事项</title>
    <link href="https://tunsuy.github.io/2016/09/28/ios%EF%BC%9AUIWebView%E4%B8%8EWKWebView%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://tunsuy.github.io/2016/09/28/ios：UIWebView与WKWebView注意事项/</id>
    <published>2016-09-28T09:14:51.000Z</published>
    <updated>2017-02-28T06:20:02.568Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>1、UIWebView 使用的 JavaScriptCore 框架，交互时为 JavaScript 运行的上下文环境 JSContext 注入对象 Bridge；</p>
<p>2、WKWebView 使用的 WebKit 框架，交互时为 webkit.messageHandlers 注入对象</p>
<h3 id="测试注意事项"><a href="#测试注意事项" class="headerlink" title="测试注意事项"></a>测试注意事项</h3><p>1、加载速度</p>
<p>2、占用内存</p>
<p>3、缓存问题：<br>H5页面更新了，app端显示还是老的，不同的ios系统处理方式不一样</p>
<p>4、cookie问题<br>页面很多，不断切换浏览，cookie失效等</p>
<p>5、跨域问题<br>webkit框架不允许跨域，比如从一个http页面对https发起请求</p>
<p>6、request拦截问题<br>有可能之前用的好好的hybrid框架，换了wkwebview之后，有些就不起作用了</p>
<p>7、本地html文件加载<br>不同的ios系统不一样</p>
<p>8、手势操作</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://mp.weixin.qq.com/s/18xXQWboHcjybd_VtcTmUg##" target="_blank" rel="external">http://mp.weixin.qq.com/s/18xXQWboHcjybd_VtcTmUg##</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;p&gt;1、UIWebView 使用的 JavaScriptCore 框架，交互时为 JavaScript 运行的上下文环境 JSC
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>ios：https/ATS改造过程</title>
    <link href="https://tunsuy.github.io/2016/09/21/ios%EF%BC%9Ahttps-ATS%E6%94%B9%E9%80%A0%E8%BF%87%E7%A8%8B/"/>
    <id>https://tunsuy.github.io/2016/09/21/ios：https-ATS改造过程/</id>
    <published>2016-09-21T05:14:11.000Z</published>
    <updated>2017-02-28T06:20:02.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>苹果官方宣称今年底将全面强制启动https的支持<br>1、不安全的HTTP链接将会遭到拦截  </p>
<p>2、而且系统 Foundation 框架下的相关网络请求，将不再默认使用 HTTP等不安全的网络协议，而默认采用 TLS 1.</p>
<h3 id="服务端改造"><a href="#服务端改造" class="headerlink" title="服务端改造"></a>服务端改造</h3><p>1、服务器需要改造的地方：</p>
<ul>
<li>ATS要求TLS1.2或者更高，TLS 是 SSL 新的别称。</li>
<li>通讯中的加密套件配置要求支持列出的正向保密。</li>
<li>数字证书必须使用sha256或者更高级的签名哈希算法，并且保证密钥是2048位及以上的RSA密钥或者256位及以上的ECC密钥。</li>
</ul>
<p>2、服务器ATS在线检查：   <a href="https://www.qcloud.com/product/ssl#userDefined10" target="_blank" rel="external">https://www.qcloud.com/product/ssl#userDefined10</a></p>
<h3 id="官方建议"><a href="#官方建议" class="headerlink" title="官方建议"></a>官方建议</h3><p>1、苹果官方是推荐使用NSURLSession去做HTTP请求的  </p>
<p>2、虽然说NSURLConnection同样支持ATS方面的特性，两者的默认行为上有些不一样<br>所以应该尽早切换到NSURLSession上，避免产生一些不必要错误。</p>
<h3 id="项目改造"><a href="#项目改造" class="headerlink" title="项目改造"></a>项目改造</h3><p>1、要么将info.plist中的allow全部改成NO</p>
<p>2、要么在提交审批的时候向苹果说明</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>1、抓包查看所有请求情况<br>ps：推荐Charles——mac下很好用的一款抓包软件</p>
<p>2、在项目im中浏览https网址和http网址<br><a href="https://www.baidu.com——SSL错误" target="_blank" rel="external">https://www.baidu.com——SSL错误</a><br>原因： 百度自身服务器ssl协议没有指定支持TSLv1.0<br>解决：(参考)</p>
<ul>
<li>服务器自身配置下</li>
<li>在Info.plist里配置，指定支持TSLv1.0<br><a href="https://github.com/sinaweibosdk/weibo_ios_sdk" target="_blank" rel="external">https://github.com/sinaweibosdk/weibo_ios_sdk</a></li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.liuchungui.com/blog/2015/10/11/ios9zhi-gua-pei-ats/" target="_blank" rel="external">http://www.liuchungui.com/blog/2015/10/11/ios9zhi-gua-pei-ats/</a><br><a href="https://my.oschina.net/vimfung/blog/494687?_t_t_t=0.1896578531749944" target="_blank" rel="external">https://my.oschina.net/vimfung/blog/494687?_t_t_t=0.1896578531749944</a><br><a href="https://onevcat.com/2016/06/ios-10-ats/" target="_blank" rel="external">https://onevcat.com/2016/06/ios-10-ats/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;苹果官方宣称今年底将全面强制启动https的支持&lt;br&gt;1、不安全的HTTP链接将会遭到拦截  &lt;/p&gt;
&lt;p&gt;2、而且系统 Foundat
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="https" scheme="https://tunsuy.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>代码扫描之API调用版本检查</title>
    <link href="https://tunsuy.github.io/2016/09/18/%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F%E4%B9%8BAPI%E8%B0%83%E7%94%A8%E7%89%88%E6%9C%AC%E6%A3%80%E6%9F%A5/"/>
    <id>https://tunsuy.github.io/2016/09/18/代码扫描之API调用版本检查/</id>
    <published>2016-09-18T02:09:21.000Z</published>
    <updated>2017-02-28T06:20:02.693Z</updated>
    
    <content type="html"><![CDATA[<h4 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h4><p>语言：python语言</p>
<p>该项目是对工程项目代码进行全面扫描，发现其是否有代码层面的bug<br>目前第一版支持了ios下的api版本控制的扫描检查<br>后续将逐渐支持其他方面的代码检查，比如是否有内存溢出，数组越界等，支持检查项可配置</p>
<p>完整的项目源码地址：<br><a href="https://github.com/tunsuy/iOS-code-scan" target="_blank" rel="external">https://github.com/tunsuy/iOS-code-scan</a></p>
<p>该项目现已很好的服务于公司的ios项目代码扫描中，有效的检测出很多开发人员疏忽的api版本使用问题</p>
<p>下面只对api版本控制检查进行实现讲解</p>
<h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>扫描ios项目，将所有的api方法原型依次提取出来，跟ios官方定义的版本进行比对；<br>检查对那些有版本限制的api，在代码中是否有相应的条件判断</p>
<p>那么这就涉及到如下几个问题<br>1、需要知道ios库中所有的api版本信息情况<br>2、需要提取出代码中所有的api调用并重新组装成方法原型<br>3、需要知道该方法原型调用是否在相应的条件判断中<br>4、条件判断可能是多层嵌套的<br>5、方法调用可能特别复杂，跨度可能特别大<br>6、方法调用可能是多层嵌套的  </p>
<h4 id="解决方案如下"><a href="#解决方案如下" class="headerlink" title="解决方案如下"></a>解决方案如下</h4><p>1、使用爬虫将ios库的api版本信息抓取下来，并存储在数据库中<br>——主要定义三个表：framework、class、api<br>2、逐个文件逐行扫描，以方法调用的固有特征（比如：[class1 fun_1.1:[class2 fun_2] fun_1.2:xx]），提取出方法原型<br>——当然要完整的一个不漏的提取出所有方法，处理逻辑还是很复杂的<br>3、根据方法原型读取api数据库，获取其对应的sdk版本<br>4、如果有版本限制，则检查其是否处于条件判断中<br>——需要保持条件判断的上下文信息，多层if嵌套的匹配等</p>
<h4 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h4><p>爬虫：使用了python的scrapy框架<br>备注：<br>1、scrapy startproject ScrapyIOSAPI—创建一个爬虫项目<br>2、scrapy shell “<a href="https://developer.apple.com/reference?language=objc&quot;—shell调试方法" target="_blank" rel="external">https://developer.apple.com/reference?language=objc&quot;—shell调试方法</a><br>——eg:</p>
<pre><code>response.xpath(&apos;//div[@class=&quot;task-symbols&quot;]/div[@class=&quot;symbol clm&quot;]/a/code/text()&apos;)
</code></pre><p>3、scrapy crawl spider_name—执行爬虫</p>
<p>数据库：sqlite轻量级数据库</p>
<p>整个项目采用Python实现：</p>
<ul>
<li>数据库连接技术</li>
<li>多线程技术</li>
<li>抽象类和类继承、生成器等高级技术</li>
</ul>
<h4 id="对ios代码规范的建议"><a href="#对ios代码规范的建议" class="headerlink" title="对ios代码规范的建议"></a>对ios代码规范的建议</h4><p>对于版本控制，统一使用宏定义<br>代码不要一行写多条语句，尽量按照ios开发规范来写代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h4&gt;&lt;p&gt;语言：python语言&lt;/p&gt;
&lt;p&gt;该项目是对工程项目代码进行全面扫描，发现其是否有代码层面的bug&lt;br&gt;目前第一版支持
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
      <category term="sqlite" scheme="https://tunsuy.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>ios：性能之卡顿检测</title>
    <link href="https://tunsuy.github.io/2016/08/11/ios%EF%BC%9A%E6%80%A7%E8%83%BD%E4%B9%8B%E5%8D%A1%E9%A1%BF%E6%A3%80%E6%B5%8B/"/>
    <id>https://tunsuy.github.io/2016/08/11/ios：性能之卡顿检测/</id>
    <published>2016-08-11T11:11:51.000Z</published>
    <updated>2017-02-28T06:20:02.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>地址：<a href="https://github.com/tunsuy/iOSMonitorLag" target="_blank" rel="external">https://github.com/tunsuy/iOSMonitorLag</a></p>
<p>该项目主要是针对ios项目的卡顿监控的探索，结合ios的运行机制和业界的实践，将其应用于公司项目中进行试运行，查看相关效果</p>
<h3 id="方案一-基于RunLoop"><a href="#方案一-基于RunLoop" class="headerlink" title="方案一 基于RunLoop"></a>方案一 基于RunLoop</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>1、因为UIKit本身的特性,需要将所有的UI操作都放在主线程执行,所以也造成不少程序员都习惯将一些线程安全性不确定的逻辑,以及其它线程结束后的汇总工作等等放到了主线,所以主线程中包含的这些大量计算、IO、绘制都有可能造成卡顿.</p>
<p>2、在Xcode中已经集成了非常方便的调试工具Instruments,它可以帮助我们在开发测试阶段分析软件运行的性能消耗</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>1、监控卡顿,最直接就是找到主线程都在干些啥玩意儿.我们知道一个线程的消息事件处理都是依赖于NSRunLoop来驱动,所以要知道线程正在调用什么方法,就需要从NSRunLoop来入手</p>
<p>2、发现NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿.</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>这种方式，当主线程中注册了timer等很多附加的东西时，会不断唤醒主线程，就会大量的调用observer回调，造成一定程度上的性能损耗</p>
<h3 id="方案二-基于线程"><a href="#方案二-基于线程" class="headerlink" title="方案二 基于线程"></a>方案二 基于线程</h3><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h4><p>简单来说，主线程为了达到接近60fps的绘制效率，不能在UI线程有单个超过（1/60s≈16ms）的计算任务。通过Instrument设置16ms的采样率可以检测出大部分这种费时的任务，但有以下缺点：  </p>
<ul>
<li>Instrument profile一次重新编译，时间较长。</li>
<li>只能针对特定的操作场景进行检测，要预先知道卡顿产生的场景。</li>
<li>每次猜测，更改，再猜测再以此循环，需要重新profile。<br>我们的目标方案是，检测能够自动发生，并不需要开发人员做任何预先配置或profile。运行时发现卡顿能即时通知开发人员导致卡顿的函数调用栈。</li>
</ul>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>1、最理想的方案是让UI线程“主动汇报”当前耗时的任务，听起来简单做起来不轻松。</p>
<p>2、我们可以假设这样一套机制：每隔16ms让UI线程来报道一次，如果16ms之后UI线程没来报道，那就一定是在执行某个耗时的任务。</p>
<p>下面是以接入口袋助理测试的效果图</p>
<img src="/2016/08/11/ios：性能之卡顿检测/卡顿图1.jpg" alt="卡顿图1.jpg" title="">
<img src="/2016/08/11/ios：性能之卡顿检测/卡顿图2.jpg" alt="卡顿图2.jpg" title="">
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>但是像在口袋助理这样大型负责的项目中，这些方法都存在一些弊端，监测出来的也不一定是真的由于代码问题引起的，<br>这只是可以作为一种自动提醒机制，让开发者自行去检查下提示的代码是否真的存在性能缺陷</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h3&gt;&lt;p&gt;地址：&lt;a href=&quot;https://github.com/tunsuy/iOSMonitorLag&quot; target=&quot;_
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="性能" scheme="https://tunsuy.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>redmine系统二次开发之search功能</title>
    <link href="https://tunsuy.github.io/2016/07/18/redmine%E7%B3%BB%E7%BB%9F%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8Bsearch%E5%8A%9F%E8%83%BD/"/>
    <id>https://tunsuy.github.io/2016/07/18/redmine系统二次开发之search功能/</id>
    <published>2016-07-18T04:30:24.000Z</published>
    <updated>2017-02-28T12:37:13.970Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/tunsuy/redmine_select_search" target="_blank" rel="external">https://github.com/tunsuy/redmine_select_search</a></p>
<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>该项目主要是对redmine进行简单的二次开发，满足以下需求：<br>在redmine的select选择框中，如果选项特别多，那么选择是非常考验眼力的，可能眼睛看花了都找不到<br>那么就考虑对所有的select框增加搜索功能</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>使用了chosen插件：<a href="https://harvesthq.github.io/chosen/" target="_blank" rel="external">https://harvesthq.github.io/chosen/</a></p>
<p>1、下载该插件</p>
<p>2、添加文件到项目目录中</p>
<ul>
<li><p>将chosen.jquery.js文件添加到./apps/redmine/htdocs/public/javascripts/</p>
</li>
<li><p>将chosen.css、chosen-sprite.png添加到 ./apps/redmine/htdocs/public/stylesheets/  </p>
</li>
</ul>
<p>3、引入js文件</p>
<ul>
<li>编辑 ./apps/redmine/htdocs/app/helpers/application_helper.rb<br>在下面方法处加入：<pre><code>def javascript_heads
    tags = javascript_include_tag(&apos;jquery-1.11.1-ui-1.11.0-ujs-3.1.1&apos;, &apos;application&apos;, &apos;chosen.jquery&apos;)
    unless User.current.pref.warn_on_leaving_unsaved == &apos;0&apos;
      tags &lt;&lt; &quot;\n&quot;.html_safe + javascript_tag(&quot;$(window).load(function(){ warnLeavingUnsaved(&apos;#{escape_javascript l(:text_warn_on_leaving_unsaved)}&apos;); });&quot;)
    end
    tags
end
</code></pre></li>
</ul>
<p>4、引入css文件</p>
<ul>
<li>编辑 ./apps/redmine/htdocs/app/views/layouts/base.html.erb<br>在<head>标签处加入：<pre><code>&lt;%= stylesheet_link_tag &apos;chosen&apos;, :media =&gt; &apos;all&apos; %&gt;
</code></pre></head></li>
</ul>
<p>5、实现</p>
<ul>
<li>在./apps/redmine/htdocs/public/javascripts/application.js文件中添加实现代码</li>
</ul>
<p>具体代码见项目地址</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>直接Hook前端代码实现</p>
<p>1、加入拼音支持</p>
<p>2、实现</p>
<ul>
<li>在./apps/redmine/htdocs/public/javascripts/application.js文件中添加实现代码</li>
</ul>
<p>具体代码见项目地址</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/tunsuy/redmine_select_search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tunsuy/redmine_select_se
    
    </summary>
    
    
      <category term="redmine" scheme="https://tunsuy.github.io/tags/redmine/"/>
    
      <category term="web" scheme="https://tunsuy.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>appium-ios自动化入门</title>
    <link href="https://tunsuy.github.io/2016/07/10/appium-ios%E8%87%AA%E5%8A%A8%E5%8C%96%E5%85%A5%E9%97%A8/"/>
    <id>https://tunsuy.github.io/2016/07/10/appium-ios自动化入门/</id>
    <published>2016-07-10T07:13:01.000Z</published>
    <updated>2017-02-28T12:24:31.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>为了更好的理解业内app自动化测试框架的原理机制，以便看是否有很好的办法在解决目前项目自动化测试存在的一些问题  </p>
<p>这次先介绍appium的使用过程，后续有时间会看下其源码实现机制。</p>
<p>在mac下配置appium的自动化测试环境在这里就不说了，网上很多</p>
<p>因为查了下appium针对ios的自动化测试，网上的资料比较少，且说得不是很清楚，故这篇文章主要介绍怎样使用appium自动化测试自己的项目。</p>
<p>这些操作步骤均是自己亲自操作并实践通过的</p>
<p>这里已自己实现的一个简单的ios app来一步步介绍<br>这篇文章先介绍在模拟器下运行的情况</p>
<h3 id="编译ios-app"><a href="#编译ios-app" class="headerlink" title="编译ios app"></a>编译ios app</h3><p>命令行操作</p>
<pre><code>$ cd /Users/xxx/Documents/lesFour/

$ xcodebuild -sdk iphonesimulator
</code></pre><p>备注：</p>
<ul>
<li>官网上的介绍中是这样写的：xcodebuild -sdk iphonesimulator6.0，表示编译成ios6版本的<br>这里要说明的就是 如果你在这里指定了版本号，那么你就必须修改编译文件为对应的版本，不然运行不成功</li>
<li>这条命令会在项目目录下产生一个 build 文件夹，等下我们会用到里面的一些文件</li>
<li>关于 在命令行下编译 ios项目的知识 会在后续简单的介绍</li>
</ul>
<h3 id="下载并更新appium-ruby项目库"><a href="#下载并更新appium-ruby项目库" class="headerlink" title="下载并更新appium-ruby项目库"></a>下载并更新appium-ruby项目库</h3><p>切换到你喜欢的目录下，下载appium-ruby库</p>
<pre><code>$ git clone https://github.com/appium/sample-code.git

$ cd /Users/tunsuy/sample-code/sample-code/examples/ruby/
</code></pre><p>因为mac自带ruby，所有这里直接更新项目依赖即可<br>    $ gem install bundle</p>
<pre><code>$ bundle update
</code></pre><h3 id="开始测试自己的项目"><a href="#开始测试自己的项目" class="headerlink" title="开始测试自己的项目"></a>开始测试自己的项目</h3><p>1、这里先运行一下官方的测试程序检查是否配置正确</p>
<ul>
<li><p>在mac下启动一个终端，开启appium-server</p>
<pre><code>$ appium
info: Welcome to Appium v1.3.5 (REV a124a15677e26b33db16e81c4b3b34d9c6b8cac9)
info: Appium REST http interface listener started on 0.0.0.0:4723
info: Console LogLevel: debug
——启动成功
</code></pre></li>
<li><p>另启动一个终端</p>
<pre><code>$ cd /Users/xxx/sample-code/sample-code/examples/ruby/
$ rspec simple_test.rb
</code></pre><p>注：这时可以看到appium-server所在的终端正在持续打出一系列日志，然后可以看到模拟器启动并测试成功</p>
</li>
</ul>
<p>2、自动化测试自己的项目</p>
<ul>
<li>拷贝项目目录下之前编译产生的 build文件夹 到 /Users/xxx/sample-code/sample-code/apps/TestApp/ 目录下，覆盖掉已有的build文件夹（你也可以先备份再覆盖）  </li>
<li><p>修改/Users/xxx/sample-code/sample-code/examples/ruby/目录下的simple_test.rb文件  </p>
<pre><code>$ vi simple_test.rb
</code></pre><p>修改为：</p>
<pre><code>APP_PATH = &apos;../../apps/TestApp/build/Release-iphonesimulator/lesThree.app&apos; 为自己的路径
</code></pre><p>同时将 module Calculator 整个模块注释掉，也是自己的自动化代码，你也可以先不写，先看启动效果</p>
</li>
<li><p>启动测试</p>
<pre><code>$ rspec simple_test.rb
</code></pre></li>
<li><p>输出结果：</p>
<pre><code>No examples found.
Finished in 0.00012 seconds
0 examples, 0 failures
</code></pre><p>因为没有写测试代码，所有这里显示 0个案例，0个错误<br>程序正常被启动起来了，如下图所示：  </p>
<img src="/2016/07/10/appium-ios自动化入门/appium-ios.jpg" alt="appium-ios.jpg" title="">
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;为了更好的理解业内app自动化测试框架的原理机制，以便看是否有很好的办法在解决目前项目自动化测试存在的一些问题  &lt;/p&gt;
&lt;p&gt;这次先介绍
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>calabash-ios安装详解</title>
    <link href="https://tunsuy.github.io/2016/06/28/calabash-ios%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/"/>
    <id>https://tunsuy.github.io/2016/06/28/calabash-ios安装详解/</id>
    <published>2016-06-28T06:48:31.000Z</published>
    <updated>2017-02-28T12:24:31.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>为了更好的理解业内app自动化测试框架的原理机制，以便看是否有很好的办法在解决目前项目自动化测试存在的一些问题  </p>
<p>这次先介绍calabash的使用过程，后续有时间会看下其源码实现机制。</p>
<h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><p>这里以我自身的安装成功经历记录如下：<br>1、启动终端</p>
<p>2、切换到被测项目路径下</p>
<pre><code>cd /Users/XXX/Documents/lesFour/
</code></pre><p>3、安装 calabash-cucumber gem包</p>
<pre><code>gem install calabash-cucumber
</code></pre><p>4、生成 features文件夹</p>
<pre><code>calabash-ios gen
</code></pre><h3 id="集成项目"><a href="#集成项目" class="headerlink" title="集成项目"></a>集成项目</h3><p>1、设置 xcode 项目<br>I.复制项目target文件<br>右键如下图红色部分  </p>
<img src="/2016/06/28/calabash-ios安装详解/targetcp.jpg" alt="targetcp.jpg" title="">
<p>弹出提示框，选择Duplicate，弹出如窗口，选择如下图所示  </p>
<img src="/2016/06/28/calabash-ios安装详解/targetcf.jpg" alt="targetcf.jpg" title="">
<p>复制出来如下图所示，名称为lesThree copy， 双击该项目，改名为lesThree-cal（根据你自己的项目名称来设置）</p>

<p>II.修改复制项目的各处名称<br>如下图点击，再下拉框中选择管理项目</p>
<img src="/2016/06/28/calabash-ios安装详解/targetrn.jpg" alt="targetrn.jpg" title="">
<p>弹出如下窗口，修改为如图所示名称（根据你自己的项目而定）</p>
<img src="/2016/06/28/calabash-ios安装详解/targetrnfs.jpg" alt="targetrnfs.jpg" title="">
<p>点击完成，进入如下图所示，修改为如图所示名称</p>
<img src="/2016/06/28/calabash-ios安装详解/targetrnfs1.jpg" alt="targetrnfs1.jpg" title="">
<p>III.导入calabash.framework框架<br>将你项目目录下的calabash.framework拖到xcode项目中的Frameworks文件夹中，（如没有该文件夹，请创建），如图所示</p>
<img src="/2016/06/28/calabash-ios安装详解/importfm.jpg" alt="importfm.jpg" title="">
<p>再弹出的窗口中设置如图所示</p>
<img src="/2016/06/28/calabash-ios安装详解/importfmcp.jpg" alt="importfmcp.jpg" title="">
<p>IV.导入CFNetwork.framework<br>如图所示导入</p>
<img src="/2016/06/28/calabash-ios安装详解/linkfm.jpg" alt="linkfm.jpg" title="">
<p>V.设置other linker flag<br>如下图所示设置</p>
<img src="/2016/06/28/calabash-ios安装详解/linkflag.jpg" alt="linkflag.jpg" title="">
<h3 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h3><p>再模拟器中运行该cal项目，窗口控制台输出如下信息则表示配置成功</p>
<pre><code>2015-03-06 17:27:50.105 lesThree-cal[3279:55236] Started LPHTTP server on port 37265
2015-03-06 17:27:52.441 lesThree-cal[3279:55421] Bonjour Service Published: domain(local.) type(_http._tcp.) name(Calabash Server)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;为了更好的理解业内app自动化测试框架的原理机制，以便看是否有很好的办法在解决目前项目自动化测试存在的一些问题  &lt;/p&gt;
&lt;p&gt;这次先介绍
    
    </summary>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="自动化测试" scheme="https://tunsuy.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>calabash-android原理分析</title>
    <link href="https://tunsuy.github.io/2016/06/20/calabash-android%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://tunsuy.github.io/2016/06/20/calabash-android原理分析/</id>
    <published>2016-06-20T07:16:39.000Z</published>
    <updated>2017-02-28T12:24:31.768Z</updated>
    
    <content type="html"><![CDATA[<p>在前面已经简单的介绍了calabash-ios的原理，这里将继续分析calabash-Android端的原理</p>
<h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>calabash-android架构其实与IOS是相同的</p>
<p>1、内部使用核心为cucumber的calabash的脚本在运行测试的时候会在虚拟机/真机上预装一个web服务器，这个web服务器就是解释calabash的脚本，</p>
<p>2、因为calabash-Android是基于robotium框架的，所以在机器上预装的web-server会将下发下来的calabash脚本解释为robotium的脚本，然后向测试app发送robotium的脚本，</p>
<p>3、因为robotium框架就是封装的google测试框架instumentation，所以app拿到robotium脚本后，将其解释为instumentation命令向被测试的app发送这些命令，被测试的app执行这些命令，然后将结果返回。</p>
<h3 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h3><p>calabash-Android整个框架采用 C/S 的运行模式，系统架构如下图所示：</p>
<img src="/2016/06/20/calabash-android原理分析/calabash-android.jpg" alt="calabash-android.jpg" title="">
<h4 id="框架图解释如下："><a href="#框架图解释如下：" class="headerlink" title="框架图解释如下："></a>框架图解释如下：</h4><p>1、Runner 负责接受用户指令，并对其进行数据校验、指令转换等操作，之后将其交由客户端处理（这里的客户端是指运行在pc上的用户自己编写的代码），</p>
<p>2、instrumentation test server就是预装在设备上的web-server，客户端在接收到指令之后，将指令发送给它，请求其执行对应操作，</p>
<p>3、web-server在接收到指令之后，解释该命令并与app进行交互，</p>
<p>4、所有执行结果最终会被收集到 Results 中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面已经简单的介绍了calabash-ios的原理，这里将继续分析calabash-Android端的原理&lt;/p&gt;
&lt;h3 id=&quot;原理解析&quot;&gt;&lt;a href=&quot;#原理解析&quot; class=&quot;headerlink&quot; title=&quot;原理解析&quot;&gt;&lt;/a&gt;原理解析&lt;/h3&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://tunsuy.github.io/tags/Android/"/>
    
      <category term="自动化测试" scheme="https://tunsuy.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>docker自定义daemon选项</title>
    <link href="https://tunsuy.github.io/2016/06/15/docker%E8%87%AA%E5%AE%9A%E4%B9%89daemon%E9%80%89%E9%A1%B9/"/>
    <id>https://tunsuy.github.io/2016/06/15/docker自定义daemon选项/</id>
    <published>2016-06-15T04:10:23.000Z</published>
    <updated>2017-02-28T06:20:02.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>可以定义的选项为如下列出来的</p>
<pre><code>docker-current daemon --help
</code></pre><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>1、分别定义各环境文件</p>
<pre><code>eg：/etc/sysconfig/docker-storage
/etc/sysconfig/docker-network
</code></pre><p>该文件中可以自定义环境变量</p>
<p>2、在/usr/lib/systemd/system/docker.service文件中引入环境文件</p>
<pre><code>eg：EnvironmentFile=-/etc/sysconfig/docker-storage
EnvironmentFile=-/etc/sysconfig/docker-network
</code></pre><p>并使用其环境变量</p>
<pre><code>ExecStart=/usr/bin/docker-current daemon \
      $DOCKER_STORAGE_OPTIONS \
      $DOCKER_NETWORK_OPTIONS \
</code></pre><p>备注：也可以将所有的自定义选项定义在一个文件中</p>
<p>例：将官方镜像仓库替换为阿里云镜像仓库</p>
<ul>
<li>前提：注册阿里云用户，此时才会获取到一个私有的镜像仓库地址<pre><code>https://cr.console.aliyun.com/
</code></pre></li>
<li>在/etc/sysconfig/docker中的option变量中加上如下选项<pre><code>--registry-mirror=https://u6nqa61i.mirror.aliyuncs.com
</code></pre></li>
<li>重启docker：<pre><code>systemctl restart docker
</code></pre></li>
</ul>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>直接在/usr/lib/systemd/system/docker.service文件中加入选项</p>
<pre><code>eg：ExecStart=/usr/bin/docker-current daemon \
      --exec-opt native.cgroupdriver=systemd \
      --insecure-registry docker.ts.com:5000
</code></pre><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>使用daemon.json文件<br>官方文档：<a href="https://docs.docker.com/engine/reference/commandline/dockerd/#/linux-configuration-file" target="_blank" rel="external">https://docs.docker.com/engine/reference/commandline/dockerd/#/linux-configuration-file</a><br>路径：/etc/docker/daemon.json<br>备注：使用此方案不要与其他方案相混合使用，否则docker启动的时候会报错</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;可以定义的选项为如下列出来的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-current daemon --help
&lt;/code&gt;&lt;/pr
    
    </summary>
    
      <category term="docker" scheme="https://tunsuy.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://tunsuy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>基于docker的moa服务</title>
    <link href="https://tunsuy.github.io/2016/06/02/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84moa%E6%9C%8D%E5%8A%A1/"/>
    <id>https://tunsuy.github.io/2016/06/02/基于docker的moa服务/</id>
    <published>2016-06-02T04:15:17.000Z</published>
    <updated>2017-03-04T06:55:11.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>该文章主要讲解将公司的server服务docker化的具体过程，从中可以看到很多docker相关知识的使用以及网络配置等操作<br>文中还设计到自己实现的关于docker自动化配置的两个脚本，供大家学习参考</p>
<h1 id="二、-docker化步骤"><a href="#二、-docker化步骤" class="headerlink" title="二、 docker化步骤"></a>二、 docker化步骤</h1><p>1、 将初始安装包拷贝到容器主机上</p>
<p>2、在主机上拉取一个centos6.7的docker镜像<br>ps：因为官方的docker镜像都是轻量级的，所有很多linux下的命令都没有</p>
<ul>
<li>方法一 就是要么自己将所有的命令工具都安装了</li>
<li>方法二 找一个别人建好的docker镜像</li>
</ul>
<p>3、将主机上的安装包共享给容器，并交互式形式启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -t -i --name moa_centos7 -v /home/tunsuy/toContainer:/home/tunsuy/fromHost centos:centos7 /bin/bash</div></pre></td></tr></table></figure></p>
<p>4、因为没有空白机的公有云安装包，所以这里以私有云空白安装包来安装<br>ps：<code>./install.sh -m test -d public_clound</code><br>——参考./install.sh脚本实现</p>
<p>5、安装过程中可能会遇到一些问题  </p>
<ul>
<li>提示没有xx命令——一律<code>yum install xx</code>即可</li>
<li>提示连接不上mongodb<br>——中断安装（其实moa依赖的一些软件环境已经安装成功了）<br>——参考其他虚拟机公有云的mongodb安装情况，调整该docker容器中的mongodb并成功启动</li>
</ul>
<p>6、单独安装公有云升级包（该包中需要包含dbserver服务包）</p>
<p>7、安装包成功之后，检查各项服务是否成功（包括web、流程、商店等）  </p>
<ul>
<li>可能会发现mysql安装异常<br>——手动安装：进入私有云空白安装包中的init目录下，运行./install.sh<br>————安装过程中可能会报错，缺少某些依赖<br>————依次yum install安装（有的可能需要自己下载安装）</li>
</ul>
<p>8、所有的服务都检查无误时，制作镜像并上传</p>
<ul>
<li>搭建私有仓库（按照官方文档做就可以了，这里不详细写）</li>
<li><p>将容器制作为镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit --author &quot;ts&quot; --message &quot;更正moaserver初始化包环境&quot; 容器名 docker.ts.com:5000/moaserver_env:init</div></pre></td></tr></table></figure>
</li>
<li><p>上传镜像到私有仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push docker.ts.com:5000/moaserver_env:init</div></pre></td></tr></table></figure>
</li>
</ul>
<p>ps：配置私有仓库http访问<br>编辑文件：<code>vim /etc/sysconfig/docker</code><br>添加以下内容<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OPTIONS=<span class="string">'--selinux-enabled --insecure-registry=docker.ts.com:5000'</span></div></pre></td></tr></table></figure></p>
<p>或者编辑文件：<code>vim /usr/lib/systemd/system/docker.service</code><br>添加以下内容<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  ExecStart=/usr/bin/docker-current daemon \</div><div class="line">    --exec-opt native.cgroupdriver=systemd \</div><div class="line">    <span class="variable">$OPTIONS</span> \</div><div class="line">    <span class="variable">$DOCKER_STORAGE_OPTIONS</span> \</div><div class="line">    <span class="variable">$DOCKER_NETWORK_OPTIONS</span> \</div><div class="line">    <span class="variable">$ADD_REGISTRY</span> \</div><div class="line">    <span class="variable">$BLOCK_REGISTRY</span> \</div><div class="line">    <span class="variable">$INSECURE_REGISTRY</span> \</div><div class="line">--insecure-registry docker.ts.com:5000</div></pre></td></tr></table></figure></p>
<p>注：centos7的防火墙使用的是firewalld，因为之前对iptables比较熟，<br>     所以可以关掉firewalld，安装iptables服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld</div><div class="line">systemctl mask firewalld</div><div class="line">yum install iptables-services</div></pre></td></tr></table></figure></p>
<h1 id="三、-服务使用"><a href="#三、-服务使用" class="headerlink" title="三、 服务使用"></a>三、 服务使用</h1><h2 id="1、-从私有仓库拉取该镜像并使用"><a href="#1、-从私有仓库拉取该镜像并使用" class="headerlink" title="1、 从私有仓库拉取该镜像并使用"></a>1、 从私有仓库拉取该镜像并使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -t -i --name=moaserver_env --net=&quot;none&quot; -v /home/tunsuy/toContainer:/home/tunsuy/fromHost docker.ts.com:5000/moaserver_env:init /bin/bash</div></pre></td></tr></table></figure>
<p>ps：这里采用none的网络方式，是因为想自己配置所有网络</p>
<h2 id="2、-配置容器IP"><a href="#2、-配置容器IP" class="headerlink" title="2、 配置容器IP"></a>2、 配置容器IP</h2><p>这里使用我写的一个工具脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh bind_addr.sh moaserver_env 172.17.0.2</div></pre></td></tr></table></figure></p>
<p>ps：需要在主机上执行，而不是在容器中<br>脚本地址：<br><a href="https://github.com/tunsuy/TSTools/tree/master/ShellTools/docker相关" target="_blank" rel="external">https://github.com/tunsuy/TSTools/tree/master/ShellTools/docker相关</a></p>
<h2 id="3、-配置环境变量"><a href="#3、-配置环境变量" class="headerlink" title="3、 配置环境变量"></a>3、 配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p>ps：由于之前在镜像中配置的环境变量，在容器中不能自动生效（原因不明）</p>
<h2 id="4、-启动mongo和mysql"><a href="#4、-启动mongo和mysql" class="headerlink" title="4、 启动mongo和mysql"></a>4、 启动mongo和mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/mongod start</div><div class="line">/etc/init.d/mysqlaccd stop</div><div class="line">/etc/init.d/mysqld start</div></pre></td></tr></table></figure>
<h2 id="5、-更新hosts文件"><a href="#5、-更新hosts文件" class="headerlink" title="5、 更新hosts文件"></a>5、 更新hosts文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将模板文件写入hosts：</span></div><div class="line">cat /home/tunsuy/fromHost/host_templet &gt;&gt; /etc/hosts</div><div class="line"></div><div class="line"><span class="comment">#将hosts中的IP改成容器ip</span></div><div class="line">mdbg -p 23808 -o changeip oldip=172.17.0.1,newip=172.17.0.2</div></pre></td></tr></table></figure>
<p>ps：容器的/etc/hosts、/etc/resolv.conf文件是挂载在宿主机中的</p>
<h2 id="6、-启动moa服务"><a href="#6、-启动moa服务" class="headerlink" title="6、 启动moa服务"></a>6、 启动moa服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/moa start</div></pre></td></tr></table></figure>
<h2 id="7、端口映射"><a href="#7、端口映射" class="headerlink" title="7、端口映射"></a>7、端口映射</h2><p>想要外部访问该docker，还需要进行主机和容器的端口映射<br>有两种方式：</p>
<ul>
<li>在新建一个容器的时候就指定（一般都是这样）</li>
<li>在已生成的容器中动态配置：主要还是基于iptables来设置（因为docker的原理实际上也是这样的）<br>因为之前我们在创建容器的时候没有指定，所以这里以第二种来配置<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A DOCKER ! -i docker0 -o docker0 -p tcp --dport <span class="number">443</span> -d <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> -j ACCEPT</div><div class="line">iptables -t nat -A POSTROUTING -p tcp --dport <span class="number">443</span> -s <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> -d <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span> -j MASQUERADE</div><div class="line">iptables -t nat -A DOCKER ! -i dokcer0 -p tcp --dport <span class="number">443</span> -j DNAT --to-destination <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">443</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>ps：为了方便，写了一个工具脚本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh docker_expose.sh moaserver_env <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> add <span class="number">4432</span>:<span class="number">443</span></div></pre></td></tr></table></figure></p>
<p>脚本地址：<br>        <a href="https://github.com/tunsuy/TSTools/tree/master/ShellTools/docker相关" target="_blank" rel="external">https://github.com/tunsuy/TSTools/tree/master/ShellTools/docker相关</a></p>
<p>注：查看iptables情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -nvxL --line-numbers</div><div class="line">iptables -t nat -nvxL --line-numbers</div></pre></td></tr></table></figure></p>
<h1 id="四、-不足之处"><a href="#四、-不足之处" class="headerlink" title="四、 不足之处"></a>四、 不足之处</h1><p>因为所有的容器都是基于宿主机的，最多通过修改时区来设置，也就只能偏移24小时<br>网上有一种方案，不知可行不：<a href="https://github.com/wolfcw/libfaketime/" target="_blank" rel="external">https://github.com/wolfcw/libfaketime/</a></p>
<h1 id="五、-参考链接"><a href="#五、-参考链接" class="headerlink" title="五、 参考链接"></a>五、 参考链接</h1><p><a href="https://yeasy.gitbooks.io/docker_practice/content/cases/supervisor.html" target="_blank" rel="external">https://yeasy.gitbooks.io/docker_practice/content/cases/supervisor.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-简介&quot;&gt;&lt;a href=&quot;#一、-简介&quot; class=&quot;headerlink&quot; title=&quot;一、 简介&quot;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;p&gt;该文章主要讲解将公司的server服务docker化的具体过程，从中可以看到很多docker相关知识的使用以及网络配
    
    </summary>
    
      <category term="docker" scheme="https://tunsuy.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://tunsuy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>iOS下使用UI-Testing进行发包前Checklist检查</title>
    <link href="https://tunsuy.github.io/2016/05/19/iOS%E4%B8%8B%E4%BD%BF%E7%94%A8XCTest%E8%BF%9B%E8%A1%8C%E5%8F%91%E5%8C%85%E5%89%8DChecklist%E6%A3%80%E6%9F%A5/"/>
    <id>https://tunsuy.github.io/2016/05/19/iOS下使用XCTest进行发包前Checklist检查/</id>
    <published>2016-05-19T07:16:22.000Z</published>
    <updated>2017-02-28T12:24:31.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UI-Testing简介"><a href="#UI-Testing简介" class="headerlink" title="UI Testing简介"></a>UI Testing简介</h3><p>1、UI Testing 是基于 XCTest 测试框架的。XCTest 作为 OCUnit 的替代者，目前是 iOS 单元测试框架不二之选，很多其他测试框架也基于 XCTest 封装。XCTest 有如下特点：</p>
<ul>
<li>测试用例需要继承 XCTestCase</li>
<li>有类似 Junit 的 setup 或者 teardown方法</li>
<li>还算不错的 Assertions</li>
<li>和 Xcode 深度集成</li>
<li>可以使用 Xcode server 的持续集成。支持 Swift 和 Objective-C</li>
</ul>
<p>2、那 UI Testing 在 XCTest 的基础上实际上是扩展了几个类，协议<br>所以本质上 UI Testing 还是 XCTest，所以写用例的时候，还是需要遵从 XCTest 的规则</p>
<p>3、UI Testing 需要依靠 Accessibility 来定位元素。UI Testing 可以通过你的应用提供的 Accessibility 功能来与你的应用连接，这样就解决了设备大小不一的问题。如果你重新调整了 UI 中的某些元素，你也不用重写整套测试。当然实现 Accessibility 的本质不是为了使用 UI Testing，而是为了能帮助行动不便的用户更好地使用你的应用。</p>
<h3 id="具体实践"><a href="#具体实践" class="headerlink" title="具体实践"></a>具体实践</h3><p>Xcode 7中创建新工程时，可以选择是否要包含UI测试——这里就不演示了  </p>
<p>下面说说在已有工程的时候，怎么进行UI Testing<br>1、再项目工程中增加一个target<br><img src="/2016/05/19/iOS下使用XCTest进行发包前Checklist检查/target1.jpg" alt="target1.jpg" title=""></p>
<p>如图中1所示点击添加UI Testing Bundle<br>添加之后如图中2、3所示。</p>
<p>2、编写测试类或者测试方法<br>在图中3所示中的.m文件中添加测试方法，<br>当然实际项目中，肯定是根据各自的模块自己新建一系列的类及方法<br>（注：测试类及其测试方法必须按照XCTest的命令规则及要求来）</p>
<p>3、运行测试用例<br>可以直接在导航栏中点击test运行整个UI用例 也可以如图中所示<br><img src="/2016/05/19/iOS下使用XCTest进行发包前Checklist检查/target2.jpg" alt="target2.jpg" title=""></p>
<p>点击用例右边的勾运行单个用例</p>
<p>UI testing 也具有录制功能 如图<br><img src="/2016/05/19/iOS下使用XCTest进行发包前Checklist检查/target3.jpg" alt="target3.jpg" title=""></p>
<p>点击图中所示 它将重新启动app ，然后你的每一步操作都将在你鼠标所在处自动生成OC代码<br>（注：由于UI testing 刚出来 所以录制出来的代码可能不是很规范 需要手动改一下。不过作为官方推出来的东西，以后肯定会变得更简单强大）</p>
<h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p>UI testing到底适用于什么地方呢  </p>
<p>个人认为用来做一些简单的发包前check list比较合适</p>
<p>比如 我们项目在迭代发包钱都需要测试或者开发自己跑一遍check list ，作为程序员，这些简单重复的操作交给程序来运行就好了。<br>因为UI testing 可以使用OC语言来写 所以对于开发来说 这将是非常简单的。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>具体的UI testing API 可以参看官方文档 不多比较简单</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;UI-Testing简介&quot;&gt;&lt;a href=&quot;#UI-Testing简介&quot; class=&quot;headerlink&quot; title=&quot;UI Testing简介&quot;&gt;&lt;/a&gt;UI Testing简介&lt;/h3&gt;&lt;p&gt;1、UI Testing 是基于 XCTest 测试框架的。
    
    </summary>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="自动化测试" scheme="https://tunsuy.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>selenium远程启动浏览器</title>
    <link href="https://tunsuy.github.io/2016/04/14/selenium%E8%BF%9C%E7%A8%8B%E5%90%AF%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://tunsuy.github.io/2016/04/14/selenium远程启动浏览器/</id>
    <published>2016-04-14T11:08:23.000Z</published>
    <updated>2017-02-28T06:20:02.684Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>通过selenium-server<br>1、相关下载</p>
<ul>
<li>下载server：<a href="http://seleniumhq.org/download/" target="_blank" rel="external">http://seleniumhq.org/download/</a></li>
<li>下载chrome-driver：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
</ul>
<p>2、在浏览器主机的终端上执行命令：</p>
<pre><code>java -Dwebdriver.chrome.driver=&quot;D:\chromedriver.exe&quot; -jar selenium-server.jar
</code></pre><p>3、接下来就可以在其他主机上编写测试脚本并执行了：以python为例</p>
<ul>
<li>下载基本python的selenium库：<pre><code>pip install selenium
</code></pre></li>
<li><p>编写示例脚本如下：</p>
<pre><code>from selenium import webdriver
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

driver = webdriver.Remote(
   command_executor=&apos;http://200.200.105.63:4444/wd/hub&apos;,
   desired_capabilities=webdriver.DesiredCapabilities.CHROME)

driver.get(&apos;https://200.200.169.165&apos;);
</code></pre></li>
</ul>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>直接使用driver<br>1、按照1中的下载好相应的浏览器驱动</p>
<p>2、在浏览器主机的终端上执行命令：</p>
<pre><code>chromedriver.exe --whitelisted-ips=&quot;200.200.169.162&quot;
</code></pre><p>3、编写示例脚本如下：</p>
<pre><code>from selenium import webdriver

driver = webdriver.Remote(
   command_executor=&apos;http://200.200.105.63:9515&apos;,
   desired_capabilities=DesiredCapabilities.CHROME)

driver.get(&apos;https://200.200.169.165&apos;);
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方案一&quot;&gt;&lt;a href=&quot;#方案一&quot; class=&quot;headerlink&quot; title=&quot;方案一&quot;&gt;&lt;/a&gt;方案一&lt;/h3&gt;&lt;p&gt;通过selenium-server&lt;br&gt;1、相关下载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载server：&lt;a href=&quot;http://
    
    </summary>
    
      <category term="selenium" scheme="https://tunsuy.github.io/categories/selenium/"/>
    
    
      <category term="web" scheme="https://tunsuy.github.io/tags/web/"/>
    
      <category term="selenium" scheme="https://tunsuy.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>redmine迁移：从windows下迁移到linux</title>
    <link href="https://tunsuy.github.io/2015/10/27/redmine%E8%BF%81%E7%A7%BB%EF%BC%9A%E4%BB%8Ewindows%E4%B8%8B%E8%BF%81%E7%A7%BB%E5%88%B0linux/"/>
    <id>https://tunsuy.github.io/2015/10/27/redmine迁移：从windows下迁移到linux/</id>
    <published>2015-10-27T11:24:22.000Z</published>
    <updated>2017-02-28T06:20:02.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h3><p>1、在linux下将redmine安装好  </p>
<p>2、从原来的服务器上（windows）导出数据库文件（sql文件）  </p>
<p>3、将现在的服务器（linux）上的redmine数据库清空<br>注：是清空，不能删除，因为删除会导致之后访问不了，具体原因可能是兼容问题  </p>
<p>4、将2步中导出来的sql文件导入3步中清空的redmine数据库中<br>注：可能返回结果会提示说有错误，记下出错的表  </p>
<p>5、将出错的表重新删除再导入<br>注：记住是删除，不是清空<br>到目前为止数据库文件已经全部导入成功了  </p>
<p>6、附件的导入<br>——将原来的服务器上的redmine中files文件拷贝到现在的服务器上的相同目录下  </p>
<p>至此全部迁移数据已完成</p>
<h3 id="问题及解决方法："><a href="#问题及解决方法：" class="headerlink" title="问题及解决方法："></a>问题及解决方法：</h3><p>1、redmine的rtx提醒收到的连接还是原来服务器的链接<br>排查：</p>
<ul>
<li>查看邮件配置文件是否正确——正确</li>
<li>通过rtx提醒的脚本调试<br>发现redmine传递给rtx的提醒内容就是提问题时填写的内容（也就是数据库中的内容）</li>
<li>于是进入数据库中相应表（setting）查看，问题真是出在这里：<br>这个表有个字段是设置hostname的，填写的还是以前的url（因为是导入以前的数据嘛）  </li>
</ul>
<p>解决：将该字段改为正确的访问ip即可</p>
<p>2、导入之后redmine上的时间显示不对<br>排查：查看服务器时间——问题确实出在这里<br>解决：将服务器时间设为当前时间</p>
<p>3、无法上传附件<br>排查：</p>
<ul>
<li>上传一个附件，没有返回错误，但是就是显示不出来</li>
<li>查看数据库，确实没有插入进去</li>
<li>既然能查看以前的附件，为什么迁移过来后就上传不了呢？</li>
<li>联想：附件目录（files）是不是只有可读权限啊</li>
</ul>
<p>解决：</p>
<ul>
<li>将files目录设置为可读写权限（chmod 777 ./files/*）</li>
<li>重启服务，再次上传，成功</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;迁移步骤&quot;&gt;&lt;a href=&quot;#迁移步骤&quot; class=&quot;headerlink&quot; title=&quot;迁移步骤&quot;&gt;&lt;/a&gt;迁移步骤&lt;/h3&gt;&lt;p&gt;1、在linux下将redmine安装好  &lt;/p&gt;
&lt;p&gt;2、从原来的服务器上（windows）导出数据库文件（sql文件
    
    </summary>
    
      <category term="redmine" scheme="https://tunsuy.github.io/categories/redmine/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="redmine" scheme="https://tunsuy.github.io/tags/redmine/"/>
    
  </entry>
  
  <entry>
    <title>calabash-ios原理分析</title>
    <link href="https://tunsuy.github.io/2015/06/12/calabash-ios%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://tunsuy.github.io/2015/06/12/calabash-ios原理分析/</id>
    <published>2015-06-12T07:10:51.000Z</published>
    <updated>2017-02-28T12:41:45.765Z</updated>
    
    <content type="html"><![CDATA[<p>calabash同时支持ios和Android平台，这里只介绍ios平台。</p>
<h3 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h3><p>calabash-ios整个框架采用 C/S 的运行模式，系统架构如下图所示：</p>
<img src="/2015/06/12/calabash-ios原理分析/calabash-ios.jpg" alt="calabash-ios.jpg" title="">
<h3 id="框架分析"><a href="#框架分析" class="headerlink" title="框架分析"></a>框架分析</h3><p>接上图</p>
<p>1、其中，Runner 负责接受用户指令，并对其进行数据校验、指令转换等操作</p>
<p>2、之后将其交给客户端处理（这里的客户端是指运行pc上的代码）</p>
<p>3、客户端将指令发送给对应服务器http server（这里的服务器就是编译进app中的calabash.framework），请求其执行对应操作</p>
<p>4、client-server两者之间通过 JSON 格式的数据进行交互</p>
<p>5、所有执行结果最终会被收集到 Results 中。</p>
<p>6、Calabash-iOS 服务器是基于Frank构建的，Frank也是一种基于cucumber的自动化测试框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;calabash同时支持ios和Android平台，这里只介绍ios平台。&lt;/p&gt;
&lt;h3 id=&quot;系统架构图&quot;&gt;&lt;a href=&quot;#系统架构图&quot; class=&quot;headerlink&quot; title=&quot;系统架构图&quot;&gt;&lt;/a&gt;系统架构图&lt;/h3&gt;&lt;p&gt;calabash-ios整
    
    </summary>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="自动化测试" scheme="https://tunsuy.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>利用leakcanary检测android内存泄露</title>
    <link href="https://tunsuy.github.io/2015/06/10/%E5%88%A9%E7%94%A8leakcanay%E6%A3%80%E6%B5%8Bandroid%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>https://tunsuy.github.io/2015/06/10/利用leakcanay检测android内存泄露/</id>
    <published>2015-06-10T07:21:24.000Z</published>
    <updated>2017-02-28T12:24:32.025Z</updated>
    
    <content type="html"><![CDATA[<p>leakcanary的知识就不在这里普及了，随便Google下就知道</p>
<h3 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h3><p>直接说在项目中怎么操作，如下：<br>1、在 build.gradle 中加入引用，不同的编译使用不同的引用：</p>
<pre><code>dependencies {
  debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.3&apos;
  releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.3&apos;
}
</code></pre><p>2、在你的项目的 Application 中：</p>
<pre><code>public class ExampleApplication extends Application {

  @Override public void onCreate() {
    super.onCreate();
    LeakCanary.install(this);    //加上这一句
  }}
</code></pre><p>这样， 重新打包安装之后 ，在操作测试该APP的过程中，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。</p>
<h3 id="具体实践"><a href="#具体实践" class="headerlink" title="具体实践"></a>具体实践</h3><p>具体以我们口袋助理来介绍下：</p>
<p>1、在build.gradle 中加入引用</p>
<p>2、在MoaApplication.java中的onCreate方法中加入</p>
<pre><code>LeakCanary.install(this);
</code></pre><p>3、故意造一个内存泄露的地方<br>以创建工作汇报为例：将CreateWorkReportActivity.java中的EditText变量改为静态的(static)</p>
<p>4、编译打包查看效果</p>
<ul>
<li>这个时候安装应用到手机，会自动安装一个Leaks应用<br>注：有的手机需要重启下才能看到Leaks应用，比如我用的华为手机就是这样</li>
</ul>
<p>5、检查是否真的如我们预期的一样：在创建工作汇报的时候存在内存泄露<br>创建一个工作汇报，回到汇报列表，此时我们会发现收到了一个Leaks的通知<br>如图：</p>
<img src="/2015/06/10/利用leakcanay检测android内存泄露/leak-notify.jpg" alt="leak-notify.jpg" title="">
<p>点击该通知，进入Leaks，可以查看到详细的该内存泄露的调用信息，从而定位到该内存泄露<br>如图：</p>
<img src="/2015/06/10/利用leakcanay检测android内存泄露/leak-info.jpg" alt="leak-info.jpg" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leakcanary的知识就不在这里普及了，随便Google下就知道&lt;/p&gt;
&lt;h3 id=&quot;项目集成&quot;&gt;&lt;a href=&quot;#项目集成&quot; class=&quot;headerlink&quot; title=&quot;项目集成&quot;&gt;&lt;/a&gt;项目集成&lt;/h3&gt;&lt;p&gt;直接说在项目中怎么操作，如下：&lt;br&gt;1
    
    </summary>
    
    
      <category term="Android" scheme="https://tunsuy.github.io/tags/Android/"/>
    
      <category term="测试" scheme="https://tunsuy.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
