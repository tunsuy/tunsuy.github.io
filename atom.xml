<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鱼儿塘</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tunsuy.github.io/"/>
  <updated>2017-03-18T03:55:36.250Z</updated>
  <id>https://tunsuy.github.io/</id>
  
  <author>
    <name>tunsuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中的异步编程详解</title>
    <link href="https://tunsuy.github.io/2017/03/05/Python%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>https://tunsuy.github.io/2017/03/05/Python中的异步编程详解/</id>
    <published>2017-03-05T03:36:37.000Z</published>
    <updated>2017-03-18T03:55:36.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-协程和线程"><a href="#一、-协程和线程" class="headerlink" title="一、 协程和线程"></a>一、 协程和线程</h1><p>多线程的Python程序总是让你看起来像是同时在运行多个函数。但是多线程有三大问题：</p>
<ul>
<li>它们需要特殊的工具来协调各个线程之间的安全。这让编写代码比单线程程序更加的苦难。并且这让代码变得更加的难以维护和扩展。</li>
<li>线程需要更多的内存，每个执行中的线程大概需要8M。这对于现在大部分计算机来说可能不算什么。但是如果你想让你的程序同时运行成千上万的功能，这可能就会导致有些线程不工作了。</li>
<li>开启一个线程的代价是很高的。如果你频繁的创建和销毁一个线程，那么这开销将会是很大的，将拖慢整个系统。</li>
</ul>
<a id="more"></a>
<p>Python用协程将解决这些问题。协程让你的Python程序看起来有很多同时工作的函数功能。它们被实现为作为生成器的扩展功能。开启一个生成器协程的代价就只相当于一个函数调用。一旦开启协程，它们的内存消耗少于1KB。</p>
<p>关于Python的协程发展，这篇文章讲的比较好 <a href="http://shangliuyan.github.io/2015/07/06/python%E7%9A%84%E5%8D%8F%E7%A8%8B/" target="_blank" rel="external">python的协程</a></p>
<p>下面先来看看Python中的生成器</p>
<h1 id="二、-生成器"><a href="#二、-生成器" class="headerlink" title="二、 生成器"></a>二、 生成器</h1><p>简单来说，生成器就是一个生产值的方法。一个方法通常返回一个值之后，内存调用栈中就会将该方法的调用信息给销毁了。当我们再次调用该方法时，又会从入口开始从头执行，它是一次性执行的。但是一个生成器能够 <code>yield</code> 一个值，并且暂停该方法的执行吗，同时将线程控制器交给调用者。当我们想要得到其他值的时候，又可以再次恢复这个方法的执行。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="string">"Hello"</span></div><div class="line">    <span class="keyword">yield</span> <span class="string">"World"</span></div><div class="line"></div><div class="line"></div><div class="line">gen = simple_gen()</div><div class="line">print(next(gen))</div><div class="line">print(next(gen))</div></pre></td></tr></table></figure></p>
<p>注：一个生成器方法被调用时不会直接返回任何的值，而是当返回一个生成器对象（类似于迭代器）。我们可以对这个生成器调用 <code>next()</code> 方法来获取每一个值，或者运行 <code>for</code> 循环。</p>
<p>生成器有什么用呢？</p>
<p>假如你的老板要求你写一个方法来生成100以内的序列（一个 <code>range()</code> 的超级简化版本）。你可能这样实现它：你定义一个空列表，然后将数字添加进入，最后返回该列表。后来这个需求变更了，需要生成千万的序列。这时如果你在一个列表中存储千万的数据，这将导致内存溢出。这时，生成器可以解决这个问题：你可以生成这些数据，但是不用存储在列表中，下面是示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_nums</span><span class="params">()</span>:</span></div><div class="line">    num = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> num</div><div class="line">        num = num + <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">nums = generate_nums()</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">    print(x)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">9</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<h1 id="三、-协程"><a href="#三、-协程" class="headerlink" title="三、 协程"></a>三、 协程</h1><p>在上一节中，我们已经看见了，使用生成器我们可以从方法上下文中拿到数据。那如果我们也想要传递一些数据给该方法上下文中的变量呢？这就是协程发挥的作用了。<code>yield</code> 关键字能够用来获取数据，也能作为一个表达式。我们能够对生成器对象使用 <code>send()</code> 方法来传递数据给方法。这就是所谓的 <code>“基于生成器的协程”</code>。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">coro</span><span class="params">()</span>:</span></div><div class="line">    hello = <span class="keyword">yield</span> <span class="string">"Hello"</span></div><div class="line">    <span class="keyword">yield</span> hello</div><div class="line"></div><div class="line"></div><div class="line">c = coro()</div><div class="line">print(next(c))</div><div class="line">print(c.send(<span class="string">"World"</span>))</div></pre></td></tr></table></figure></p>
<p>这段代码是怎样工作的呢？首先我们执行 <code>next(c)</code>, 第一次拿到 <code>coro()</code> 中的数据 <code>Hello</code> (此时 <code>coro()</code> 方法暂停，等待下一次恢复)。然后我们通过 <code>send()</code> 方法向方法 <code>coro()</code> 传递一个值 <code>World</code>，此时 <code>coro()</code> 方法恢复执行，并且将我们发送的数据赋值给 <code>hello</code> 变量。并开始往下执行直到遇到下一个 <code>yield</code> ，此时方法返回 <code>World</code> 。</p>
<p>Python的生成器是协程coroutine的一种形式，但它的局限性在于只能向它的直接调用者yield值。这意味着那些包含yield的代码不能想其他代码那样被分离出来放到一个单独的函数中。这也正是 <code>yield from</code> 要解决的。</p>
<h1 id="四、-yield-from"><a href="#四、-yield-from" class="headerlink" title="四、 yield from"></a>四、 yield from</h1><p> <code>yield from</code> 允许一个generator生成器将其部分操作委派给另一个生成器。其产生的主要动力在于使生成器能够很容易分为多个拥有send和throw方法的子生成器，像一个大函数可以分为多个子函数一样简单。示例：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span><span class="params">()</span>:</span>    <span class="comment"># 子生成器，将传进的非None值累加，传进的值若为None，则返回累加结果</span></div><div class="line"><span class="meta">... </span>    tally = <span class="number">0</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line"><span class="meta">... </span>        next = <span class="keyword">yield</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">if</span> next <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> tally</div><div class="line"><span class="meta">... </span>        tally += next</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">gather_tallies</span><span class="params">(tallies)</span>:</span>    <span class="comment"># 外部生成器，将累加操作任务委托给子生成器</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line"><span class="meta">... </span>        tally = <span class="keyword">yield</span> <span class="keyword">from</span> accumulate()</div><div class="line"><span class="meta">... </span>        tallies.append(tally)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tallies = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>acc = gather_tallies(tallies)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(acc)    <span class="comment"># 使累加生成器准备好接收传入值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line"><span class="meta">... </span>    acc.send(i)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>acc.send(<span class="keyword">None</span>)    <span class="comment"># 结束第一次累加</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line"><span class="meta">... </span>    acc.send(i)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>acc.send(<span class="keyword">None</span>)    <span class="comment"># 结束第二次累加</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tallies    <span class="comment"># 输出最终结果</span></div><div class="line">[<span class="number">6</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure></p>
<p>基于生成器的协程在Python2.5以上就有了，但是在Python3.5，又有了更加灵活强大的协程支持 <code>async/await</code> 以及本地协程。</p>
<h1 id="五、-异步I-O"><a href="#五、-异步I-O" class="headerlink" title="五、 异步I/O"></a>五、 异步I/O</h1><p>从Python3.4起，有了一个叫做 <code>asyncio</code> 的新模块，提供了很多好的API来处理异步程序。我们可以使用协程和asyncio模块更加容易的处理异常程序。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_date</span><span class="params">(num, loop)</span>:</span></div><div class="line">    end_time = loop.time() + <span class="number">50.0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">"Loop: &#123;&#125; Time: &#123;&#125;"</span>.format(num, datetime.datetime.now()))</div><div class="line">        <span class="keyword">if</span> (loop.time() + <span class="number">1.0</span>) &gt;= end_time:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(random.randint(<span class="number">0</span>, <span class="number">5</span>))</div><div class="line"></div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"></div><div class="line">asyncio.ensure_future(display_date(<span class="number">1</span>, loop))</div><div class="line">asyncio.ensure_future(display_date(<span class="number">2</span>, loop))</div><div class="line"></div><div class="line">loop.run_forever()</div></pre></td></tr></table></figure></p>
<p>这段代码中，我们创建了一个协程 <code>display_date(num, loop)</code> 。它使用一个 <code>yield from</code> 来等待子协程 <code>asyncio.sleep()</code> 的返回结果。<code>asyncio.sleep()</code> 是一个协程，在给定的时间之后完成。因此我们传递随机的时间给它。然后我们使用 <code>asyncio.ensure_future()</code> 在默认时间循环中调度 <code>display_date()</code> 协程的执行。</p>
<p>通过输出，我们可以看到两个协程在并发的执行。当我们使用 <code>yield from</code> 时，这事件循环知道它将耗时一会，所以它会自动中断这个协程的执行，转而去执行另外一个。因此看起来是并发的执行（但不是并行，因为事件循环是一个单线程）。</p>
<p>正如你知道的，<code>yield from</code> 是一个语法糖：<code>for x in asyncio.sleep(random.randint(0, 5)): yield x</code>。</p>
<h1 id="六、-原生协程"><a href="#六、-原生协程" class="headerlink" title="六、 原生协程"></a>六、 原生协程</h1><p>在Python3.5起，提供了 <code>async/await</code> 来支持原生协程。上一节的代码可以这样重写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">display_date</span><span class="params">(num, loop, )</span>:</span></div><div class="line">    end_time = loop.time() + <span class="number">50.0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">"Loop: &#123;&#125; Time: &#123;&#125;"</span>.format(num, datetime.datetime.now()))</div><div class="line">        <span class="keyword">if</span> (loop.time() + <span class="number">1.0</span>) &gt;= end_time:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">await</span> asyncio.sleep(random.randint(<span class="number">0</span>, <span class="number">5</span>))</div><div class="line"></div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"></div><div class="line">asyncio.ensure_future(display_date(<span class="number">1</span>, loop))</div><div class="line">asyncio.ensure_future(display_date(<span class="number">2</span>, loop))</div><div class="line"></div><div class="line">loop.run_forever()</div></pre></td></tr></table></figure></p>
<h1 id="七、-两种模式对比"><a href="#七、-两种模式对比" class="headerlink" title="七、 两种模式对比"></a>七、 两种模式对比</h1><p>原生协程和基于生成器的协程在功能上没有什么差异，除了使用的关键字不同而已。两者之间不能混用，比如在原生中使用 <code>yield/yield from</code> ，在基于生成器的协程中使用 <code>await</code> 。</p>
<p>尽管有使用上的不同，但是我们也可以对他们进行互操作。我们只需要增加 <code>@types.coroutine</code> 装饰器到旧的基于生成器协程上。也就是说，我们能够在原生协程中使用 <code>await</code> 来等待一个基于生成器的协程，在基于生成器的协程中使用 <code>yield from</code> 来等待一个原生协程。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> types</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@types.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sleep_func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(random.randint(<span class="number">0</span>, <span class="number">5</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">display_date</span><span class="params">(num, loop, )</span>:</span></div><div class="line">    end_time = loop.time() + <span class="number">50.0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">"Loop: &#123;&#125; Time: &#123;&#125;"</span>.format(num, datetime.datetime.now()))</div><div class="line">        <span class="keyword">if</span> (loop.time() + <span class="number">1.0</span>) &gt;= end_time:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">await</span> my_sleep_func()</div><div class="line"></div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"></div><div class="line">asyncio.ensure_future(display_date(<span class="number">1</span>, loop))</div><div class="line">asyncio.ensure_future(display_date(<span class="number">2</span>, loop))</div><div class="line"></div><div class="line">loop.run_forever()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-协程和线程&quot;&gt;&lt;a href=&quot;#一、-协程和线程&quot; class=&quot;headerlink&quot; title=&quot;一、 协程和线程&quot;&gt;&lt;/a&gt;一、 协程和线程&lt;/h1&gt;&lt;p&gt;多线程的Python程序总是让你看起来像是同时在运行多个函数。但是多线程有三大问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们需要特殊的工具来协调各个线程之间的安全。这让编写代码比单线程程序更加的苦难。并且这让代码变得更加的难以维护和扩展。&lt;/li&gt;
&lt;li&gt;线程需要更多的内存，每个执行中的线程大概需要8M。这对于现在大部分计算机来说可能不算什么。但是如果你想让你的程序同时运行成千上万的功能，这可能就会导致有些线程不工作了。&lt;/li&gt;
&lt;li&gt;开启一个线程的代价是很高的。如果你频繁的创建和销毁一个线程，那么这开销将会是很大的，将拖慢整个系统。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="https://tunsuy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>高效Python编程之方法参数</title>
    <link href="https://tunsuy.github.io/2017/02/18/%E9%AB%98%E6%95%88Python%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/"/>
    <id>https://tunsuy.github.io/2017/02/18/高效Python编程之方法参数/</id>
    <published>2017-02-18T03:31:28.000Z</published>
    <updated>2017-03-18T04:05:41.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-可变数量参数"><a href="#一、-可变数量参数" class="headerlink" title="一、 可变数量参数"></a>一、 可变数量参数</h1><h2 id="1、-概述"><a href="#1、-概述" class="headerlink" title="1、 概述"></a>1、 概述</h2><p>可变数量参数是指参数前带 <code>*</code> 的。如 <code>*args</code>.<br>比如，你想要通过一些参数信息来打印日志。使用固定参数如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, values)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> values:</div><div class="line">        print(message)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        values_str = <span class="string">', '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> values)</div><div class="line">        print(<span class="string">'%s: %s'</span> % (message, values_str))</div><div class="line"></div><div class="line">log(<span class="string">'My numbers are'</span>, [<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">log(<span class="string">'Hi there'</span>, [])</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">My numbers are: <span class="number">1</span>, <span class="number">2</span></div><div class="line">Hi there</div></pre></td></tr></table></figure></p>
<p>可以看出，当你没有values值传递的时候，你也不得不传递一个 <code>[]</code> 。</p>
<a id="more"></a>
<p>最好的做法就是没有值，第二个参数就留空。那么你能够在最后一个参数前加 <code>*</code> 来达到这样的效果。那么最后一个参数，你传递多少个值都是合法的。如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, *values)</span>:</span>  <span class="comment"># The only difference</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> values:</div><div class="line">        print(message)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        values_str = <span class="string">', '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> values)</div><div class="line">        print(<span class="string">'%s: %s'</span> % (message, values_str))</div><div class="line"></div><div class="line">log(<span class="string">'My numbers are'</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line">log(<span class="string">'Hi there'</span>)  <span class="comment"># Much better</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">My numbers are: <span class="number">1</span>, <span class="number">2</span></div><div class="line">Hi there</div></pre></td></tr></table></figure></p>
<p>如果你已经有了一个列表变量，想要传递给像log这样的可选参数方法。你能够直接在列表变量前加 <code>*</code> 传递给方法。这表示让Python将列表中的元素项依次传递给方法。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">favorites = [<span class="number">7</span>, <span class="number">33</span>, <span class="number">99</span>]</div><div class="line">log(<span class="string">'Favorite colors'</span>, *favorites)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">Favorite colors: <span class="number">7</span>, <span class="number">33</span>, <span class="number">99</span></div></pre></td></tr></table></figure></p>
<h2 id="2、-问题注意"><a href="#2、-问题注意" class="headerlink" title="2、 问题注意"></a>2、 问题注意</h2><p>接受可变位置的可变数量的参数有两个问题：</p>
<p>第一个问题就是可变参数在被传递到方法中时总是被转换为一个元组。这就意味着如果一个方法的参数是生成器前加 <code>*</code> 。那么该生成器参数将全部迭代完所有的元素，然后返回包含来自该生成器的所有元素组成的元组，这就有可能在数据量比较大的时候占用很大的内存，导致程序crash。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_generator</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">yield</span> i</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(*args)</span>:</span></div><div class="line">    print(args)</div><div class="line"></div><div class="line">it = my_generator()</div><div class="line">my_func(*it)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure></p>
<p>第二个问题就是参数是位置对应的，传递的参数需要根据参数位置来传递，如果中间某个参数没有，那么可变参数中的元素将被填充到那个没有传参的参数中，具体示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(sequence, message, *values)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> values:</div><div class="line">        print(<span class="string">'%s: %s'</span> % (sequence, message))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        values_str = <span class="string">', '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> values)</div><div class="line">        print(<span class="string">'%s: %s: %s'</span> % (sequence, message, values_str))</div><div class="line"></div><div class="line">log(<span class="number">1</span>, <span class="string">'Favorites'</span>, <span class="number">7</span>, <span class="number">33</span>)      <span class="comment"># New usage is OK</span></div><div class="line">log(<span class="string">'Favorite numbers'</span>, <span class="number">7</span>, <span class="number">33</span>)  <span class="comment"># Old usage breaks</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">1</span>: Favorites: <span class="number">7</span>, <span class="number">33</span></div><div class="line">Favorite numbers: <span class="number">7</span>: <span class="number">33</span></div></pre></td></tr></table></figure></p>
<h1 id="二、-关键字参数"><a href="#二、-关键字参数" class="headerlink" title="二、 关键字参数"></a>二、 关键字参数</h1><h2 id="1、-概述-1"><a href="#1、-概述-1" class="headerlink" title="1、 概述"></a>1、 概述</h2><p>跟其他程序语言一样，在Python中调用方法允许使用位置来传递参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remainder</span><span class="params">(number, divisor)</span>:</span></div><div class="line">    <span class="keyword">return</span> number % divisor</div><div class="line"></div><div class="line"><span class="keyword">assert</span> remainder(<span class="number">20</span>, <span class="number">7</span>) == <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>在Python中所有的位置参数也都可以使用关键字来传递，方法定义中的关键字也就是方法调用中的赋值变量。关键字参数能够以任意的位置来传递，也能够同位置参数混合使用。下面的调用都是等效的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">remainder(<span class="number">20</span>, <span class="number">7</span>)</div><div class="line">remainder(<span class="number">20</span>, divisor=<span class="number">7</span>)</div><div class="line">remainder(number=<span class="number">20</span>, divisor=<span class="number">7</span>)</div><div class="line">remainder(divisor=<span class="number">7</span>, number=<span class="number">20</span>)</div></pre></td></tr></table></figure></p>
<h2 id="2、-问题注意-1"><a href="#2、-问题注意-1" class="headerlink" title="2、 问题注意"></a>2、 问题注意</h2><p>位置参数必现在关键字参数之前被指定，看下面就是一个违法的调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">remainder(number=<span class="number">20</span>, <span class="number">7</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">SyntaxError: non-keyword arg after keyword arg</div></pre></td></tr></table></figure></p>
<p>每一个参数只能被指定一次：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">remainder(<span class="number">20</span>, number=<span class="number">7</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">TypeError: remainder() got multiple values <span class="keyword">for</span> argument <span class="string">'number'</span></div></pre></td></tr></table></figure></p>
<h2 id="3、-优点"><a href="#3、-优点" class="headerlink" title="3、 优点"></a>3、 优点</h2><p>使用关键字参数让程序可读性更好，通过参数名即可知道传递的参数的作用。</p>
<p>关键字参数可以指定默认的值，这对于某些逻辑是很有作用的。在调用的时候则可以不用传递参数，那么该方法将使用默认的值。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flow_rate</span><span class="params">(weight_diff, time_diff, period=<span class="number">1</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> (weight_diff / time_diff) * period</div></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">flow_per_second = flow_rate(weight_diff, time_diff)</div><div class="line">flow_per_hour = flow_rate(weight_diff, time_diff, period=<span class="number">3600</span>)</div></pre></td></tr></table></figure></p>
<p>有利于程序的扩展性。可以对增加的关键字使用默认值，达到向后兼容的效果，不需要改动已有的代码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flow_rate</span><span class="params">(weight_diff, time_diff,</span></span></div><div class="line">              period=<span class="number">1</span>, units_per_kg=<span class="number">1</span>):</div><div class="line">    <span class="keyword">return</span> ((weight_diff * units_per_kg) / time_diff) * period</div></pre></td></tr></table></figure></p>
<p>新增的调用逻辑：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pounds_per_hour = flow_rate(weight_diff, time_diff,</div><div class="line">                            period=<span class="number">3600</span>, units_per_kg=<span class="number">2.2</span>)</div></pre></td></tr></table></figure></p>
<h1 id="三、-动态默认参数"><a href="#三、-动态默认参数" class="headerlink" title="三、 动态默认参数"></a>三、 动态默认参数</h1><p>有时候你可能需要一个动态的默认参数值。先来看一个列子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, when=datetime.now<span class="params">()</span>)</span>:</span></div><div class="line">    print(<span class="string">'%s: %s'</span> % (when, message))</div><div class="line"></div><div class="line">log(<span class="string">'Hi there!'</span>)</div><div class="line">sleep(<span class="number">0.1</span>)</div><div class="line">log(<span class="string">'Hi again!'</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-15</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">10.371432</span>: Hi there!</div><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-15</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">10.371432</span>: Hi again!</div></pre></td></tr></table></figure></p>
<p>我们发现这个时间是一样的，这是因为 <code>datetime.now()</code> 只执行了一次：当这个函数被定义的时候。这是因为当程序启动的时候，加载模块，这个模块包含的代码也被加载了，那么这个默认参数值就被确认了。</p>
<p>一般的做法是给这个参数赋 <code>None</code> 值，然后在代码文档注释中说明。具体动态默认值在程序中指定。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, when=None)</span>:</span></div><div class="line">    <span class="string">"""Log a message with a timestamp.</span></div><div class="line"></div><div class="line">    Args:</div><div class="line">        message: Message to print.</div><div class="line">        when: datetime of when the message occurred.</div><div class="line">            Defaults to the present time.</div><div class="line">    """</div><div class="line">    when = datetime.now() <span class="keyword">if</span> when <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> when</div><div class="line">    print(<span class="string">'%s: %s'</span> % (when, message))</div></pre></td></tr></table></figure></p>
<p>这时输出就是动态的参数值了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">log(<span class="string">'Hi there!'</span>)</div><div class="line">sleep(<span class="number">0.1</span>)</div><div class="line">log(<span class="string">'Hi again!'</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-15</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">10.472303</span>: Hi there!</div><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-15</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">10.573395</span>: Hi again!</div></pre></td></tr></table></figure></p>
<p>使用None作为参数默认值时很重要的，特别是当你的参数是可变的时候。比如，你想要加载一个data，并使用json编码。如果编码失败，你想要返回一个空的字典。你可能这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, default=&#123;&#125;)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> json.loads(data)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">return</span> default</div></pre></td></tr></table></figure></p>
<p>这个效果之前一个列子一样，所有的调用使用的都是同样的默认值，这会导致无法预期的效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">foo = decode(<span class="string">'bad data'</span>)</div><div class="line">foo[<span class="string">'stuff'</span>] = <span class="number">5</span></div><div class="line">bar = decode(<span class="string">'also bad'</span>)</div><div class="line">bar[<span class="string">'meep'</span>] = <span class="number">1</span></div><div class="line">print(<span class="string">'Foo:'</span>, foo)</div><div class="line">print(<span class="string">'Bar:'</span>, bar)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">Foo: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>, <span class="string">'meep'</span>: <span class="number">1</span>&#125;</div><div class="line">Bar: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>, <span class="string">'meep'</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure></p>
<p>可以发现，两个对象的值都是一样的，改变一个影响了另一个。这是因为两个都是同一个默认值，指向的是同一个对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> foo <span class="keyword">is</span> bar</div></pre></td></tr></table></figure></p>
<p>使用 <code>None</code> 作为默认值可以解决这个问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, default=None)</span>:</span></div><div class="line">    <span class="string">"""Load JSON data from a string.</span></div><div class="line"></div><div class="line">    Args:</div><div class="line">        data: JSON data to decode.</div><div class="line">        default: Value to return if decoding fails.</div><div class="line">            Defaults to an empty dictionary.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> default <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        default = &#123;&#125;</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> json.loads(data)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">return</span> default</div></pre></td></tr></table></figure></p>
<p>现在调用可以发现是正确的了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">foo = decode(<span class="string">'bad data'</span>)</div><div class="line">foo[<span class="string">'stuff'</span>] = <span class="number">5</span></div><div class="line">bar = decode(<span class="string">'also bad'</span>)</div><div class="line">bar[<span class="string">'meep'</span>] = <span class="number">1</span></div><div class="line">print(<span class="string">'Foo:'</span>, foo)</div><div class="line">print(<span class="string">'Bar:'</span>, bar)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">Foo: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>&#125;</div><div class="line">Bar: &#123;<span class="string">'meep'</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure></p>
<h1 id="四、-强制使用关键字参数"><a href="#四、-强制使用关键字参数" class="headerlink" title="四、 强制使用关键字参数"></a>四、 强制使用关键字参数</h1><p>比如，你在处理两个数相除时，有时候可能想要忽略 <code>ZeroDivisionError</code> 异常，返回无穷大。有时候想要忽略 <code>OverflowError</code> 异常，返回0.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_division</span><span class="params">(number, divisor, ignore_overflow,</span></span></div><div class="line">                  ignore_zero_division):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> number / divisor</div><div class="line">    <span class="keyword">except</span> OverflowError:</div><div class="line">        <span class="keyword">if</span> ignore_overflow:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">    <span class="keyword">except</span> ZeroDivisionError:</div><div class="line">        <span class="keyword">if</span> ignore_zero_division:</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">result = safe_division(<span class="number">1</span>, <span class="number">10</span>**<span class="number">500</span>, <span class="keyword">True</span>, <span class="keyword">False</span>)</div><div class="line">print(result)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">0.0</span></div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">result = safe_division(<span class="number">1</span>, <span class="number">0</span>, <span class="keyword">False</span>, <span class="keyword">True</span>)</div><div class="line">print(result)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">inf</div></pre></td></tr></table></figure></p>
<p>但是你会发现只看调用，是非常不直观的，不知道每个参数是什么意思，这时可以用关键字参数来指示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_division_b</span><span class="params">(number, divisor,</span></span></div><div class="line">                    ignore_overflow=False,</div><div class="line">                    ignore_zero_division=False):</div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">safe_division_b(<span class="number">1</span>, <span class="number">10</span>**<span class="number">500</span>, ignore_overflow=<span class="keyword">True</span>)</div><div class="line">safe_division_b(<span class="number">1</span>, <span class="number">0</span>, ignore_zero_division=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>但是还有一个问题就是，这个关键字参数是可选，你任然可以使用位置参数来调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_division_b(<span class="number">1</span>, <span class="number">10</span>**<span class="number">500</span>, <span class="keyword">True</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<p>那么可不可以强制调用者使用关键字呢？在Python3中可以这样做：在参数中加一个 <code>*</code> 参数，表示之前的参数是位置参数，之后的参数是关键字参数，必须强制表明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_division_c</span><span class="params">(number, divisor, *,</span></span></div><div class="line">                    ignore_overflow=False,</div><div class="line">                    ignore_zero_division=False):</div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<p>现在使用位置参数来调用将报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">safe_division_c(<span class="number">1</span>, <span class="number">10</span>**<span class="number">500</span>, <span class="keyword">True</span>, <span class="keyword">False</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">TypeError: safe_division_c() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</div></pre></td></tr></table></figure></p>
<p>正确调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">safe_division_c(<span class="number">1</span>, <span class="number">0</span>, ignore_zero_division=<span class="keyword">True</span>)  <span class="comment"># OK</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    safe_division_c(<span class="number">1</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">except</span> ZeroDivisionError:</div><div class="line">    <span class="keyword">pass</span>  <span class="comment"># Expected</span></div></pre></td></tr></table></figure></p>
<h1 id="五、-可变数量关键字参数"><a href="#五、-可变数量关键字参数" class="headerlink" title="五、 可变数量关键字参数"></a>五、 可变数量关键字参数</h1><p>将数量不定的可变数量关键字参数传递给方法时，可以使用 <code>**</code> 参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Positional:'</span>, args</div><div class="line">    <span class="keyword">print</span> <span class="string">'Keyword:   '</span>, kwargs</div><div class="line"></div><div class="line">print_args(<span class="number">1</span>, <span class="number">2</span>, foo=<span class="string">'bar'</span>, stuff=<span class="string">'meep'</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">Positional: (<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Keyword:    &#123;<span class="string">'foo'</span>: <span class="string">'bar'</span>, <span class="string">'stuff'</span>: <span class="string">'meep'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>调用的时候，会将传递的所有的关键字参数传递给 <code>kwargs</code> 参数，Python会将其转化成一个字典。</p>
<h1 id="六、-参数顺序"><a href="#六、-参数顺序" class="headerlink" title="六、 参数顺序"></a>六、 参数顺序</h1><p>几种方法参数的定义顺序为：位置参数，关键字参数，非关键字可变长参数(<code>*args</code>)，可变数量关键字参数(<code>**kwargs</code>)。</p>
<p>根据传递的参数顺序来依次匹配，先逐级匹配，如果还有剩余的参数再匹配下一级参数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-可变数量参数&quot;&gt;&lt;a href=&quot;#一、-可变数量参数&quot; class=&quot;headerlink&quot; title=&quot;一、 可变数量参数&quot;&gt;&lt;/a&gt;一、 可变数量参数&lt;/h1&gt;&lt;h2 id=&quot;1、-概述&quot;&gt;&lt;a href=&quot;#1、-概述&quot; class=&quot;headerlink&quot; title=&quot;1、 概述&quot;&gt;&lt;/a&gt;1、 概述&lt;/h2&gt;&lt;p&gt;可变数量参数是指参数前带 &lt;code&gt;*&lt;/code&gt; 的。如 &lt;code&gt;*args&lt;/code&gt;.&lt;br&gt;比如，你想要通过一些参数信息来打印日志。使用固定参数如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(message, values)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; values:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(message)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        values_str = &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt;.join(str(x) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; values)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;%s: %s&#39;&lt;/span&gt; % (message, values_str))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;My numbers are&#39;&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;Hi there&#39;&lt;/span&gt;, [])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;My numbers are: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hi there&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看出，当你没有values值传递的时候，你也不得不传递一个 &lt;code&gt;[]&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://tunsuy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>深入了解Python中的装饰器</title>
    <link href="https://tunsuy.github.io/2017/02/07/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://tunsuy.github.io/2017/02/07/深入了解Python中的装饰器/</id>
    <published>2017-02-07T03:39:34.000Z</published>
    <updated>2017-03-18T03:53:59.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-概述"><a href="#一、-概述" class="headerlink" title="一、 概述"></a>一、 概述</h1><p>Python的装饰器是AOP编程的一种实现，其他很多语言也都支持装饰器模式。<br>注：AOP是指面向切面编程，详见 <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="external">AOP概念</a></p>
<p>一个装饰器允许你增加、修改或者完全修改一个方法或者函数的逻辑。使用装饰器，将与业务无关的逻辑移到装饰器中，这将会让你的代码更加的干净紧凑。</p>
<a id="more"></a>
<h1 id="二、-装饰器举例"><a href="#二、-装饰器举例" class="headerlink" title="二、 装饰器举例"></a>二、 装饰器举例</h1><p>最经典的例子当然是Python内建的装饰器：<code>@staticmethod</code> 和 <code>@classmethod</code> 。这些装饰器将一个类中的方法转换为静态方法(该方法的第一个参数不是 <code>self</code>)，和类方法(该方法的第一个参数是 <code>cls</code>)。</p>
<p>如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> cls.__name__</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'I have no use for the instance or class'</span></div><div class="line"></div><div class="line"></div><div class="line">A.foo()</div><div class="line">A.bar()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A</div><div class="line">I have no use <span class="keyword">for</span> the instance <span class="keyword">or</span> <span class="class"><span class="keyword">class</span></span></div></pre></td></tr></table></figure></p>
<h1 id="三、-装饰器定义"><a href="#三、-装饰器定义" class="headerlink" title="三、 装饰器定义"></a>三、 装饰器定义</h1><p>装饰器就是一个接受一个可调用对象(被装饰的目标)的可调用对象，返回一个和源目标(被装饰对象)接受相同参数的可调用对象(装饰器)。</p>
<p>下面来解释下这段文字：</p>
<p>首先，什么是可调用对象呢？一个可调用对象在Python中就是包含一个叫 <code>call()</code> 方法的对象。具体来说就是可以是代码块、方法或者类。你也可以给你自己的类实现这个 <code>call()</code> 方法，这样你的类实例就变成了一个可调用对象，为了检测一个对象是否是可调用的，你可以在命令行中使用内建的 <code>callable()</code> 方法测试下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">callable(len)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line">callable(<span class="string">'123'</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>注意：<code>callable()</code> 方法在Python3.0被移除了，但是在Python3.2又重新加入了。</p>
<h1 id="四、-函数装饰器"><a href="#四、-函数装饰器" class="headerlink" title="四、 函数装饰器"></a>四、 函数装饰器</h1><p>一个函数装饰器是用来装饰一个函数或者方法的。假设我们想要在每个执行之前都先输出一个字符串”Yeah, it works!”。下面以非装饰器的方式来实现它。<br>原始方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'foo() here'</span></div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo() here</div></pre></td></tr></table></figure></p>
<p>下面以一种很丑陋的方式来实现我们的需求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">original_foo = foo</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Yeah, it works!'</span></div><div class="line">    original_foo()</div><div class="line"></div><div class="line">foo = decorated_foo</div><div class="line">foo()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Yeah, it works!</div><div class="line">foo() here</div></pre></td></tr></table></figure></p>
<p>这种方式有几个问题：</p>
<ul>
<li>它会增加很多工作</li>
<li>用中间名字污染了名字空间，如：<code>original_foo()</code> 和 <code>decorated_foo()</code></li>
<li>你不得不对每一个你想要增加这个需求的方法增加同样的逻辑</li>
</ul>
<p>然而用迭代器同样能够实现这样的需求，并且是可以重用的。如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yeah_it_works</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorated</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Yeah, it works'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kwargs)</div><div class="line">   <span class="keyword">return</span> decorated</div></pre></td></tr></table></figure></p>
<p>注：<code>yeah_it_works()</code> 是一个接受一个可调用对象f的函数。返回一个接受任何类型和数量的参数的可调用对象(嵌套函数 <code>decorated</code>)<br>现在我们可以在任何函数中重用它<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@yeah_it_works</div><div class="line">def f1()</div><div class="line">    print 'f1() here'</div><div class="line"></div><div class="line">@yeah_it_works</div><div class="line">def f2()</div><div class="line">    print 'f3() here'</div><div class="line"></div><div class="line">@yeah_it_works</div><div class="line">def f3()</div><div class="line">    print 'f3() here'</div><div class="line"></div><div class="line">f1()</div><div class="line">f2()</div><div class="line">f3()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Yeah, it works</div><div class="line">f1() here</div><div class="line">Yeah, it works</div><div class="line">f2() here</div><div class="line">Yeah, it works</div><div class="line">f3() here</div></pre></td></tr></table></figure></p>
<h1 id="五、-类装饰器"><a href="#五、-类装饰器" class="headerlink" title="五、 类装饰器"></a>五、 类装饰器</h1><p>类装饰器是装饰整个类。它们在类定义时被替换。你能够对一个装饰器类增加或者减少方法，甚至将迭代器应用到所有的类的方法中。</p>
<p>假设我们要跟踪一个类抛出的所有异常，让我们假设已经有了一个函数装饰器叫 <code>track_exceptions_decorator</code> ，如果没有类装饰器，那么我们需要对每个方法应用这个函数装饰器或者采用 <code>metaclasses</code>。示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @track_exceptions_decorator</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">        ...</div><div class="line"></div><div class="line"><span class="meta">    @track_exceptions_decorator</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></div><div class="line">        ...</div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line"><span class="meta">    @track_exceptions_decorator</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f100</span><span class="params">()</span>:</span></div><div class="line">        ...</div></pre></td></tr></table></figure></p>
<p>一个类装饰器可以达到相同的效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">track_exception</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="comment"># Get all callable attributes of the class</span></div><div class="line">    callable_attributes = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> cls.__dict__.items() <span class="keyword">if</span> callable(v)&#125;</div><div class="line">    <span class="comment"># Decorate each callable attribute of to the input class</span></div><div class="line">    <span class="keyword">for</span> name, func <span class="keyword">in</span> callable_attributes.items():</div><div class="line">        decorated = track_exceptions_decorator(func)</div><div class="line">        setattr(cls, name, decorated)</div><div class="line">    <span class="keyword">return</span> cls</div><div class="line"></div><div class="line"><span class="meta">@track_exceptions</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'1'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'2'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-概述&quot;&gt;&lt;a href=&quot;#一、-概述&quot; class=&quot;headerlink&quot; title=&quot;一、 概述&quot;&gt;&lt;/a&gt;一、 概述&lt;/h1&gt;&lt;p&gt;Python的装饰器是AOP编程的一种实现，其他很多语言也都支持装饰器模式。&lt;br&gt;注：AOP是指面向切面编程，详见 &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot;&gt;AOP概念&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个装饰器允许你增加、修改或者完全修改一个方法或者函数的逻辑。使用装饰器，将与业务无关的逻辑移到装饰器中，这将会让你的代码更加的干净紧凑。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://tunsuy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>深入详解Java的NIO之Buffer</title>
    <link href="https://tunsuy.github.io/2016/12/18/%E6%B7%B1%E5%85%A5%E8%AF%A6%E8%A7%A3Java%E7%9A%84NIO%E4%B9%8BBuffer/"/>
    <id>https://tunsuy.github.io/2016/12/18/深入详解Java的NIO之Buffer/</id>
    <published>2016-12-18T12:03:09.000Z</published>
    <updated>2017-03-21T09:39:00.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>Buffer是一个写入通道或者从通道中读取的数据块。Buffer是Java I/O和Java NIO的主要差异之一。对于早期的Java I/O，数据是基于流的方式进行读写的，而现在NIO是基于buffer的方式来读写的。NIO中的通道跟流是一个意思。</p>
<h1 id="二、-Buffer特性"><a href="#二、-Buffer特性" class="headerlink" title="二、 Buffer特性"></a>二、 Buffer特性</h1><ul>
<li>Buffer是Java NIO的基本构成组件。</li>
<li>Buffer提供了一个固定大小的容器来读写数据。</li>
<li>每个buffer都是可读的，但是只有被选中的buffer才是可写的。</li>
<li>Buffer是通道的端点。</li>
<li>在一个只读buffer中，内容是不可变的，但是它的 mark, position, limit 是可变的。</li>
<li>默认的buffer是线程不安全的</li>
</ul>
<a id="more"></a>
<p>Buffer的读写模式如图所示：</p>
<img src="/2016/12/18/深入详解Java的NIO之Buffer/JavaNIOBuffer.png" alt="JavaNIOBuffer.png" title="">
<h1 id="三、-Buffer的类型"><a href="#三、-Buffer的类型" class="headerlink" title="三、 Buffer的类型"></a>三、 Buffer的类型</h1><p>每个基本类型都有一个buffer类型想对应。所有的buffer类都实现了 Buffer 接口。大部分使用的类型是 <code>ByteBuffer</code>。下面是在Java NIO包中可用的buffer类型：</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>ShortBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>FloatBuffer</li>
<li>DoubleBuffer</li>
<li>MappedByteBuffer<br>如图所示：</li>
</ul>
<img src="/2016/12/18/深入详解Java的NIO之Buffer/java-nio-buffer-classes.png" alt="java-nio-buffer-classes.png" title="">
<p>这些类都不能直接实例化，因为他们都是抽象类，但是每个都包含了静态工厂方法来创建适当类的实例。</p>
<h1 id="四、-Buffer的基本属性"><a href="#四、-Buffer的基本属性" class="headerlink" title="四、 Buffer的基本属性"></a>四、 Buffer的基本属性</h1><p>Buffer有四个基本的属性，下面简单介绍下</p>
<p>1、容量Capacity<br>Buffer是一个固定大小的类型，这个最大固定大小就叫做capacity。一旦这个buffer是满了，那么就应该在写入它之前清空它。一旦capacity被设置，在它的生命周期内就不能再被改变了。</p>
<p>2、上界Limit<br>对于写模式，limit 是等于buffer的 capacity的。对于读模式，limit是buffer的最后填充索引的下一个。当buffer被写入时，limit会自增。limit满足下面的条件： <code>0 &lt;= limit &lt;= capacity</code></p>
<p>3、位置Position<br>Position是buffer中下一个要被读或者写的元素的索引。当buffer被创建时，position被初始化为0。当读写时，position是自增的。position总是处于0和limit之间。</p>
<p>4、标记Mark<br>Mark就像是buffer中为position设置的书签一样。调用 <code>mark()</code> 来设定 <code>mark = position</code>，调用 <code>reset()</code> 来设定 <code>position = mark</code> 。</p>
<h1 id="五、-Buffer相关操作"><a href="#五、-Buffer相关操作" class="headerlink" title="五、 Buffer相关操作"></a>五、 Buffer相关操作</h1><p>1、flip()<br>该方法被用来为 <code>get()</code> 操作准备一个 buffer ，或者是用来准备一个新的写序列。<code>flip()</code> 方法设置 <code>limit</code> 等于buffer的当前 <code>position</code>，然后将 <code>position = 0</code>。</p>
<p>2、clear()<br>该方法用来为 <code>put()</code> 操作准备一个 buffer，或者用来准备一个新的读序列。<code>clear()</code> 方法设置 <code>limit = capacity</code> 和 <code>position = 0</code>。</p>
<p>3、rewind()<br>该方法用来再次读取数据。它设置 <code>position = 0</code>。</p>
<h1 id="六、-Buffer的创建"><a href="#六、-Buffer的创建" class="headerlink" title="六、 Buffer的创建"></a>六、 Buffer的创建</h1><p>Buffer是通过 <code>allocation</code> 或者 <code>wrapping</code> 来创建的。<code>allocation</code> 创建一个buffer对象，并且分配指定容量的私有空间来容纳数据元素。<code>wrapping</code> 创建一个buffer对象，但是不分配任何的空间来保存数据元素，它使用你提供的数组空间来存储buffer的数据元素。</p>
<p>举例，创建一个能够容纳100个字符的 <code>CharBuffer</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CharBuffer charBuffer = CharBuffer.allocate (<span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<p>上面这种方式，隐式的从堆上分配了一个char数组来存储这100个字符。如果你想要使用你自己创建的数组来存储，则使用 <code>wrap()</code> 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> [] myArray = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="number">100</span>];</div><div class="line">CharBuffer charbuffer = CharBuffer.wrap (myArray);</div></pre></td></tr></table></figure></p>
<p>这意味着通过调用 <code>put()</code> 方法对buffer做的变更都会反映到这个数组中。同样的，对这个数组做的任何改变都将反映到buffer中。</p>
<p>你也能够通过指定偏移和长度值作为 <code>position</code> 和 <code>limit</code> 来构造buffer：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> [] myArray = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="number">100</span>];</div><div class="line">CharBuffer charbuffer = CharBuffer.wrap (myArray , <span class="number">12</span>, <span class="number">42</span>);</div></pre></td></tr></table></figure></p>
<p>注：</p>
<ul>
<li>这个方法不会创建一个buffer，而是指向改数组的一个子集</li>
<li>这个方法拥有这个数组整体的访问权，偏移和长度参数仅仅只是设置初始状态。</li>
<li>调用这个buffer的 <code>clear()</code> 方法将使它的 <code>limit</code> 范围变为这个数组的所有元素</li>
<li>调用 <code>slice()</code> 方法能够创建一个buffer指向这个数组的一部分</li>
</ul>
<p>通过 <code>allocate()</code> 或者 <code>wrap()</code> 方法创建的buffer都不是直接在内存中开辟空间的，而是指向一个已有的数组。使用 <code>hasArray()</code> 方法告诉你这个buffer是否有一个相关联的数组，如果返回 <code>true</code>，则可以使用 <code>array()</code> 方法返回一个数组的引用给buffer。如果返回 <code>false</code>，就不要调用 <code>array()</code> 和 <code>arrayOffset()</code>，否则将抛出 <code>UnsupportedOperationException</code> 异常。</p>
<h1 id="七、访问Buffer"><a href="#七、访问Buffer" class="headerlink" title="七、访问Buffer"></a>七、访问Buffer</h1><p>每个buffer类都提供了  <code>get()</code> 和 <code>put()</code> 方法来访问buffer，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span></div><div class="line">&#123;</div><div class="line">        <span class="comment">// This is a partial API listing</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span> <span class="params">(<span class="keyword">byte</span> b)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">byte</span> b)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 访问API有绝对和相对之分，调用相对访问API时，<code>position</code> 会自动的向前进一个，调用绝对访问API时，指定索引位置的内容会被覆盖掉或者按指定索引返回内容。</p>
<h1 id="八、-Buffer的比较"><a href="#八、-Buffer的比较" class="headerlink" title="八、 Buffer的比较"></a>八、 Buffer的比较</h1><p> 所有的buffer类都提供了一个自定义的 <code>equals()</code> 方法 和 <code>compareTo()</code> 方法，比如：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (buffer1.equals (buffer2)) &#123;</div><div class="line">        doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个buffer按照下面的规则进行比较：</p>
<ul>
<li>包含的对象必须是同等类型的</li>
<li>两个buffer必须包含有相等数量的元素， 也就是说，buffer的容量不需要相同，buffer中剩余的数据索引不需要相同，但是buffer中剩余元素的数量（从 <code>position</code> 到 <code>limit</code>）必须相同</li>
<li>从 <code>get()</code> 返回的剩余数据元素的序列在每个缓冲区中必须相同。</li>
</ul>
<p>buffer还支持使用<code>compareTo()</code>方法进行词典比较。该方法返回一个正数、负数或者0。比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (buffer1.compareTo (buffer2) &gt; <span class="number">0</span>) &#123;</div><div class="line">        doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考文章 <a href="http://howtodoinjava.com/java-7/nio/java-nio-2-0-working-with-buffers/" target="_blank" rel="external">Working With Buffers</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-简介&quot;&gt;&lt;a href=&quot;#一、-简介&quot; class=&quot;headerlink&quot; title=&quot;一、 简介&quot;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;p&gt;Buffer是一个写入通道或者从通道中读取的数据块。Buffer是Java I/O和Java NIO的主要差异之一。对于早期的Java I/O，数据是基于流的方式进行读写的，而现在NIO是基于buffer的方式来读写的。NIO中的通道跟流是一个意思。&lt;/p&gt;
&lt;h1 id=&quot;二、-Buffer特性&quot;&gt;&lt;a href=&quot;#二、-Buffer特性&quot; class=&quot;headerlink&quot; title=&quot;二、 Buffer特性&quot;&gt;&lt;/a&gt;二、 Buffer特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Buffer是Java NIO的基本构成组件。&lt;/li&gt;
&lt;li&gt;Buffer提供了一个固定大小的容器来读写数据。&lt;/li&gt;
&lt;li&gt;每个buffer都是可读的，但是只有被选中的buffer才是可写的。&lt;/li&gt;
&lt;li&gt;Buffer是通道的端点。&lt;/li&gt;
&lt;li&gt;在一个只读buffer中，内容是不可变的，但是它的 mark, position, limit 是可变的。&lt;/li&gt;
&lt;li&gt;默认的buffer是线程不安全的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://tunsuy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tunsuy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>深入详解Java的NIO之Channel</title>
    <link href="https://tunsuy.github.io/2016/12/13/%E6%B7%B1%E5%85%A5%E8%AF%A6%E8%A7%A3Java%E7%9A%84NIO%E4%B9%8BChannel/"/>
    <id>https://tunsuy.github.io/2016/12/13/深入详解Java的NIO之Channel/</id>
    <published>2016-12-13T09:30:58.000Z</published>
    <updated>2017-03-21T09:43:58.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>通道是java.nio在buffer之后的第二个主要创新。通道提供与I/O服务的直接连接。通道是一种在字节缓冲区和通道另一端的实体（通常是文件或套接字）之间高效传输数据的介质。通常通道与操作系统文件描述符具有一对一的关系。通道类提供了支持平台无关性所需的抽象，但仍然具有对现代操作系统的本机I/O建模的能力。通道是网关，通过它可以以最小的开销访问操作系统的本地I/O服务。</p>
<a id="more"></a>
<h1 id="二、-Channel接口"><a href="#二、-Channel接口" class="headerlink" title="二、 Channel接口"></a>二、 Channel接口</h1><p>通道与缓冲区不同，通道 API 主要由接口指定。不同的操作系统上通道实现（Channel Implementation）会有根本性的差异，所以通道 API 仅仅描述了可以做什么。因此很自然地，通道实现经常使用操作系统的本地代码。通道接口允许您以一种受控且可移植的方式来访问底层的 I/O服务。</p>
<p>通道类簇图如下：</p>
<img src="/2016/12/13/深入详解Java的NIO之Channel/nio-channel.png" alt="nio-channel.png" title="">
<p><code>Channel</code> 作为NIO通道类的顶层类，是一个接口，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.nio.channels;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Channel</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从 Channel 接口引申出的其他接口都是面向字节的子接口，包括 Writable ByteChannel 和ReadableByteChannel。这也正好支持了我们之前所学的：通道只能在字节缓冲区上操作。</p>
<h1 id="三、-打开通道"><a href="#三、-打开通道" class="headerlink" title="三、 打开通道"></a>三、 打开通道</h1><p>作为我们都知道的，I/O 分为两大类：文件I/O 和 流I/O。因此，这也就对应两种通道类型：<code>FileChannel</code>类 和 <code>SocketChannel</code>类</p>
<p><code>FileChannel</code> 对象只能通过在一个打开的<code>RandomAccessFile</code>，<code>FileInputStream</code> 或 <code>FileOutputStream</code> 对象上调用 <code>getChannel()</code> 方法获得。示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile (<span class="string">"somefile"</span>, <span class="string">"r"</span>);</div><div class="line">FileChannel fc = raf.getChannel();</div></pre></td></tr></table></figure></p>
<p>相对于 <code>FileChannel</code>，<code>SocketChannel</code> 自身有工厂方法来创建新的socket通道，示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//How to open SocketChannel</span></div><div class="line">SocketChannel sc = SocketChannel.open();</div><div class="line">sc.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"somehost"</span>, someport));</div><div class="line"></div><div class="line"><span class="comment">//How to open ServerSocketChannel</span></div><div class="line">ServerSocketChannel ssc = ServerSocketChannel.open();</div><div class="line">ssc.socket().bind (<span class="keyword">new</span> InetSocketAddress (somelocalport));</div><div class="line"></div><div class="line"><span class="comment">//How to open DatagramChannel</span></div><div class="line">DatagramChannel dc = DatagramChannel.open();</div></pre></td></tr></table></figure></p>
<h1 id="四、-使用通道"><a href="#四、-使用通道" class="headerlink" title="四、 使用通道"></a>四、 使用通道</h1><p>通过实现以下接口的相关方法，可以实现读写操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadableByteChannel</span> <span class="keyword">extends</span> <span class="title">Channel</span></span></div><div class="line">&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WritableByteChannel</span> <span class="keyword">extends</span> <span class="title">Channel</span></span></div><div class="line">&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span> <span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ByteChannel</span> <span class="keyword">extends</span> <span class="title">ReadableByteChannel</span>, <span class="title">WritableByteChannel</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通道可以是单向或者双向的，一个通道类只实现 <code>ReadableByteChannel</code> 接口，那么它就是单向的只读通道；如果一个通道类只实现 <code>WritableByteChannel</code> 接口，那么它就是单向的只写通道。如果一个通道类两者都实现了，那么它就是双向的可读写通道。</p>
<p>文件通道和socket通道都实现了这三个接口，都是双向通道。</p>
<p>对于文件通道来说，有一点需要注意：通过 <code>FileInputStream</code> 对象的 <code>getChannel()</code> 方法获得的 <code>FileChannel</code> 对象是只读的，但是因为 <code>FileChannel</code> 实现了 <code>ByteChannel</code> ，所以从接口层面上是双向的。如果在 <code>FileChannel</code> 上调用 <code>write()</code> 方法将抛出 <code>NonWritableChannelException</code> 异常。因此，请记住，当通道连接到特定的I/O服务时，通道实例的功能将受其连接的服务的特性约束：连接到只读文件的通道实例无法写入，即使该通道实例所属的类可能具有write()方法。示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FileInputStream input = <span class="keyword">new</span> FileInputStream (<span class="string">"readOnlyFile.txt"</span>);</div><div class="line">FileChannel channel = input.getChannel();</div><div class="line"></div><div class="line"><span class="comment">// This will compile but will throw an IOException</span></div><div class="line"><span class="comment">// because the underlying file is read-only</span></div><div class="line">channel.write (buffer);</div></pre></td></tr></table></figure></p>
<p><code>ByteChannel</code> 的 <code>read()</code> 和 <code>write()</code> 方法以ByteBuffer对象作为参数。返回传输的字节数，可以小于缓冲区中的字节数，甚至为零。如果执行了部分传输，则可以将缓冲区重新传递到通道，以在其中断的地方继续传输数据。如此重复，直到缓冲区的 <code>hasRemaining()</code> 方法返回false。</p>
<h1 id="五、工作模式"><a href="#五、工作模式" class="headerlink" title="五、工作模式"></a>五、工作模式</h1><p>通道可以工作在阻塞或非阻塞模式。非阻塞模式下，所请求的操作可以立即完成，也可以返回表示什么都没有完成的结果。</p>
<p>只有面向流的信道，例如套接字和管道，可以被置于非阻塞模式。</p>
<p><code>FileChannel</code> 总是阻塞的，因此不能被设置成非阻塞模式</p>
<h1 id="六、-关闭通道"><a href="#六、-关闭通道" class="headerlink" title="六、 关闭通道"></a>六、 关闭通道</h1><p>想要关闭通道，需要使用 <code>close()</code> 方法。一个被关闭的通道不能再被使用。</p>
<p>可以对一个通道多次调用 <code>close()</code> 方法，对一个已关闭的通道调用 <code>close()</code> 方法时，什么都不做，直接返回。</p>
<p>可以使用 <code>isOpen()</code> 放来检查一个通道的打开状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-简介&quot;&gt;&lt;a href=&quot;#一、-简介&quot; class=&quot;headerlink&quot; title=&quot;一、 简介&quot;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;p&gt;通道是java.nio在buffer之后的第二个主要创新。通道提供与I/O服务的直接连接。通道是一种在字节缓冲区和通道另一端的实体（通常是文件或套接字）之间高效传输数据的介质。通常通道与操作系统文件描述符具有一对一的关系。通道类提供了支持平台无关性所需的抽象，但仍然具有对现代操作系统的本机I/O建模的能力。通道是网关，通过它可以以最小的开销访问操作系统的本地I/O服务。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://tunsuy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tunsuy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>自编译mongo3.2测试</title>
    <link href="https://tunsuy.github.io/2016/12/09/%E8%87%AA%E7%BC%96%E8%AF%91mongo3-2%E6%B5%8B%E8%AF%95/"/>
    <id>https://tunsuy.github.io/2016/12/09/自编译mongo3-2测试/</id>
    <published>2016-12-09T02:13:44.000Z</published>
    <updated>2017-03-14T05:14:10.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>公司将mongodb删除机制进行了自定义，改动了相关源码，故需要配合测试mongodb的功能是否正常</p>
<h1 id="二、-检查服务器"><a href="#二、-检查服务器" class="headerlink" title="二、 检查服务器"></a>二、 检查服务器</h1><h2 id="1、-检查mongo启动情况"><a href="#1、-检查mongo启动情况" class="headerlink" title="1、 检查mongo启动情况"></a>1、 检查mongo启动情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netstat -anpt | grep mong* | grep <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></div><div class="line">mongoa --port <span class="number">27020</span>（相应的端口）——进入mongo</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2、-集群数据库情况"><a href="#2、-集群数据库情况" class="headerlink" title="2、 集群数据库情况"></a>2、 集群数据库情况</h2><p><code>cat /etc/hosts | grep db</code><br>——3个数据库分片（sh0，sh1，sh2）<br>——2个统计分片（statis-sh0，statis-sh1）</p>
<p>也可以这样查看：</p>
<ul>
<li>进入mongos（169.100下）</li>
<li>进入config数据库中<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.shards.find()</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三、-主备切换测试"><a href="#三、-主备切换测试" class="headerlink" title="三、 主备切换测试"></a>三、 主备切换测试</h1><h2 id="1、-shard0："><a href="#1、-shard0：" class="headerlink" title="1、 shard0："></a>1、 shard0：</h2><ul>
<li>随便进入一个sh0节点服务器<br>通过/etc/hosts可以查看到（169.100下）</li>
<li>查看sh0集群情况： <code>rs.status()</code><br>找到sh0主节点服务器，并进入, 执行<code>rs.stepDown()</code>——切换主备</li>
<li>检查主备切换是否成功<code>rs.status()</code>——集群情况</li>
</ul>
<h2 id="2、-依次对shard1、shard2集群进行主备切换"><a href="#2、-依次对shard1、shard2集群进行主备切换" class="headerlink" title="2、 依次对shard1、shard2集群进行主备切换"></a>2、 依次对shard1、shard2集群进行主备切换</h2><p>也可以关注下主备切换的日志情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find / -name mongo*.log（找到各mongo进程log）</div></pre></td></tr></table></figure></p>
<h2 id="四、-chunk迁移测试"><a href="#四、-chunk迁移测试" class="headerlink" title="四、 chunk迁移测试"></a>四、 chunk迁移测试</h2><p>（以迁移customer.info表为例）</p>
<h2 id="1、-查看迁移之前的chunk情况"><a href="#1、-查看迁移之前的chunk情况" class="headerlink" title="1、 查看迁移之前的chunk情况"></a>1、 查看迁移之前的chunk情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">use config</div><div class="line">db.chunks.find(&#123;<span class="string">"_id"</span>:<span class="regexp">/customer.info-did_10000*/</span>, <span class="string">"ns"</span>:<span class="string">"customer.info"</span>&#125;).pretty()</div><div class="line">&#123;</div><div class="line">    <span class="string">"_id"</span> : <span class="string">"customer.info-did_10000custmid_100"</span>,</div><div class="line">    <span class="string">"lastmod"</span> : Timestamp(<span class="number">135</span>, <span class="number">0</span>),</div><div class="line">    <span class="string">"lastmodEpoch"</span> : ObjectId(<span class="string">"54ae3eaaf3a2f2e7d3726927"</span>),</div><div class="line">    <span class="string">"ns"</span> : <span class="string">"customer.info"</span>,</div><div class="line">    <span class="string">"min"</span> : &#123;</div><div class="line">        <span class="string">"did"</span> : NumberLong(<span class="number">10000</span>),</div><div class="line">        <span class="string">"custmid"</span> : NumberLong(<span class="number">100</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"max"</span> : &#123;</div><div class="line">        <span class="string">"did"</span> : NumberLong(<span class="number">10000</span>),</div><div class="line">        <span class="string">"custmid"</span> : NumberLong(<span class="number">1948</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"shard"</span> : <span class="string">"shard0"</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="string">"_id"</span> : <span class="string">"customer.info-did_10000custmid_1948"</span>,</div><div class="line">    <span class="string">"lastmod"</span> : Timestamp(<span class="number">136</span>, <span class="number">0</span>),</div><div class="line">    <span class="string">"lastmodEpoch"</span> : ObjectId(<span class="string">"54ae3eaaf3a2f2e7d3726927"</span>),</div><div class="line">    <span class="string">"ns"</span> : <span class="string">"customer.info"</span>,</div><div class="line">    <span class="string">"min"</span> : &#123;</div><div class="line">        <span class="string">"did"</span> : NumberLong(<span class="number">10000</span>),</div><div class="line">        <span class="string">"custmid"</span> : NumberLong(<span class="number">1948</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"max"</span> : &#123;</div><div class="line">        <span class="string">"did"</span> : NumberLong(<span class="number">10039</span>),</div><div class="line">        <span class="string">"custmid"</span> : NumberLong(<span class="number">451</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"shard"</span> : <span class="string">"shard2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、-执行迁移命令"><a href="#2、-执行迁移命令" class="headerlink" title="2、 执行迁移命令"></a>2、 执行迁移命令</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    sh.moveChunk("customer.info", &#123;did:10000,custmid:100&#125;, "shard1")</div><div class="line">#或者</div><div class="line">    db.adminCommand(&#123;moveChunk:"customer.info", find:&#123;did:10000,custmid:100&#125;, to:"shard1"&#125;)</div></pre></td></tr></table></figure>
<p>PS：一般执行命令都有这两种方式</p>
<ul>
<li>sh. 方式可以不用切换数据库执行</li>
<li>db. 方式必须在admin数据库下<br>PS：迁移条件必须包含片键</li>
</ul>
<h2 id="3、-查看迁移情况"><a href="#3、-查看迁移情况" class="headerlink" title="3、 查看迁移情况"></a>3、 查看迁移情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use config</div><div class="line">db.chunks.find(&#123;<span class="string">"_id"</span>:<span class="regexp">/customer.info-did_10000*/</span>, <span class="string">"ns"</span>:<span class="string">"customer.info"</span>&#125;).pretty()</div></pre></td></tr></table></figure>
<p>也可以关注下主备切换的日志情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find / -name mongo*.log（找到各mongo进程log）</div></pre></td></tr></table></figure></p>
<h1 id="五、-chunk分裂"><a href="#五、-chunk分裂" class="headerlink" title="五、 chunk分裂"></a>五、 chunk分裂</h1><h2 id="1、-查看chunk分裂前情况"><a href="#1、-查看chunk分裂前情况" class="headerlink" title="1、 查看chunk分裂前情况"></a>1、 查看chunk分裂前情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use config</div><div class="line">db.chunks.find(&#123;<span class="string">"_id"</span>:<span class="regexp">/customer.info-did_10000*/</span>, <span class="string">"ns"</span>:<span class="string">"customer.info"</span>&#125;).pretty()</div></pre></td></tr></table></figure>
<h2 id="2、-指定分裂点"><a href="#2、-指定分裂点" class="headerlink" title="2、 指定分裂点"></a>2、 指定分裂点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh.splitAt(<span class="string">"customer.info"</span>, &#123;<span class="string">"did"</span>:<span class="number">10000</span>, <span class="string">"custmid"</span>:<span class="number">500</span>&#125;)</div></pre></td></tr></table></figure>
<h2 id="3、-检查分裂情况"><a href="#3、-检查分裂情况" class="headerlink" title="3、 检查分裂情况"></a>3、 检查分裂情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.chunks.find(&#123;<span class="string">"_id"</span>:<span class="regexp">/customer.info-did_10000*/</span>, <span class="string">"ns"</span>:<span class="string">"customer.info"</span>&#125;).pretty()</div></pre></td></tr></table></figure>
<h1 id="六、-其他"><a href="#六、-其他" class="headerlink" title="六、 其他"></a>六、 其他</h1><h2 id="1、-重启moa服务"><a href="#1、-重启moa服务" class="headerlink" title="1、 重启moa服务"></a>1、 重启moa服务</h2><p>PS：因为有的服务可能有缓存，所有在操作了数据库之后需要重启服务才能重新读取数据库数据</p>
<h2 id="2、-检查各模块功能情况"><a href="#2、-检查各模块功能情况" class="headerlink" title="2、 检查各模块功能情况"></a>2、 检查各模块功能情况</h2><p>PS：因为涉及到php、go、c的mongo库，所以需要覆盖以下测试</p>
<ul>
<li>web端、PC端、运营、统计</li>
<li>主要关注点<br>——涉及数据库读写操作的功能<br>——大量读写操作情况<br>——导入导出情况<br>——私有云服务器接入情况<br>——数据删除情况<br>——数据恢复情况</li>
</ul>
<h2 id="3、-检查服务器资源情况"><a href="#3、-检查服务器资源情况" class="headerlink" title="3、 检查服务器资源情况"></a>3、 检查服务器资源情况</h2><p>PS：可以写一个小的脚本（超过一定的阈值则输出到log里面），然后一直在后台运行，然后操作业务<br>最后测试完之后，检查log文件中的资源记录情况</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-简介&quot;&gt;&lt;a href=&quot;#一、-简介&quot; class=&quot;headerlink&quot; title=&quot;一、 简介&quot;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;p&gt;公司将mongodb删除机制进行了自定义，改动了相关源码，故需要配合测试mongodb的功能是否正常&lt;/p&gt;
&lt;h1 id=&quot;二、-检查服务器&quot;&gt;&lt;a href=&quot;#二、-检查服务器&quot; class=&quot;headerlink&quot; title=&quot;二、 检查服务器&quot;&gt;&lt;/a&gt;二、 检查服务器&lt;/h1&gt;&lt;h2 id=&quot;1、-检查mongo启动情况&quot;&gt;&lt;a href=&quot;#1、-检查mongo启动情况&quot; class=&quot;headerlink&quot; title=&quot;1、 检查mongo启动情况&quot;&gt;&lt;/a&gt;1、 检查mongo启动情况&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;netstat -anpt | grep mong* | grep &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mongoa --port &lt;span class=&quot;number&quot;&gt;27020&lt;/span&gt;（相应的端口）——进入mongo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/categories/mongodb/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>App三方交互逻辑实践</title>
    <link href="https://tunsuy.github.io/2016/11/16/App%E4%B8%89%E6%96%B9%E4%BA%A4%E4%BA%92%E9%80%BB%E8%BE%91%E5%AE%9E%E8%B7%B5/"/>
    <id>https://tunsuy.github.io/2016/11/16/App三方交互逻辑实践/</id>
    <published>2016-11-16T07:28:06.000Z</published>
    <updated>2017-03-14T05:14:09.342Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<br><a href="https://github.com/tunsuy/AppInteractive" target="_blank" rel="external">https://github.com/tunsuy/AppInteractive</a></p>
<h1 id="一、-背景介绍"><a href="#一、-背景介绍" class="headerlink" title="一、 背景介绍"></a>一、 背景介绍</h1><p>之前有一个公司项目与第三方应用交互的逻辑需要全面测试，那么怎样才能测试到整个交互的所有环节呢</p>
<p>那就是需要一个实际的第三方，并且这个第三方需要包括server端和app端</p>
<a id="more"></a>
<p>既然是测试，那么我们只需要将公司项目跟三方有交互的接口做个全面的测试即可，不在乎这个三方是怎样的形式</p>
<p>那么这就好办了，自己实现一个这个的三方项目</p>
<h1 id="二、-交互逻辑图"><a href="#二、-交互逻辑图" class="headerlink" title="二、 交互逻辑图"></a>二、 交互逻辑图</h1><p>1、口袋助理跳转第三方app逻辑示意图：</p>
<img src="/2016/11/16/App三方交互逻辑实践/moa2app.jpg" alt="moa2app.jpg" title="">
<p>2、第三方跳转口袋助理逻辑示意图：</p>
<img src="/2016/11/16/App三方交互逻辑实践/app2moa.jpg" alt="app2moa.jpg" title="">
<h1 id="三、-实现"><a href="#三、-实现" class="headerlink" title="三、 实现"></a>三、 实现</h1><p>server端：go语言实现<br>app端：iOS</p>
<p>具体实现见github项目地址</p>
<p>根据相关协议从代码层面详细的测试每个交互接口：</p>
<ul>
<li>兼容性</li>
<li>容错性</li>
<li>健壮性</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;br&gt;&lt;a href=&quot;https://github.com/tunsuy/AppInteractive&quot;&gt;https://github.com/tunsuy/AppInteractive&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、-背景介绍&quot;&gt;&lt;a href=&quot;#一、-背景介绍&quot; class=&quot;headerlink&quot; title=&quot;一、 背景介绍&quot;&gt;&lt;/a&gt;一、 背景介绍&lt;/h1&gt;&lt;p&gt;之前有一个公司项目与第三方应用交互的逻辑需要全面测试，那么怎样才能测试到整个交互的所有环节呢&lt;/p&gt;
&lt;p&gt;那就是需要一个实际的第三方，并且这个第三方需要包括server端和app端&lt;/p&gt;
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="go" scheme="https://tunsuy.github.io/tags/go/"/>
    
      <category term="服务端" scheme="https://tunsuy.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mongodb集群3.0.X升级3.2.X</title>
    <link href="https://tunsuy.github.io/2016/10/15/mongodb%E9%9B%86%E7%BE%A43-0-X%E5%8D%87%E7%BA%A73-2-X/"/>
    <id>https://tunsuy.github.io/2016/10/15/mongodb集群3-0-X升级3-2-X/</id>
    <published>2016-10-15T02:07:58.000Z</published>
    <updated>2017-03-14T05:14:10.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>该文章主要根据官方英文文档来操作的</p>
<p>官方文档：<a href="https://docs.mongodb.com/manual/release-notes/3.2-upgrade/" target="_blank" rel="external">https://docs.mongodb.com/manual/release-notes/3.2-upgrade/</a></p>
<h1 id="二、-升级准备工作"><a href="#二、-升级准备工作" class="headerlink" title="二、 升级准备工作"></a>二、 升级准备工作</h1><p>1、下载二进制文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https:<span class="comment">//www.mongodb.com/dr/fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.2.10.tgz</span></div></pre></td></tr></table></figure></p>
<p>2、将该文件放入所有的节点服务器下并解压<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf XXXX</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>3、备份configdb（可选）<br>在每个configdb服务器执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -r /home/moa/db/configdb/data/ <span class="regexp">/home/m</span>oa/db/configdb/data_bak/</div></pre></td></tr></table></figure></p>
<p>4、关闭均衡器</p>
<ul>
<li>查看均衡器状态: <code>sh.getBalancerState()</code></li>
<li>关闭: <code>sh.stopBalancer()</code></li>
<li>检查数据没有在迁移<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use config</div><div class="line"><span class="keyword">while</span>( sh.isBalancerRunning() ) &#123;</div><div class="line">    print(<span class="string">"waiting..."</span>);</div><div class="line">    sleep(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三、-开始升级"><a href="#三、-开始升级" class="headerlink" title="三、 开始升级"></a>三、 开始升级</h1><h2 id="1、-首先升级分片0"><a href="#1、-首先升级分片0" class="headerlink" title="1、 首先升级分片0"></a>1、 首先升级分片0</h2><p>1.1 升级分片0集群中的secondary节点</p>
<ul>
<li>停掉该mongod0进程—kill pid</li>
<li><p>使用最新mongodb进程替换掉mongod0  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#备份：</div><div class="line">mv /usr/local/mongodb/bin/mongod0 /usr/local/mongodb/bin/mongod0.bak  </div><div class="line"></div><div class="line">#替换：</div><div class="line">cp /home/mongodb-linux-x86_64-rhel62-3.2.10/bin/mongod /usr/local/mongodb/bin/mongod0</div></pre></td></tr></table></figure>
</li>
<li><p>启动该mongod0进程—<code>/etc/init.d/mongod0 restart</code></p>
</li>
</ul>
<p>按照1.1方法依次升级其他的secondary节点<br>ps：在确认上一个secondary状态正常的情况再进行: <code>rs.status()</code></p>
<p>1.2 升级分片0集群中的primary节点</p>
<ul>
<li>停掉primary—<code>rs.stepDown()</code></li>
<li>检查是否产生了新的primary—<code>rs.status()</code><br>ps：在其他两个节点查看</li>
<li>按照1的方法升级其他分片</li>
</ul>
<p>1.3 更新选举协议<br>在primary节点执行以下操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cfg=rs.conf();</div><div class="line">cfg.protocolVersion=<span class="number">1</span>;</div><div class="line">rs.reconfig(cfg);</div></pre></td></tr></table></figure></p>
<h2 id="2、-升级分片1"><a href="#2、-升级分片1" class="headerlink" title="2、 升级分片1"></a>2、 升级分片1</h2><p>按照1中的方法进行</p>
<h2 id="3、-升级config-服务器"><a href="#3、-升级config-服务器" class="headerlink" title="3、 升级config 服务器"></a>3、 升级config 服务器</h2><ul>
<li>顺序：需要按照mongos中配置的逆序升级<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /home/moa/db/mongos/mongos.conf</div><div class="line">——configdb=config0.moadb.com,config1.moadb.com,config2.moadb.com</div></pre></td></tr></table></figure>
</li>
</ul>
<p>所以升级顺序应该是：config2、config1、config0</p>
<ul>
<li>升级：按照1中方法进行（只是这里变成了mongocfgd）</li>
</ul>
<h2 id="4、-升级mognos服务器"><a href="#4、-升级mognos服务器" class="headerlink" title="4、 升级mognos服务器"></a>4、 升级mognos服务器</h2><p>按照1中方法进行（只是这样换成了mongos）</p>
<h2 id="5、-替换掉所以的mongo工具（可选）"><a href="#5、-替换掉所以的mongo工具（可选）" class="headerlink" title="5、 替换掉所以的mongo工具（可选）"></a>5、 替换掉所以的mongo工具（可选）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ./mongodb-linux-x86_64-rhel62<span class="number">-3.2</span><span class="number">.10</span>/bin<span class="comment">/* /usr/local/mongodb/bin/</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-简介&quot;&gt;&lt;a href=&quot;#一、-简介&quot; class=&quot;headerlink&quot; title=&quot;一、 简介&quot;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;p&gt;该文章主要根据官方英文文档来操作的&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.mongodb.com/manual/release-notes/3.2-upgrade/&quot;&gt;https://docs.mongodb.com/manual/release-notes/3.2-upgrade/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;二、-升级准备工作&quot;&gt;&lt;a href=&quot;#二、-升级准备工作&quot; class=&quot;headerlink&quot; title=&quot;二、 升级准备工作&quot;&gt;&lt;/a&gt;二、 升级准备工作&lt;/h1&gt;&lt;p&gt;1、下载二进制文件&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https:&lt;span class=&quot;comment&quot;&gt;//www.mongodb.com/dr/fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.2.10.tgz&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、将该文件放入所有的节点服务器下并解压&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar -zxvf XXXX&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/categories/mongodb/"/>
    
    
      <category term="linux" scheme="https://tunsuy.github.io/tags/linux/"/>
    
      <category term="mongodb" scheme="https://tunsuy.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java中的线程安全和集合</title>
    <link href="https://tunsuy.github.io/2016/10/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>https://tunsuy.github.io/2016/10/09/深入理解Java中的线程安全和集合/</id>
    <published>2016-10-09T11:20:00.000Z</published>
    <updated>2017-03-14T10:09:22.742Z</updated>
    
    <content type="html"><![CDATA[<p>翻译于<a href="http://www.codejava.net/java-core/collections/understanding-collections-and-thread-safety-in-java" target="_blank" rel="external">http://www.codejava.net/java-core/collections/understanding-collections-and-thread-safety-in-java</a></p>
<p>注：不是原文翻译，有些自己的理解改动</p>
<h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>为什么大部分的collection类都是线程不安全的呢？<br>正如你知道的，大部分的collection类如：<code>ArrayList、LinkedList、HashMap、HashSet、TreeMap、TreeSet</code> 等等都是线程不安全的。事实上，在 <code>java.util</code> 包中的所有collection类（除了 <code>Vector</code> 和 <code>HashTable</code> ）都是线程不安全的。为什么呢？</p>
<p>原因：同步的代价是很大的。</p>
<a id="more"></a>
<p><code>Vector</code> 和<code>HashTable</code> 是java早期就存在的两个集合，他们一开始就被设计为线程安全的（如果你看源码，你会发现他们的所有方法都是 <code>synchronized</code> 的）。然而，很快在多线程程序中它们就被暴露出性能是很低下的，因为同步是需要加锁的，这很耗性能。</p>
<p>这也是为什么在后来新的collections( <code>List、Set、Map</code> 等)都提供了在单线程应用中非并发性的控制来获得最大的性能。</p>
<p>下面的程序比较了 <code>Vector</code> 和 <code>ArrayList</code> 的性能（ <code>Vector</code> 是线程安全的，而 <code>ArrayList</code> 不是）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This test program compares performance of Vector versus ArrayList</div><div class="line"> * <span class="doctag">@author</span> www.codejava.net</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsThreadSafeTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10_000_000</span>; i++) &#123;</div><div class="line">            vector.addElement(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">long</span> totalTime = endTime - startTime;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Test Vector: "</span> + totalTime + <span class="string">" ms"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10_000_000</span>; i++) &#123;</div><div class="line">            list.add(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">long</span> totalTime = endTime - startTime;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Test ArrayList: "</span> + totalTime + <span class="string">" ms"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CollectionsThreadSafeTest tester = <span class="keyword">new</span> CollectionsThreadSafeTest();</div><div class="line"></div><div class="line">        tester.testVector();</div><div class="line"></div><div class="line">        tester.testArrayList();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该程序测试了分别给这两种类型增加1000000个元素所耗费的时间，结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test Vector: <span class="number">9266</span> ms</div><div class="line">Test ArrayList: <span class="number">4588</span> ms</div></pre></td></tr></table></figure></p>
<p>说明在大数据量下，ArrayList的性能比Vector的好两倍以上。</p>
<h1 id="二、-快速失败"><a href="#二、-快速失败" class="headerlink" title="二、 快速失败"></a>二、 快速失败</h1><p>快速失败又叫做”<code>Fail-Fast</code>“策略。当使用集合时，你需要理解它们的迭代器的并发策略：<code>Fail-Fast Iterators</code></p>
<p>看下面的代码片段：Strings列表的迭代<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; listNames = Arrays.asList(<span class="string">"Tom"</span>, <span class="string">"Joe"</span>, <span class="string">"Bill"</span>, <span class="string">"Dave"</span>, <span class="string">"John"</span>);</div><div class="line"></div><div class="line">Iterator&lt;String&gt; iterator = listNames.iterator();</div><div class="line"></div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String nextName = iterator.next();</div><div class="line">    System.out.println(nextName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们使用了集合的迭代器来遍历集合元素。加入listNames是被两个线程所共享：正在迭代遍历的目前的线程和另外一个线程。当第一个线程正在迭代遍历的时候，第二个线程也在修改这个集合（增加或者减少元素）。那么结果会怎样呢？</p>
<p>第一个线程将抛出这个异常 <code>ConcurrentModificationException</code>并立刻失败。所以这就叫做 <code>fail-fast iterators</code>。</p>
<p>迭代器为什么会这么快的失败呢？这是因为当遍历一个正在修改的集合时是非常危险的：这个迭代器被生成之后，这个集合可能有更多、更少或者没有元素，以至于导致无法预期或者不一致的结果。这应该要尽可能早的避免，因此这个迭代器必现抛出一个异常来结束目前线程的执行。</p>
<p>下面的例子模拟了抛出 <code>ConcurrentModificationException</code> 异常的情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This test program illustrates how a collection's iterator fails fast</div><div class="line"> * and throw ConcurrentModificationException</div><div class="line"> * <span class="doctag">@author</span> www.codejava.net</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorFailFastTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IteratorFailFastTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10_000</span>; i++) &#123;</div><div class="line">            list.add(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runUpdateThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10_000</span>; i &lt; <span class="number">20_000</span>; i++) &#123;</div><div class="line">                    list.add(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        thread1.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runIteratorThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                ListIterator&lt;Integer&gt; iterator = list.listIterator();</div><div class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">                    Integer number = iterator.next();</div><div class="line">                    System.out.println(number);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        IteratorFailFastTest tester = <span class="keyword">new</span> IteratorFailFastTest();</div><div class="line"></div><div class="line">        tester.runIteratorThread();</div><div class="line">        tester.runUpdateThread();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码中，这个 <code>thread1</code> 正在迭代遍历 <code>list</code>，而 <code>thread2</code> 也在继续增加元素到这个集合，这就导致了 <code>ConcurrentModificationException</code> 抛出。</p>
<p>注意：迭代器的 <code>fail-fast</code> 行为只是用来帮助更容易的找到或者诊断bug，我们不应该在程序中依赖并操作这个 <code>ConcurrentModificationException</code> 因为 <code>fail-fast</code> 不被保障的。这就是说当这个异常抛出后，我们的程序应该立即停止运行。</p>
<h1 id="三、-同步装饰器"><a href="#三、-同步装饰器" class="headerlink" title="三、 同步装饰器"></a>三、 同步装饰器</h1><h2 id="1、-简介"><a href="#1、-简介" class="headerlink" title="1、 简介"></a>1、 简介</h2><p>目前我们已经知道了这些基本的集合类的实现都是线程不安全的，是为了最大的提高在单线程程序中的性能。那么如果我们要用在多线程应用中呢？</p>
<p>当然我们不应该在并发的上下文中使用线程不安全的集合类，因为这将导致无法预期和不一致的结果。我们可以通过同步代码块来手动的控制我们的代码。然而使用线程安全的集合类总是比我们手动写同步代码块是更好的。</p>
<p>可能你已经知道的，Java的 <code>Collections</code> 库给我们提供了创建线程安全的集合的工厂方法。这些方法就是来自下面的形式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collections.synchronizedXXX(collection)</div></pre></td></tr></table></figure></p>
<p>这些工厂方法装饰指定的集合，然后返回线程安全的实现。这里的 <code>XXX</code> 可以是 <code>Collection, List, Map, Set, SortedMap</code> 和 <code>SortedSet</code>。下面就是一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; safeList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div></pre></td></tr></table></figure></p>
<p>如果我们已经有一个存在的线程不安全的集合对象，我们也可以使用这个来装饰它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Map&lt;Integer, String&gt; unsafeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">Map&lt;Integer, String&gt; safeMap = Collections.synchronizedMap(unsafeMap);</div></pre></td></tr></table></figure></p>
<p>这些工厂方法都是以一个相同的接口实现了对指定的集合的线程安全实现的装饰，所以叫做 <code>&#39;synchronized wrappers&#39;</code>。实际上，就是这些线程不安全的集合将所有的工作都委托给了这个装饰器集合来处理。</p>
<h2 id="2、-注意"><a href="#2、-注意" class="headerlink" title="2、 注意"></a>2、 注意</h2><p>当使用一个同步集合的迭代器的时候，我们需要使用同步块来保证迭代器的安全，因为这个迭代器不是线程安全的。看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; safeList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line"></div><div class="line"><span class="comment">// adds some elements to the list</span></div><div class="line"></div><div class="line">Iterator&lt;String&gt; iterator = safeList.iterator();</div><div class="line"></div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String next = iterator.next();</div><div class="line">    System.out.println(next);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然 <code>safeList</code> 是线程安全的，但是他的迭代器不是，因此我们需要手动增加同步块：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span> (safeList) &#123;</div><div class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">        String next = iterator.next();</div><div class="line">        System.out.println(next);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样的需要注意：同步集合的迭代器也是 <code>fail-fast</code> 的。</p>
<p>虽然同步装饰器可以安全的用在多线程应用中，但是有一些缺点需要说明，在下面将介绍</p>
<h1 id="四、-并发集合"><a href="#四、-并发集合" class="headerlink" title="四、 并发集合"></a>四、 并发集合</h1><h2 id="1、-简介-1"><a href="#1、-简介-1" class="headerlink" title="1、 简介"></a>1、 简介</h2><p>同步集合的一个缺点就是它们的同步机制是使用的它们自己作为锁对象。这就意味着一个线程正在遍历这个集合的时候，在这个集合其他方法块的其他线程就得等待，这就导致程序性能下降。</p>
<p>这就是为什么说Java5及以上介绍说 <code>concurrent collections</code>(并发集合)的性能比同步装饰器好。并发集合是在 <code>java.util.concurrent</code> 包中。它们根据它们的线程机制被分为了三个组。</p>
<h2 id="2、-copy-on-write-collections"><a href="#2、-copy-on-write-collections" class="headerlink" title="2、 copy-on-write collections"></a>2、 copy-on-write collections</h2><p>第一个组叫 <code>copy-on-write collections</code> ：这种线程安全的集合是在不可变的数组中存储值的；这个集合的值的任何改变，结果都是返回一个新的数组用来反射到新的值；  这种集合适合于读操作远远多于写操作的情况；有两种实现：<code>CopyOnWriteArrayList</code> 和 <code>CopyOnWriteArraySet</code>。</p>
<p>注意：这种集合有一个 <code>iterators</code> 快照，不会抛出 <code>ConcurrentModificationException</code> 异常。因为这种集合是基于不可变数组的，所以一个线程能够读取集合中的数据而不用担心其他线程改变了它们。</p>
<h2 id="3、-CAS-collections"><a href="#3、-CAS-collections" class="headerlink" title="3、 CAS collections"></a>3、 CAS collections</h2><p>第二组叫 <code>Compare-And-Swap or CAS collections</code>：这组集合是基于 <code>Compare-And-Swap (CAS)</code> 算法实现的线程安全。CAS算法是这样的：</p>
<p>为了执行计算或者更新变量的值，它对变量在本地做了一份复制，计算的时候使用的是这个本地的值。当它想要更新这个变量的值时，它会用本地的值跟这个变量进行对比，如果它们是相同的，则用新的值更新这个变量。</p>
<p>如果它们是不相同的，那么说明这个变量被其他线程改变了，这种情况下，<code>CAS</code> 线程会尝试使用这个新值进行计算，或者放弃，或者继续。<code>CAS</code> 包括 <code>ConcurrentLinkedQueue</code> 和  <code>ConcurrentSkipListMap</code>。</p>
<p>注意：<code>CAS</code> 集合的迭代器是弱一致性的。就是指它可能只会反射这个集合中的一些而不是所有的变化。弱一致性不会抛出 <code>ConcurrentModificationException</code>。</p>
<h2 id="4、-special-lock-object"><a href="#4、-special-lock-object" class="headerlink" title="4、 special lock object"></a>4、 special lock object</h2><p>第三组叫 <code>concurrent collections using a special lock object (java.util.concurrent.lock.Lock)</code>：<br>这个机制是比经典的同步机制更加的灵活。</p>
<p>这个锁跟经典的同步有相同的行为，但是一个线程在以下几种情况也能够获取它：锁目前不被持有，超时或者线程没有被中断。</p>
<p>不同于同步代码，一个锁对象在代码块或者方法被执行的时候就被持有。而这个 <code>lock</code> 是在 <code>unlock()</code> 方法被调用时才持有。这个机制很有用的一些实现就是将集合分成部分，从而可以分别持有。为了提高并发，比如 <code>LinkedBlockingQueue</code> ，这个队列的头和尾被分开 <code>lock</code>，因此这个元素能够并行的增减。</p>
<p>一些集合使用包含 <code>ConcurrentHashMap</code> 的锁和 <code>BlockingQueue</code> 的大部分实现。</p>
<p>这个组中的集合也是弱一致性的迭代器，不会抛出 <code>ConcurrentModificationException</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译于&lt;a href=&quot;http://www.codejava.net/java-core/collections/understanding-collections-and-thread-safety-in-java&quot;&gt;http://www.codejava.net/java-core/collections/understanding-collections-and-thread-safety-in-java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：不是原文翻译，有些自己的理解改动&lt;/p&gt;
&lt;h1 id=&quot;一、-简介&quot;&gt;&lt;a href=&quot;#一、-简介&quot; class=&quot;headerlink&quot; title=&quot;一、 简介&quot;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;p&gt;为什么大部分的collection类都是线程不安全的呢？&lt;br&gt;正如你知道的，大部分的collection类如：&lt;code&gt;ArrayList、LinkedList、HashMap、HashSet、TreeMap、TreeSet&lt;/code&gt; 等等都是线程不安全的。事实上，在 &lt;code&gt;java.util&lt;/code&gt; 包中的所有collection类（除了 &lt;code&gt;Vector&lt;/code&gt; 和 &lt;code&gt;HashTable&lt;/code&gt; ）都是线程不安全的。为什么呢？&lt;/p&gt;
&lt;p&gt;原因：同步的代价是很大的。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://tunsuy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tunsuy.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redmine-数据统计</title>
    <link href="https://tunsuy.github.io/2016/10/08/redmine-%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/"/>
    <id>https://tunsuy.github.io/2016/10/08/redmine-数据统计/</id>
    <published>2016-10-08T12:11:06.000Z</published>
    <updated>2017-03-31T09:58:35.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-项目说明"><a href="#一、-项目说明" class="headerlink" title="一、 项目说明"></a>一、 项目说明</h1><p>语言：python语言</p>
<p>1、项目地址：<br><a href="https://github.com/tunsuy/redmine_statis" target="_blank" rel="external">https://github.com/tunsuy/redmine_statis</a></p>
<p>2、统计维度：  </p>
<ul>
<li>个人迭代bug数</li>
<li>模块迭代bug数</li>
<li>个人网上问题数</li>
<li>个人迭代工作粒度</li>
<li>个人遗留问题数</li>
</ul>
<p>如果要加上其他维度的统计，也是非常简单的</p>
<a id="more"></a>
<h1 id="二、-redmine表说明"><a href="#二、-redmine表说明" class="headerlink" title="二、 redmine表说明"></a>二、 redmine表说明</h1><p>1、表issues<br>—用来存放issue的标准字段。</p>
<p>2、表custom_fields<br>—该表字段都和创建自定义字段的web页面看到的选择项很像。</p>
<p>3、表custom_values<br>—该表可以用custom_field_id字段和custom_fields表的id关联。 而customized_id 可以和issues表的id相关联</p>
<h1 id="三、-表关联"><a href="#三、-表关联" class="headerlink" title="三、 表关联"></a>三、 表关联</h1><p>1、三个表issues, custom_fields和custom_values在一起表达了这么个关系。</p>
<p>2、一个issue的标准字段来自issues表，扩展字段来自custom_fields表，而custom_values和前custom_fields表关联，一起表示一个issue的某个自定义字段的值。</p>
<p>3、当表示issue的自定义字段时，<code>custom_fields.type</code>的值是 ‘IssueCustomField’ 而<code>custom_values.customized_type</code>的值是’Issue’.</p>
<p>4、所有issue的自定义字段值<br>可以先将custom_fields表和custom_values表关联，获得如下结果：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> customized_id <span class="keyword">as</span> issue_id,custom_field_id,<span class="keyword">type</span>,<span class="keyword">name</span>,default_value,<span class="keyword">value</span> <span class="keyword">from</span> custom_fields a <span class="keyword">inner</span> <span class="keyword">join</span> custom_values b <span class="keyword">on</span> a.id =b.custom_field_id <span class="keyword">and</span> a.type = <span class="string">'IssueCustomField'</span> <span class="keyword">and</span> b.customized_type=<span class="string">'Issue'</span> <span class="keyword">limit</span> <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<p>由此可以看出redmine的设计是用记录行数来表示扩展字段的值，所以可以不受mysql表字段的限制。</p>
<h1 id="四、-访问权限"><a href="#四、-访问权限" class="headerlink" title="四、 访问权限"></a>四、 访问权限</h1><p>基本知识了解：<br>1、授予用户redmine_static 在指定ip下 以 密码 moatest 访问 bitnami_redmine 的 select和excute操作<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,excute <span class="keyword">on</span> bitnami_redmine.* <span class="keyword">to</span> <span class="string">'redmine_static'</span>@<span class="string">'200.200.169.162'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'moatest'</span></div></pre></td></tr></table></figure></p>
<p>2、查询mysql所有用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,<span class="keyword">password</span> <span class="keyword">from</span> mysql.user;</div></pre></td></tr></table></figure></p>
<p>3、刷新权限设置<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div></pre></td></tr></table></figure></p>
<p>4、查询 指定IP 下 用户redmine_static 的数据库权限<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> <span class="string">'redmine_static'</span>@<span class="string">'200.200.169.162'</span>\G</div></pre></td></tr></table></figure></p>
<p>5、取消用户的操作权限<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> bitnami_redmine.* <span class="keyword">from</span> <span class="string">'redmine_static'</span>@<span class="string">'200.200.169.162'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'moatest'</span>;</div></pre></td></tr></table></figure></p>
<p>6、授予所有操作权限<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> bitnami_redmine.* <span class="keyword">to</span> <span class="string">'redmine_static'</span>@<span class="string">'200.200.169.162'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'moatest'</span>;</div></pre></td></tr></table></figure></p>
<p>7、删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">user</span> redmine_static@<span class="string">'%'</span>;</div></pre></td></tr></table></figure></p>
<p>8、创建用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">user</span> redmine_static@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'moatest'</span>;</div></pre></td></tr></table></figure></p>
<h1 id="五、-redmine统计说明"><a href="#五、-redmine统计说明" class="headerlink" title="五、 redmine统计说明"></a>五、 redmine统计说明</h1><p>1、在redmine服务器中新增一个mysql用户：<br>——该用户只能在169.162中以用户名和密码的方式访问<br>——见如上2说明  </p>
<h1 id="六、-使用"><a href="#六、-使用" class="headerlink" title="六、 使用"></a>六、 使用</h1><p>1、切换python环境：<code>pyenv activate venv2710</code><br>2、切换到项目路径<br>3、执行：python main.py [统计开始时间 统计结束时间]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eg：python main.py <span class="number">2016</span><span class="number">-9</span><span class="number">-1</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-31</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-项目说明&quot;&gt;&lt;a href=&quot;#一、-项目说明&quot; class=&quot;headerlink&quot; title=&quot;一、 项目说明&quot;&gt;&lt;/a&gt;一、 项目说明&lt;/h1&gt;&lt;p&gt;语言：python语言&lt;/p&gt;
&lt;p&gt;1、项目地址：&lt;br&gt;&lt;a href=&quot;https://github.com/tunsuy/redmine_statis&quot;&gt;https://github.com/tunsuy/redmine_statis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、统计维度：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人迭代bug数&lt;/li&gt;
&lt;li&gt;模块迭代bug数&lt;/li&gt;
&lt;li&gt;个人网上问题数&lt;/li&gt;
&lt;li&gt;个人迭代工作粒度&lt;/li&gt;
&lt;li&gt;个人遗留问题数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要加上其他维度的统计，也是非常简单的&lt;/p&gt;
    
    </summary>
    
      <category term="redmine" scheme="https://tunsuy.github.io/categories/redmine/"/>
    
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
      <category term="redmine" scheme="https://tunsuy.github.io/tags/redmine/"/>
    
  </entry>
  
  <entry>
    <title>实现浏览器中实时查看iOS日志</title>
    <link href="https://tunsuy.github.io/2016/09/23/%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8BiOS%E6%97%A5%E5%BF%97/"/>
    <id>https://tunsuy.github.io/2016/09/23/实现浏览器中实时查看iOS日志/</id>
    <published>2016-09-23T07:32:34.000Z</published>
    <updated>2017-03-14T05:14:10.678Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<br><a href="https://github.com/tunsuy/TSiOSLogWebBrowser" target="_blank" rel="external">https://github.com/tunsuy/TSiOSLogWebBrowser</a></p>
<h1 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h1><p>在测试ios App过程中，有很多时候我们需要一边操作一遍查看输出日志</p>
<p>对于有mac机的来说，当然在xcode下自己打包测试查看日志那是非常方便的，但是大部分的测试是没有mac机的。</p>
<p>虽然开发也有将日志写入文件，但是每次操作完了再去打开文件查看，非常不方便</p>
<p>那有没有一种类似xcode输出日志的方式呢<br>答案就是今天要说的这个： 直接用浏览器实时查看输出的log信息</p>
<h1 id="二、-原理"><a href="#二、-原理" class="headerlink" title="二、 原理"></a>二、 原理</h1><p>就是在app里面内置一个http server服务器，浏览器作为请求客户端，将app的操作日志实时的输出到浏览器中。</p>
<a id="more"></a>
<h1 id="三、-实现"><a href="#三、-实现" class="headerlink" title="三、 实现"></a>三、 实现</h1><p>使用了一个开源框架 GCDWebServer 作为http server<br>具体实现见github项目地址</p>
<h1 id="四、-使用"><a href="#四、-使用" class="headerlink" title="四、 使用"></a>四、 使用</h1><p>1、将手机置于电脑的同一网络，  </p>
<p>2、然后在浏览器上输入 手机IP：port（端口是在代码中任意指定的），<br>然后就可以开始测试app了，你将会看到浏览器中会实时显示你的操作日志出来，跟xcode下查看日志的方式一样，</p>
<p>注：浏览器页面支持 跟随日志自动滚动 ；非常方便</p>
<h1 id="五、-效果图"><a href="#五、-效果图" class="headerlink" title="五、 效果图"></a>五、 效果图</h1><img src="/2016/09/23/实现浏览器中实时查看iOS日志/ioslog.jpg" alt="ioslog.jpg" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;br&gt;&lt;a href=&quot;https://github.com/tunsuy/TSiOSLogWebBrowser&quot;&gt;https://github.com/tunsuy/TSiOSLogWebBrowser&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、-背景&quot;&gt;&lt;a href=&quot;#一、-背景&quot; class=&quot;headerlink&quot; title=&quot;一、 背景&quot;&gt;&lt;/a&gt;一、 背景&lt;/h1&gt;&lt;p&gt;在测试ios App过程中，有很多时候我们需要一边操作一遍查看输出日志&lt;/p&gt;
&lt;p&gt;对于有mac机的来说，当然在xcode下自己打包测试查看日志那是非常方便的，但是大部分的测试是没有mac机的。&lt;/p&gt;
&lt;p&gt;虽然开发也有将日志写入文件，但是每次操作完了再去打开文件查看，非常不方便&lt;/p&gt;
&lt;p&gt;那有没有一种类似xcode输出日志的方式呢&lt;br&gt;答案就是今天要说的这个： 直接用浏览器实时查看输出的log信息&lt;/p&gt;
&lt;h1 id=&quot;二、-原理&quot;&gt;&lt;a href=&quot;#二、-原理&quot; class=&quot;headerlink&quot; title=&quot;二、 原理&quot;&gt;&lt;/a&gt;二、 原理&lt;/h1&gt;&lt;p&gt;就是在app里面内置一个http server服务器，浏览器作为请求客户端，将app的操作日志实时的输出到浏览器中。&lt;/p&gt;
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="https" scheme="https://tunsuy.github.io/tags/https/"/>
    
      <category term="web" scheme="https://tunsuy.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>谈谈在线支付的安全性问题</title>
    <link href="https://tunsuy.github.io/2016/09/20/%E8%B0%88%E8%B0%88%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://tunsuy.github.io/2016/09/20/谈谈在线支付的安全性问题/</id>
    <published>2016-09-20T03:02:43.000Z</published>
    <updated>2017-04-12T03:14:13.350Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是简单的谈谈在线支付的一些安全性漏洞，以及一些编码建议，最后附件是web安全的一些CheckList检查项。</p>
<h1 id="一、-常见漏洞"><a href="#一、-常见漏洞" class="headerlink" title="一、 常见漏洞"></a>一、 常见漏洞</h1><p>1、支付过程中可直接修改数据包中的支付金额<br>这种漏洞是支付漏洞中最常见的。 开发人员为了方便，直接在支付的关键步骤数据包中直接传递需要支付的金额。 而这种金额后端没有做校验，传递过程中也没有做签名，导致可以随意篡改金额提交。</p>
<a id="more"></a>
<p>2、没有对购买数量进行限制<br>2.1、产生的原因是开发人员没有对购买的数量参数进行严格的限制。 这种同样是数量的参数没有做签名，导致可随意修改。  </p>
<p>2.2、经典的修改方式就是改成负数。 当购买的数量是一个负数时，总额的算法仍然是“购买数量x单价=总价”。 所以这样就会导致有一个负数的需支付金额。 若支付成功，则可能导致购买到了一个负数数量的产品，并有可能返还相应的积分/金币到你的账户上。  </p>
<p>2.3、也有将数量改成一个超大的数。结果可能导致商品数量或者支付的金额超过一定数值而归0。</p>
<p>3、请求重放<br>未对订单唯一性进行验证，导致购买商品成功后，重放其中请求，可以使购买商品一直增加。</p>
<p>4、其他参数干扰<br>由于对商品价格，数量等以外的其它会影响最终金额参数(如：运费)缺乏验证导致最终金额可被控制。</p>
<h1 id="二、-编码建议"><a href="#二、-编码建议" class="headerlink" title="二、 编码建议"></a>二、 编码建议</h1><p>1、对传递的金钱，数量等对最后支付金额会产生影响的所有参数做签名。并且注意签名算法不可被猜测到。使被修改过的数据无法通过验证。</p>
<p>2、对重要的参数进行校检和有效性验证。</p>
<p>3、注意验证订单的唯一性，防止重放攻击。</p>
<h1 id="三、-安全检测CheckList"><a href="#三、-安全检测CheckList" class="headerlink" title="三、 安全检测CheckList"></a>三、 安全检测CheckList</h1><a href="/2016/09/20/谈谈在线支付的安全性问题/Web安全检查点.xlsx" title="Web安全检查点.xlsx">Web安全检查点.xlsx</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是简单的谈谈在线支付的一些安全性漏洞，以及一些编码建议，最后附件是web安全的一些CheckList检查项。&lt;/p&gt;
&lt;h1 id=&quot;一、-常见漏洞&quot;&gt;&lt;a href=&quot;#一、-常见漏洞&quot; class=&quot;headerlink&quot; title=&quot;一、 常见漏洞&quot;&gt;&lt;/a&gt;一、 常见漏洞&lt;/h1&gt;&lt;p&gt;1、支付过程中可直接修改数据包中的支付金额&lt;br&gt;这种漏洞是支付漏洞中最常见的。 开发人员为了方便，直接在支付的关键步骤数据包中直接传递需要支付的金额。 而这种金额后端没有做校验，传递过程中也没有做签名，导致可以随意篡改金额提交。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="https://tunsuy.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="测试" scheme="https://tunsuy.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="安全" scheme="https://tunsuy.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>代码扫描之API调用版本检查</title>
    <link href="https://tunsuy.github.io/2016/09/18/%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F%E4%B9%8BAPI%E8%B0%83%E7%94%A8%E7%89%88%E6%9C%AC%E6%A3%80%E6%9F%A5/"/>
    <id>https://tunsuy.github.io/2016/09/18/代码扫描之API调用版本检查/</id>
    <published>2016-09-18T02:09:21.000Z</published>
    <updated>2017-04-11T08:17:29.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-项目简介"><a href="#一、-项目简介" class="headerlink" title="一、 项目简介"></a>一、 项目简介</h1><p>语言：python语言</p>
<p>该项目是对工程项目代码进行全面扫描，发现其是否有代码层面的bug<br>目前第一版支持了ios下的api版本控制的扫描检查<br>后续将逐渐支持其他方面的代码检查，比如是否有内存溢出，数组越界等，支持检查项可配置</p>
<p>完整的项目源码地址：<br><a href="https://github.com/tunsuy/iOS-code-scan" target="_blank" rel="external">https://github.com/tunsuy/iOS-code-scan</a></p>
<a id="more"></a>
<p>该项目现已很好的服务于公司的ios项目代码扫描中，有效的检测出很多开发人员疏忽的api版本使用问题</p>
<p>下面只对api版本控制检查进行实现讲解</p>
<h1 id="二、-实现思路"><a href="#二、-实现思路" class="headerlink" title="二、 实现思路"></a>二、 实现思路</h1><p>扫描ios项目，将所有的api方法原型依次提取出来，跟ios官方定义的版本进行比对；<br>检查对那些有版本限制的api，在代码中是否有相应的条件判断</p>
<p>那么这就涉及到如下几个问题<br>1、需要知道ios库中所有的api版本信息情况<br>2、需要提取出代码中所有的api调用并重新组装成方法原型<br>3、需要知道该方法原型调用是否在相应的条件判断中<br>4、条件判断可能是多层嵌套的<br>5、方法调用可能特别复杂，跨度可能特别大<br>6、方法调用可能是多层嵌套的  </p>
<h1 id="三、-解决方案如下"><a href="#三、-解决方案如下" class="headerlink" title="三、 解决方案如下"></a>三、 解决方案如下</h1><p>1、使用爬虫将ios库的api版本信息抓取下来，并存储在数据库中<br>——主要定义三个表：framework、class、api<br>2、逐个文件逐行扫描，以方法调用的固有特征（比如：[class1 fun_1.1:[class2 fun_2] fun_1.2:xx]），提取出方法原型<br>——当然要完整的一个不漏的提取出所有方法，处理逻辑还是很复杂的<br>3、根据方法原型读取api数据库，获取其对应的sdk版本<br>4、如果有版本限制，则检查其是否处于条件判断中<br>——需要保持条件判断的上下文信息，多层if嵌套的匹配等</p>
<h1 id="四、-使用技术"><a href="#四、-使用技术" class="headerlink" title="四、 使用技术"></a>四、 使用技术</h1><p>爬虫：使用了python的scrapy框架<br>备注：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建一个爬虫项目</span></div><div class="line">scrapy startproject ScrapyIOSAPI</div><div class="line"></div><div class="line"><span class="comment">#shell调试方法</span></div><div class="line">scrapy shell <span class="string">"https://developer.apple.com/reference?language=objc"</span>  </div><div class="line"></div><div class="line"><span class="comment">#调试举例:</span></div><div class="line">response.xpath(<span class="string">'//div[@class="task-symbols"]/div[@class="symbol clm"]/a/code/text()'</span>)</div><div class="line"></div><div class="line">scrapy crawl spider_name—执行爬虫</div></pre></td></tr></table></figure></p>
<p>数据库：sqlite轻量级数据库</p>
<p>整个项目采用Python实现：</p>
<ul>
<li>数据库连接技术</li>
<li>多线程技术</li>
<li>抽象类和类继承、生成器等高级技术</li>
</ul>
<h1 id="五、-工程介绍"><a href="#五、-工程介绍" class="headerlink" title="五、 工程介绍"></a>五、 工程介绍</h1><p>该工程包括两个项目</p>
<h2 id="1、-爬虫项目"><a href="#1、-爬虫项目" class="headerlink" title="1、 爬虫项目"></a>1、 爬虫项目</h2><p>爬取所有的苹果官方object-c下的API相关信息，并保存在数据库中<br>使用</p>
<ul>
<li>切换到工程下的iOSAPI目录下</li>
<li>执行scrapy crawl objcApi<br>会在当前目录下生成IOSAPI.db数据库文件<br>该数据库保存了所有API的相关信息</li>
</ul>
<h2 id="2、-扫描iOS项目"><a href="#2、-扫描iOS项目" class="headerlink" title="2、 扫描iOS项目"></a>2、 扫描iOS项目</h2><p>支持扫描单个文件或者项目目录，根据自己输入的参数决定<br>使用</p>
<ul>
<li>切换到工程下的scan_proj目录下</li>
<li>执行python main.py 需要扫描的项目路径 结果保存文件<br>注：路径可以是单个文件名或者项目目录</li>
</ul>
<h1 id="六、-对ios代码规范的建议"><a href="#六、-对ios代码规范的建议" class="headerlink" title="六、 对ios代码规范的建议"></a>六、 对ios代码规范的建议</h1><p>对于版本控制，统一使用宏定义<br>代码不要一行写多条语句，尽量按照ios开发规范来写代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-项目简介&quot;&gt;&lt;a href=&quot;#一、-项目简介&quot; class=&quot;headerlink&quot; title=&quot;一、 项目简介&quot;&gt;&lt;/a&gt;一、 项目简介&lt;/h1&gt;&lt;p&gt;语言：python语言&lt;/p&gt;
&lt;p&gt;该项目是对工程项目代码进行全面扫描，发现其是否有代码层面的bug&lt;br&gt;目前第一版支持了ios下的api版本控制的扫描检查&lt;br&gt;后续将逐渐支持其他方面的代码检查，比如是否有内存溢出，数组越界等，支持检查项可配置&lt;/p&gt;
&lt;p&gt;完整的项目源码地址：&lt;br&gt;&lt;a href=&quot;https://github.com/tunsuy/iOS-code-scan&quot;&gt;https://github.com/tunsuy/iOS-code-scan&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
      <category term="sqlite" scheme="https://tunsuy.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>Java：重温数据结构-链表</title>
    <link href="https://tunsuy.github.io/2016/09/13/Java%EF%BC%9A%E9%87%8D%E6%B8%A9%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
    <id>https://tunsuy.github.io/2016/09/13/Java：重温数据结构-链表/</id>
    <published>2016-09-13T01:59:43.000Z</published>
    <updated>2017-03-14T10:11:00.465Z</updated>
    
    <content type="html"><![CDATA[<p>翻译于<a href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html" target="_blank" rel="external">https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html</a></p>
<p>注：不是原文翻译，有些自己的理解改动</p>
<h1 id="一、-引言"><a href="#一、-引言" class="headerlink" title="一、 引言"></a>一、 引言</h1><p>一个链表就是一个线性的数据结构，如下图所示：</p>
<img src="/2016/09/13/Java：重温数据结构-链表/linkedlist.bmp" alt="linkedlist.bmp" title="">
<a id="more"></a>
<p>一个链表中的每个元素（我们叫它节点）包含两个部分-数据和指向下一个节点的引用，最后一个节点的引用部分则指向null。指向链表的一个对象（实体）叫做这个链表的head（头部），这个head不是链表中一个独立的节点，但它是指向链表的第一个节点。如果链表为空，head则表示一个空的引用。</p>
<p>链表是一个动态的数据结构，链表中节点的数量不是固定的，能够根据需要动态的增减。如果一个应用需要处理的对象（实体）数是不确定的，则需要使用链表来表示。</p>
<p>链表相对于数组来说的一个缺点就是不允许直接访问其中的元素。如果你想要访问一个指定的元素，你必须从链表的head开始，依次找到它的下一个引用，直到你得到这个想要的元素。</p>
<p>链表的另外一个缺点就是比数组占用更多的内存空间。因为需要使用额外的空间保存下一个节点引用（next）。</p>
<h1 id="二、-链表的类型"><a href="#二、-链表的类型" class="headerlink" title="二、 链表的类型"></a>二、 链表的类型</h1><p>1、单链表，就是上面描述的<br>2、双向链表，就是指一个链表有两个引用，一个指向下一个节点，另一个指向前一个节点，如图</p>
<img src="/2016/09/13/Java：重温数据结构-链表/doubly.bmp" alt="doubly.bmp" title="">
<p>链表的另一个重要的类型叫循环链表，就是指链表的最后一个节点指向链表的第一个节点（或者head）。</p>
<h1 id="三、-节点类"><a href="#三、-节点类" class="headerlink" title="三、 节点类"></a>三、 节点类</h1><p>java语言中，你可以定义一个类（B）被包含于另一个类（A）。类A叫做外部类，类B叫做内部类。内部类的作用仅仅就是用于内部帮助类。下面就是链表内部节点类的定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">AnyType</span>&gt;</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">private</span> AnyType data;</div><div class="line">   <span class="keyword">private</span> Node&lt;AnyType&gt; next;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(AnyType data, Node&lt;AnyType&gt; next)</span></span></div><div class="line">   &#123;</div><div class="line">      <span class="keyword">this</span>.data = data;</div><div class="line">      <span class="keyword">this</span>.next = next;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个内部类就是外部类的一个成员，能够访问外部类的其他成员（包括私有成员）。反之亦然，外部类也能够访问内部类的所有成员。一个内部类能够被private、public、protected或者package访问权限修饰。有两种内部类：静态和非静态的。</p>
<p>这里我们使用两个内部类来实现链表：静态 <code>Node</code> 类和非静态 <code>LinkedListIterator</code> 。完整的实现请看 <a href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/code/LinkedList.java" target="_blank" rel="external">LinkedList.java</a></p>
<h1 id="四、-例子"><a href="#四、-例子" class="headerlink" title="四、 例子"></a>四、 例子</h1><p>让我们分段的来跟踪每一步的影响，在每一步执行之前，链表存储它的初始状态。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">head = head.next;</div></pre></td></tr></table></figure>
<img src="/2016/09/13/Java：重温数据结构-链表/linkedlist2.bmp" alt="linkedlist2.bmp" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">head.next = head.next.next;</div></pre></td></tr></table></figure>
<img src="/2016/09/13/Java：重温数据结构-链表/linkedlist3.bmp" alt="linkedlist3.bmp" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">head.next.next.next.next = head;</div></pre></td></tr></table></figure>
<img src="/2016/09/13/Java：重温数据结构-链表/linkedlist4.bmp" alt="linkedlist4.bmp" title="">
<h1 id="五、-链表操作"><a href="#五、-链表操作" class="headerlink" title="五、 链表操作"></a>五、 链表操作</h1><h2 id="1、-addFirst"><a href="#1、-addFirst" class="headerlink" title="1、 addFirst"></a>1、 addFirst</h2><p>这个方法创建一个节点，并放在链表的开始位置，如图：</p>
<img src="/2016/09/13/Java：重温数据结构-链表/prepend.bmp" alt="prepend.bmp" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(AnyType item)</span></span></div><div class="line">&#123;</div><div class="line">   head = <span class="keyword">new</span> Node&lt;AnyType&gt;(item, head);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、-Traversing"><a href="#2、-Traversing" class="headerlink" title="2、 Traversing"></a>2、 Traversing</h2><p>从head开始，访问每一个节点，直到null，不改变head的引用。如图：</p>
<img src="/2016/09/13/Java：重温数据结构-链表/traverse.bmp" alt="traverse.bmp" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Node tmp = head;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(tmp != <span class="keyword">null</span>) tmp = tmp.next;</div></pre></td></tr></table></figure>
<h2 id="3、-addLast"><a href="#3、-addLast" class="headerlink" title="3、 addLast"></a>3、 addLast</h2><p>这个方法增加一个节点到链表的最后，这需要 <code>Traversing</code> ，但确保在最后一个节点的时候停止。如图：</p>
<img src="/2016/09/13/Java：重温数据结构-链表/append.bmp" alt="append.bmp" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(AnyType item)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(head == <span class="keyword">null</span>) addFirst(item);</div><div class="line">   <span class="keyword">else</span></div><div class="line">   &#123;</div><div class="line">      Node&lt;AnyType&gt; tmp = head;</div><div class="line">      <span class="keyword">while</span>(tmp.next != <span class="keyword">null</span>) tmp = tmp.next;</div><div class="line"></div><div class="line">      tmp.next = <span class="keyword">new</span> Node&lt;AnyType&gt;(item, <span class="keyword">null</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、-Inserting-“after”"><a href="#4、-Inserting-“after”" class="headerlink" title="4、 Inserting “after”"></a>4、 Inserting “after”</h2><p>找到指定key的节点，然后在它之后插入一个节点。如下图所示，我们在”E”之后插入一个新的节点。</p>
<img src="/2016/09/13/Java：重温数据结构-链表/after.bmp" alt="after.bmp" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(AnyType key, AnyType toInsert)</span></span></div><div class="line">&#123;</div><div class="line">   Node&lt;AnyType&gt; tmp = head;</div><div class="line">   <span class="keyword">while</span>(tmp != <span class="keyword">null</span> &amp;&amp; !tmp.data.equals(key)) tmp = tmp.next;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(tmp != <span class="keyword">null</span>)</div><div class="line">      tmp.next = <span class="keyword">new</span> Node&lt;AnyType&gt;(toInsert, tmp.next);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5、-Inserting-“before”"><a href="#5、-Inserting-“before”" class="headerlink" title="5、 Inserting “before”"></a>5、 Inserting “before”</h2><p>找到指定key的节点，然后在它之前插入一个节点。如下图所示，我们在”A”之前插入一个新的节点。</p>
<img src="/2016/09/13/Java：重温数据结构-链表/before.bmp" alt="before.bmp" title="">
<p>为了方便起见，我们增加两个引用 <code>pre</code> 和 <code>cur</code>，保证 <code>pre</code> 在 <code>cur</code> 之前。同时平移这两个引用，直到 <code>cur</code> 到达我们想要插入的节点之前。如果 <code>cur</code> 到达null，则不插入，否则我们插入一个新的节点在 <code>pre</code> 和 <code>cur</code> 之间。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBefore</span><span class="params">(AnyType key, AnyType toInsert)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">if</span>(head.data.equals(key))</div><div class="line">   &#123;</div><div class="line">      addFirst(toInsert);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   Node&lt;AnyType&gt; prev = <span class="keyword">null</span>;</div><div class="line">   Node&lt;AnyType&gt; cur = head;</div><div class="line"></div><div class="line">   <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; !cur.data.equals(key))</div><div class="line">   &#123;</div><div class="line">      prev = cur;</div><div class="line">      cur = cur.next;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//insert between cur and prev</span></div><div class="line">   <span class="keyword">if</span>(cur != <span class="keyword">null</span>) prev.next = <span class="keyword">new</span> Node&lt;AnyType&gt;(toInsert, cur);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="6、-Deletion"><a href="#6、-Deletion" class="headerlink" title="6、 Deletion"></a>6、 Deletion</h2><p>找到指定key的节点并删除它。如下图所示删除包含”A”的节点。</p>
<img src="/2016/09/13/Java：重温数据结构-链表/delete.bmp" alt="delete.bmp" title="">
<p>这个方法的算法和前一个很相似。为了方便起见，我们增加两个引用 <code>pre</code> 和 <code>cur</code>，保证 <code>pre</code> 在 <code>cur</code> 之前。同时平移这两个引用，直到 <code>cur</code> 到达我们想要删除的节点。这里有三种情况需要注意：<br>1、链表为空<br>2、删除的是head节点<br>3、需要删除的节点不再链表中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AnyType key)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"cannot delete"</span>);</div><div class="line"></div><div class="line">   <span class="keyword">if</span>( head.data.equals(key) )</div><div class="line">   &#123;</div><div class="line">      head = head.next;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   Node&lt;AnyType&gt; cur  = head;</div><div class="line">   Node&lt;AnyType&gt; prev = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; !cur.data.equals(key) )</div><div class="line">   &#123;</div><div class="line">      prev = cur;</div><div class="line">      cur = cur.next;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(cur == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"cannot delete"</span>);</div><div class="line"></div><div class="line">   <span class="comment">//delete cur node</span></div><div class="line">   prev.next = cur.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="7、-Iterator"><a href="#7、-Iterator" class="headerlink" title="7、 Iterator"></a>7、 Iterator</h2><p>迭代器提供了对集合数据的访问方式，隐藏集合数据的内部表示形式。在java中迭代器是一个对象，因此需要创建一个类来实现，并且这个类需要实现 <code>Iterator</code> 接口。通常这样的类是作为一个内部类来实现的。<code>iterator</code> 接口包含下面三个方法：<br>1、AnyType next() - 返回容器中的下一个元素<br>2、boolean hasNext() - 检查是否还有下一个元素<br>3、void remove() - (可选的操作).移除通过 <code>next()</code> 方法返回的元素</p>
<p>下面讲讲 <code>LinkedList</code> 类中的 <code>iterator</code> 实现。首先我在 <code>LinkedList</code> 中增加一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;AnyType&gt; <span class="title">iterator</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> LinkedListIterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面 <code>LinkedListIterator</code> 是 <code>LinkedList</code> 的一个私有内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">AnyType</span>&gt;</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">private</span> Node&lt;AnyType&gt; nextNode;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedListIterator</span><span class="params">()</span></span></div><div class="line">   &#123;</div><div class="line">      nextNode = head;</div><div class="line">   &#125;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>LinkedListIterator</code> 类 必须实现 <code>next()</code> 和  <code>hasNext()</code> 方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AnyType <span class="title">next</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">   AnyType res = nextNode.data;</div><div class="line">   nextNode = nextNode.next;</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="六、-Cloning克隆"><a href="#六、-Cloning克隆" class="headerlink" title="六、 Cloning克隆"></a>六、 Cloning克隆</h1><p>就像任何其他一个对象一样，我们需要学习怎样clone一个链表。如果我们简单的使用 <code>Object</code> 类的 <code>clone()</code> 方法，那么就是”浅复制”，如下图所示：</p>
<img src="/2016/09/13/Java：重温数据结构-链表/shallowclone.bmp" alt="shallowclone.bmp" title="">
<p>这个Object的 <code>clone()</code> 方法只会对第一个节点进行一份内容复制，其他节点都是引用复制，内容共享。这显然不是我们想要的效果，那么看看下面的”深复制”</p>
<img src="/2016/09/13/Java：重温数据结构-链表/deepclone.bmp" alt="deepclone.bmp" title="">
<p>有几种方法可以”深复制”链表，一种简单的方法就是遍历每一个节点，然后使用 <code>addFirst()</code> 方法。最后你将得到一个倒序的新的链表，然后我们不得不反转这个链表。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">copy</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   LinkedList&lt;AnyType&gt; twin = <span class="keyword">new</span> LinkedList&lt;AnyType&gt;();</div><div class="line">   Node&lt;AnyType&gt; tmp = head;</div><div class="line">   <span class="keyword">while</span>(tmp != <span class="keyword">null</span>)</div><div class="line">   &#123;</div><div class="line">      twin.addFirst( tmp.data );</div><div class="line">      tmp = tmp.next;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> twin.reverse();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个更好的方法就是对这个新链表使用尾引用，在最后的节点增加每一个新节点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> LinkedList&lt;AnyType&gt; <span class="title">copy3</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   LinkedList&lt;AnyType&gt; twin = <span class="keyword">new</span> LinkedList&lt;AnyType&gt;();</div><div class="line">   Node tmp = head;</div><div class="line">   twin.head = <span class="keyword">new</span> Node&lt;AnyType&gt;(head.data, <span class="keyword">null</span>);</div><div class="line">   Node tmpTwin = twin.head;</div><div class="line"></div><div class="line">   <span class="keyword">while</span>(tmp.next != <span class="keyword">null</span>)</div><div class="line">   &#123;</div><div class="line">      tmp = tmp.next;</div><div class="line">      tmpTwin.next = <span class="keyword">new</span> Node&lt;AnyType&gt;(tmp.data, <span class="keyword">null</span>);</div><div class="line">      tmpTwin = tmpTwin.next;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> twin;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译于&lt;a href=&quot;https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html&quot;&gt;https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：不是原文翻译，有些自己的理解改动&lt;/p&gt;
&lt;h1 id=&quot;一、-引言&quot;&gt;&lt;a href=&quot;#一、-引言&quot; class=&quot;headerlink&quot; title=&quot;一、 引言&quot;&gt;&lt;/a&gt;一、 引言&lt;/h1&gt;&lt;p&gt;一个链表就是一个线性的数据结构，如下图所示：&lt;/p&gt;
&lt;img src=&quot;/2016/09/13/Java：重温数据结构-链表/linkedlist.bmp&quot; alt=&quot;linkedlist.bmp&quot; title=&quot;&quot;&gt;
    
    </summary>
    
      <category term="java" scheme="https://tunsuy.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tunsuy.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="https://tunsuy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Android下App的安全性问题</title>
    <link href="https://tunsuy.github.io/2016/08/25/%E8%B0%88%E8%B0%88Android%E4%B8%8BApp%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://tunsuy.github.io/2016/08/25/谈谈Android下App的安全性问题/</id>
    <published>2016-08-25T02:24:56.000Z</published>
    <updated>2017-04-12T03:14:45.267Z</updated>
    
    <content type="html"><![CDATA[<p>下面从Android的几大组件详细的谈谈一些注意事项和安全编码建议，以及一些测试方法</p>
<h1 id="一、-Android-activity"><a href="#一、-Android-activity" class="headerlink" title="一、 Android-activity"></a>一、 Android-activity</h1><h2 id="1、-注意事项"><a href="#1、-注意事项" class="headerlink" title="1、 注意事项"></a>1、 注意事项</h2><p>1.1、app内使用的私有Activity不应配置 <code>intent-filter</code>，如果配置了 <code>intent-filter</code> 需设置 <code>exported</code> 属性为false。<br>1.2、使用默认 <code>taskAffinity</code><br>1.3、使用默认 <code>launchMode</code><br>1.4、启动Activity时不设置 <code>intent</code> 的 <code>FLAG_ACTIVITY_NEW_TASK</code> 标签<br>1.5、谨慎处理接收的intent以及其携带的信息  </p>
<a id="more"></a>
<p>1.6、签名验证内部（in-house）app<br>1.7、当Activity返回数据时候需注意目标Activity是否有泄露信息的风险<br>1.8、目的Activity十分明确时使用显示启动<br>1.9、谨慎处理Activity返回的数据，目的Activity返回的数据有可能是恶意应用伪造的<br>1.10、验证目标Activity是否恶意app，以免受到intent欺骗，可用hash签名验证<br>1.11、尽可能的不发送敏感信息，应考虑到启动 <code>public Activity</code> 中 <code>intent</code> 的信息均有可能被恶意应用窃取的风险</p>
<h2 id="2、-测试方法"><a href="#2、-测试方法" class="headerlink" title="2、 测试方法"></a>2、 测试方法</h2><p>2.1、查看activity：</p>
<ul>
<li>反编译查看配置文件AndroidManifest.xml中activity组件（关注配置了intent-filter的及未设置export=“false”的）</li>
<li>直接用RE打开安装后的app查看配置文件</li>
<li>Drozer扫描:run app.activity.info -a packagename</li>
<li>动态查看：logcat设置filter的tag为ActivityManager</li>
</ul>
<p>2.2、启动activity：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell：am start -a action -n package/componet</div><div class="line">drozer: run app.activity.start –action android.action.intent.VIEW …</div></pre></td></tr></table></figure></p>
<ul>
<li>自己编写app调用 <code>startActiviy()</code> 或 <code>startActivityForResult()</code></li>
<li>浏览器 <code>intent scheme</code>远程启动: <code>Intent scheme URL attack</code></li>
</ul>
<h1 id="二、-Android-service"><a href="#二、-Android-service" class="headerlink" title="二、 Android-service"></a>二、 Android-service</h1><h2 id="1、-intent-filter与exported组合建议"><a href="#1、-intent-filter与exported组合建议" class="headerlink" title="1、 intent-filter与exported组合建议"></a>1、 intent-filter与exported组合建议</h2><p>1.1、<code>exported</code> 属性明确定义<br>1.2、私有service不定义 <code>intent-filter</code> 并且设置 <code>exported</code> 为false<br>1.3、公开的service设置 <code>exported</code>为true, <code>intent-filter</code> 可以定义或者不定义<br>1.4、内部/合作service设置 <code>exported</code> 为true, <code>intent-filter</code> 不定义  </p>
<h2 id="2、-注意事项"><a href="#2、-注意事项" class="headerlink" title="2、 注意事项"></a>2、 注意事项</h2><p>2.1、只被应用本身使用的service应设置为私有<br>2.2、service接收到的数据需需谨慎处理<br>2.3、内部service需使用签名级别的 <code>protectionLevel</code> 来判断是否未内部应用调用<br>2.4、不应在service创建(<code>onCreate</code>方法被调用)的时候决定是否提供服务,应在 <code>onStartCommand/onBind/onHandleIntent</code> 等方法被调用的时候做判断.<br>2.5、当service又返回数据的时候,因判断数据接收app是否又信息泄露的风险<br>2.6、有明确的服务需调用时使用显示意图<br>2.7、尽量不发送敏感信息<br>2.8、合作service需对合作公司的app签名做效验</p>
<h2 id="3、-测试方法"><a href="#3、-测试方法" class="headerlink" title="3、 测试方法"></a>3、 测试方法</h2><p>3.1、service不像 <code>broadcast receicer</code> 只能静态注册,通过反编译查看配置文件 <code>Androidmanifest.xml</code> 即可确定service,若有导出的service则进行下一步<br>3.2、方法查看service类,重点关注 <code>onCreate/onStarCommand/onHandleIntent</code> 方法<br>3.3、检索所有类中 <code>startService/bindService</code> 方法及其传递的数据<br>3.4、根据业务情况编写测试poc或者直接使用adb命令测试</p>
<h1 id="三、-Android-Content-Provider"><a href="#三、-Android-Content-Provider" class="headerlink" title="三、 Android-Content Provider"></a>三、 Android-Content Provider</h1><h2 id="1、-安全建议"><a href="#1、-安全建议" class="headerlink" title="1、 安全建议"></a>1、 安全建议</h2><p>1.1、<code>minSdkVersion</code> 不低于9<br>1.2、不向外部app提供的数据的私有 <code>content provider</code> 设置 <code>exported=“false”</code> 避免组件暴露(编译api小于17时更应注意此点)<br>1.3、使用参数化查询避免注入<br>1.4、内部app通过 <code>content provid</code> 交换数据设置 <code>protectionLevel=“signature”</code> 验证签名<br>1.5、公开的 <code>content provider</code> 确保不存储敏感数据<br>1.6、提供asset文件时注意权限保护</p>
<h2 id="2、-测试方法-1"><a href="#2、-测试方法-1" class="headerlink" title="2、 测试方法"></a>2、 测试方法</h2><p>2.1、反编译查看 <code>AndroidManifest.xml</code>（drozer扫描）文件定位 <code>content provider</code> 是否导出，是否配置权限，确定authority<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!bash</span></div><div class="line">drozer:</div><div class="line">run app.provider.info <span class="_">-a</span> cn.etouch.ecalendar</div></pre></td></tr></table></figure></p>
<p>2.2、反编译查找path，关键字 <code>addURI、hook api</code> 动态监测推荐使用zjdroid<br>2.3、确定authority和path后根据业务编写POC、使用drozer、使用小工具 <code>Content Provider Helper、adb shell</code>(没有对应权限会提示错误)</p>
<h1 id="四、-Android-Broadcast"><a href="#四、-Android-Broadcast" class="headerlink" title="四、 Android-Broadcast"></a>四、 Android-Broadcast</h1><h2 id="1、-安全建议-1"><a href="#1、-安全建议-1" class="headerlink" title="1、 安全建议"></a>1、 安全建议</h2><p>1.1、私有广播接收器设置 <code>exported=&#39;false&#39;</code>，并且不配置 <code>intent-filter</code>。(私有广播接收器依然能接收到同UID的广播)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;receiver android:name=“.PrivateReceiver” android:exported=“<span class="keyword">false</span>” /&gt;</div></pre></td></tr></table></figure></p>
<p>1.2、对接收来的广播进行验证<br>1.3、内部app之间的广播使用 <code>protectionLevel=&#39;signature&#39;</code> 验证其是否真是内部app<br>1.4、返回结果时需注意接收app是否会泄露信息<br>1.5、发送的广播包含敏感信息时需指定广播接收器，使用显示意图<br>1.6、<code>sticky broadcast</code> 粘性广播中不应包含敏感信息<br>1.7、<code>Ordered Broadcast</code> 建议设置接收权限 <code>receiverPermission</code>，避免恶意应用设置高优先级抢收此广播后并执行 <code>abortBroadcast()</code> 方法。</p>
<h2 id="2、-测试方法-2"><a href="#2、-测试方法-2" class="headerlink" title="2、 测试方法"></a>2、 测试方法</h2><p>2.1、查找动态广播接收器：反编译后检索 <code>registerReceiver()</code>,<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dz&gt; run app.broadcast.info -a android -i</div></pre></td></tr></table></figure></p>
<p>2.2、查找静态广播接收器：反编译后查看配置文件查找广播接收器组件，注意exported属性<br>2.3、查找发送广播内的信息检索 <code>sendBroadcast</code> 与 <code>sendOrderedBroadcast</code>，注意 <code>setPackage</code> 方法于 <code>receiverPermission</code> 变量。</p>
<h1 id="五、-Android-webview"><a href="#五、-Android-webview" class="headerlink" title="五、 Android-webview"></a>五、 Android-webview</h1><h2 id="1、-webview接口"><a href="#1、-webview接口" class="headerlink" title="1、 webview接口"></a>1、 webview接口</h2><p>1.1、Android 4.2 （api17）已经开始采用新的接口方法，<code>@JavascriptInterface</code> 代替 <code>addjavascriptInterface</code>, 有些android 2.3不再升级，浏览器需要兼容。<br>1.2、在使用 <code>js2java</code> 的 <code>bridge</code> 时候，需要对每个传入的参数进行验证，屏蔽攻击代码。<br>1.3、控制相关权限或者尽可能不要使用 <code>js2java</code> 的 <code>Bridge</code>。</p>
<h2 id="2、-webview-UXSS"><a href="#2、-webview-UXSS" class="headerlink" title="2、 webview UXSS"></a>2、 webview UXSS</h2><p>2.1、服务端禁止 <code>frame</code> 嵌套 <code>X-FRAME-OPTIONS:DENY</code>。<br>2.2、客户端使用 <code>setAllowFileAccess(false)</code> 方法禁止 <code>webview</code> 访问本地域。<br>2.3、客户端使用 <code>onPageStarted (WebView view, String url, Bitmap favicon)</code> 方法在跳转前进行跨域判断。<br>2.4、客户端对 <code>iframe object</code> 标签属性进行过滤。</p>
<h1 id="六、-Android开发的安全防护"><a href="#六、-Android开发的安全防护" class="headerlink" title="六、 Android开发的安全防护"></a>六、 Android开发的安全防护</h1><p>安卓应用在开发过程中有很多安全保护的方案</p>
<p>1、使用混淆保护,对APK代码进行基础的防护。<br>2、使用伪加密保护方式，通过java代码对APK(压缩文件)进行伪加密，其修改原理是修改连续4位字节标记为”PK0102”的后第5位字节，奇数表示不加密偶数表示加密。伪加密后的APK不但可以防止PC端对它的解压和查看也同样能防止反编译工具编译。<br>3、通过标志尾添加其他数据从而防止PC工具解压反编译，这样处理后把APK看做压缩文件的PC端来说这个文件被破坏了，所以你要对其进行解压或者查看都会提示文件已损坏，用反编译工具也会提示文件已损坏，但是它却不会影响在Android系统里面的正常运行和安装而且也能兼容到所有系统<br>4、验证签名信息,通过本地或网络对签名的信息进行验证<br>5、网上针对app防止反编译的做法是可以使用加壳技术</p>
<h1 id="七、-安全检测CheckList"><a href="#七、-安全检测CheckList" class="headerlink" title="七、 安全检测CheckList"></a>七、 安全检测CheckList</h1><a href="/2016/08/25/谈谈Android下App的安全性问题/Android安全检查点.xlsx" title="Android安全检查点.xlsx">Android安全检查点.xlsx</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面从Android的几大组件详细的谈谈一些注意事项和安全编码建议，以及一些测试方法&lt;/p&gt;
&lt;h1 id=&quot;一、-Android-activity&quot;&gt;&lt;a href=&quot;#一、-Android-activity&quot; class=&quot;headerlink&quot; title=&quot;一、 Android-activity&quot;&gt;&lt;/a&gt;一、 Android-activity&lt;/h1&gt;&lt;h2 id=&quot;1、-注意事项&quot;&gt;&lt;a href=&quot;#1、-注意事项&quot; class=&quot;headerlink&quot; title=&quot;1、 注意事项&quot;&gt;&lt;/a&gt;1、 注意事项&lt;/h2&gt;&lt;p&gt;1.1、app内使用的私有Activity不应配置 &lt;code&gt;intent-filter&lt;/code&gt;，如果配置了 &lt;code&gt;intent-filter&lt;/code&gt; 需设置 &lt;code&gt;exported&lt;/code&gt; 属性为false。&lt;br&gt;1.2、使用默认 &lt;code&gt;taskAffinity&lt;/code&gt;&lt;br&gt;1.3、使用默认 &lt;code&gt;launchMode&lt;/code&gt;&lt;br&gt;1.4、启动Activity时不设置 &lt;code&gt;intent&lt;/code&gt; 的 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 标签&lt;br&gt;1.5、谨慎处理接收的intent以及其携带的信息  &lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="https://tunsuy.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="android" scheme="https://tunsuy.github.io/tags/android/"/>
    
      <category term="测试" scheme="https://tunsuy.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="安全" scheme="https://tunsuy.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈iOS下App的安全性问题</title>
    <link href="https://tunsuy.github.io/2016/08/20/%E8%B0%88%E8%B0%88iOS%E4%B8%8BApp%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://tunsuy.github.io/2016/08/20/谈谈iOS下App的安全性问题/</id>
    <published>2016-08-20T01:22:44.000Z</published>
    <updated>2017-04-12T03:18:11.207Z</updated>
    
    <content type="html"><![CDATA[<p>下面从几个方面谈谈App的安全性问题，也有一些解决方案建议。</p>
<h1 id="一、-URL-Scheme"><a href="#一、-URL-Scheme" class="headerlink" title="一、 URL Scheme"></a>一、 URL Scheme</h1><p>在iOS官方说明中：“在多个应用程序注册了同一种URL Scheme 的时候，iOS 系统程序的优先级高于第三方开发程序。但是如果一种URL Scheme 的注册应用程序都是第三方开发的，那么这些程序的优先级关系是不确定的</p>
<p>针对第三方应用。这里至少有两种方法可以检测自己应用的URL Scheme是否被Hijack：<br>1、应用本身可以发送一条URL Scheme请求给自己，如果自己可以接收到的话，说明URL Scheme没有被劫持，如果不能收到的话，就说明被劫持了，这时候可以提醒用户卸载有冲突的app。代码如下：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@“alipay://test“]];</div></pre></td></tr></table></figure>
<p>2、利用 <code>MobileCoreServices</code> 服务中的 <code>applicationsAvailableForHandlingURLScheme()</code> 方法可以所有注册了该URL Schemes的应用和处理顺序，随后应用就可以检测自己，或者别人的URL Scheme是否被劫持了。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class LSApplicationWorkspace_class = objc_getClass(&quot;LSApplicationWorkspace&quot;);</div><div class="line">NSObject* workspace = [LSApplicationWorkspace_class performSelector:@selector(defaultWorkspace)];</div><div class="line">NSLog(@&quot;openURL: %@&quot;,[workspace performSelector:@selector(applicationsAvailableForHandlingURLScheme:)withObject:@&quot;alipay&quot;]);</div></pre></td></tr></table></figure></p>
<p>编码建议：<br>一个App如果对外的URL Scheme没有做异常数据检测，那么在传输一个异常的参数时，会导致应用崩溃。所以需要做一些异常数据的检测处理。</p>
<h1 id="二、-Storage"><a href="#二、-Storage" class="headerlink" title="二、 Storage"></a>二、 Storage</h1><p>iOS app安装之后的目录如下：<br>1、Document目录：目录存储用户数据或其他应该定期备份的信息。<br>2、AppName.app目录：这是应用程序的程序包目录，包括应用程序本身，在AppStore上下载的APP是需要脱壳的才能将程序用IDA反编译的。<br>3、Library目录：这个目录下有两个子目录Caches和Preference，Caches目录存储应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息，而Preference目录包含程序的偏好设置。</p>
<p>数据库文件：<br>1、Sqlite db：存储app使用过程中的一些用户数据</p>
<p>编码建议：<br>一些敏感数据不要存储在本地文件中，也不要打印在log日志中，如果需要存储，则需要加密存储。</p>
<p>2、Cache dbs<br>存储一些通过NSURLConnection 产生的请求回复数据</p>
<p>编码建议：<br>对于一些附件的链接，需要设置token有效时间，当然这是服务端需要处理的问题</p>
<h1 id="三、-Cookie"><a href="#三、-Cookie" class="headerlink" title="三、 Cookie"></a>三、 Cookie</h1><p>iOS开发中的Cookie一般存储在 <code>cookie.binary</code> 或者 <code>keychain</code></p>
<p>1、cookie.binary<br>保存在 <code>cookie.binary</code> 中，很容易就被别人利用（即使不越狱）<br>路径： <code>/private/var/mobile/Application/x-x-x/Library/Cookies/Cookies.binarycookies</code></p>
<p>2、Keychain<br>iOS系统及第三方应用都会使用Keychain来作为数据持久化存储媒介，或者应用间数据共享的渠道。<br>那么怎么来查看存储的内容呢，利用keychain_dumper工具。</p>
<p>操作步骤极其简单：  </p>
<ul>
<li>首先在手机上安装keychain_dumper工具，在cydia上安装就可以了，然后使用ssh登录手机终端</li>
<li><p>赋予Keychain数据库可读权限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd /private/var/Keychains/ </div><div class="line"># ls </div><div class="line">TrustStore.sqlite3  accountStatus.plist  caissuercache.sqlite3  keychain-2.db  keychain-2.db-shm  keychain-2.db-wal  ocspcache.sqlite3  ocspcache.sqlite3-shm  ocspcache.sqlite3-wal </div><div class="line"># chmod +r keychain-2.db</div></pre></td></tr></table></figure>
</li>
<li><p>使用Keychain-Dumper导出Keychain</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Primer:/private/var/Keychainsroot# /your_path/keychain_dumper &gt; keychain-export.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后拷贝到本地查看，到底iOS系统和第三方应用都存放了哪些信息，就一览无余了。</p>
<p>Cookie安全设计的几点建议：</p>
<ul>
<li>Cookie 存放在 非Keychain 中，那么就应该加 随机数和Token 双层加密，虽然还有被逆向的可能，但是将难度大大增加</li>
<li>Cookie 存放在 非Keychain 中，加入越狱检测代码，如果检测到越狱就提醒不要存放或者登陆，例子是 支付宝的指纹功能在越狱机提示不能用。</li>
<li>将Cookie的一部分 存放在 Keychain中，并且加密，另外一部分存放在别处(或者就在 另一处Keychain)，被逆向的难度也大大增加.</li>
<li>将网页Cookie和App Cookie 的验证分开，这样的情况还没遇到过</li>
</ul>
<h1 id="四、-安全检测CheckList"><a href="#四、-安全检测CheckList" class="headerlink" title="四、 安全检测CheckList"></a>四、 安全检测CheckList</h1><pre><code>{% asset_link iOS安全检查点.xlsx %}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面从几个方面谈谈App的安全性问题，也有一些解决方案建议。&lt;/p&gt;
&lt;h1 id=&quot;一、-URL-Scheme&quot;&gt;&lt;a href=&quot;#一、-URL-Scheme&quot; class=&quot;headerlink&quot; title=&quot;一、 URL Scheme&quot;&gt;&lt;/a&gt;一、 URL Scheme&lt;/h1&gt;&lt;p&gt;在iOS官方说明中：“在多个应用程序注册了同一种URL Scheme 的时候，iOS 系统程序的优先级高于第三方开发程序。但是如果一种URL Scheme 的注册应用程序都是第三方开发的，那么这些程序的优先级关系是不确定的&lt;/p&gt;
&lt;p&gt;针对第三方应用。这里至少有两种方法可以检测自己应用的URL Scheme是否被Hijack：&lt;br&gt;1、应用本身可以发送一条URL Scheme请求给自己，如果自己可以接收到的话，说明URL Scheme没有被劫持，如果不能收到的话，就说明被劫持了，这时候可以提醒用户卸载有冲突的app。代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="https://tunsuy.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="测试" scheme="https://tunsuy.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="安全" scheme="https://tunsuy.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="iOS" scheme="https://tunsuy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Python：iterator pattern—迭代器模式</title>
    <link href="https://tunsuy.github.io/2016/08/18/Python%EF%BC%9Aiterator-pattern%E2%80%94%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://tunsuy.github.io/2016/08/18/Python：iterator-pattern—迭代器模式/</id>
    <published>2016-08-18T08:53:38.000Z</published>
    <updated>2017-03-14T05:14:10.127Z</updated>
    
    <content type="html"><![CDATA[<p>翻译于<a href="https://davidcorne.com/2013/02/22/iterator-pattern/" target="_blank" rel="external">https://davidcorne.com/2013/02/22/iterator-pattern/</a></p>
<p>注：不是原文翻译，有些自己的理解改动</p>
<p>该文章主要从python语言的角度去讲解</p>
<h1 id="一、-目的"><a href="#一、-目的" class="headerlink" title="一、 目的"></a>一、 目的</h1><p>这个模式背后的意思是：有一个对象，你能够循环它而不需要知道这个对象数据的内部表现。在Python这门语言中，没有什么是私有的（<code>译者注：python中的访问控制是约定</code>），你能够找到一个类的内部构成，这个迭代器模式给了你一个标准的接口。</p>
<p>我认为在python中一个iterator最好的例子就是使用list，因此这里我确定你已经知道怎么使用这个list了</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>]</div><div class="line"><span class="keyword">for</span> number <span class="keyword">in</span> list:</div><div class="line">    print(number)</div></pre></td></tr></table></figure>
<p>这将得到下面的输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">one</div><div class="line">two</div><div class="line">three</div></pre></td></tr></table></figure></p>
<p>在python中这个模式的目标就是为了让用户自定义的类也能够像这样使用。</p>
<h1 id="二、-模式"><a href="#二、-模式" class="headerlink" title="二、 模式"></a>二、 模式</h1><p>这是十分轻量的一个模式，因此我将主要关注实现细节而不是设计。<br>下面是这个设计模式的UML类图</p>
<img src="/2016/08/18/Python：iterator-pattern—迭代器模式/Iterator_general.png" alt="Iterator_general.png" title="">
<p>从上图可以看出，iterator通过组合的方式持有一个容器类实例，它不拥有/删除这个容器本地，只是对这个容器实例的一个引用。</p>
<p>你能看到我们这里是在谈论一般的集合数据结构而不是特指一个list或者dictionary。这些集合类的这些方法是为了定义一个集合/迭代器的接口，接下来我将详细的介绍它们。</p>
<h1 id="三、-python协议"><a href="#三、-python协议" class="headerlink" title="三、 python协议"></a>三、 python协议</h1><p>协议是python中给出的名字（<code>译者注：OC语言中也有协议这个说法</code>），是你定义某一类对象的接口。它不像接口那样是一个正式的需要。它只是一个指导性作用。</p>
<p>它们主要集中在魔术方法，就是那些名字前后是”–”的方法。</p>
<p>我将简单的谈论下可变和不可变容器或者迭代器中的协议。</p>
<h2 id="1、-不可变容器"><a href="#1、-不可变容器" class="headerlink" title="1、 不可变容器"></a>1、 不可变容器</h2><p>不可变容器是指你不能修改容器中元素项，只能获取它们长度或者获取其中的元素项。</p>
<p>下面是不可变容器中的魔术方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">""" Returns the length of the container. Called like len(class) """</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Returns the keyth item in the container.</div><div class="line">    Should raise TypeError if the type of the key is wrong.</div><div class="line">    Should raise KeyError if there is no item for the key.</div><div class="line">    Called like class[key]</div><div class="line">    """</div></pre></td></tr></table></figure></p>
<h2 id="2、-可变容器"><a href="#2、-可变容器" class="headerlink" title="2、 可变容器"></a>2、 可变容器</h2><p>正如你期望的，一个可变容器跟不可变容器有一样的获取方法，另外还有setting和adding方法。</p>
<p>下面是这些魔术方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Returns the length of the container.</div><div class="line">    Called like len(class)</div><div class="line">    """</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Returns the keyth item in the container.</div><div class="line">    Should raise TypeError if the type of the key is wrong.</div><div class="line">    Should raise KeyError if there is no item for the key.</div><div class="line">    Called like class[key]</div><div class="line">    """</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Sets the keyth item in the container.</div><div class="line">    Should raise TypeError if the type of the key is wrong.</div><div class="line">    Should raise KeyError if there is no item for the key.</div><div class="line">    Called like class[key] = value</div><div class="line">    """</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Deletes an item from the collection.  </div><div class="line">    Should raise TypeError if the type of the key is wrong.</div><div class="line">    Should raise KeyError if there is no item for the key.</div><div class="line">    Called like del class[key]</div><div class="line">    """</div></pre></td></tr></table></figure></p>
<p>对于一个不可变容器，你可能也想要有一些方法来增加容器中的元素，对于list/array这类的容器，这些方法可能形如 <code>append(self, key)</code>，或者对于dictionary/table这类容器，则可能是形如 <code>__setitem__(self, key, value)</code></p>
<p>你也可以增加其他的一些方法，比如 <code>__reversed__(self)</code> 和 <code>__contains__(self, item)</code>，但这些对于核心方法族不是必须的。这儿是更好的描述<a href="http://www.rafekettler.com/magicmethods.html#sequence" target="_blank" rel="external">here</a></p>
<h2 id="3、-iterator迭代器"><a href="#3、-iterator迭代器" class="headerlink" title="3、 iterator迭代器"></a>3、 iterator迭代器</h2><p>一个迭代器的协议是非常简单的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Returns an iterator for the collection.</div><div class="line">    Called like iter(class) or for item in class:</div><div class="line">    """</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">   <span class="string">"""</span></div><div class="line">   Returns the next item in the collection.</div><div class="line">   Called in a for loop, or manually.</div><div class="line">   Should raise StopIteration on the last item.</div><div class="line">   """</div></pre></td></tr></table></figure></p>
<p>这个<strong>iter</strong>方法通常返回一个迭代器对象或者返回它自己。注意在python3中 <code>next()</code> 被重命名为了 <code>__next__()</code></p>
<h1 id="四、-一个例子使用"><a href="#四、-一个例子使用" class="headerlink" title="四、 一个例子使用"></a>四、 一个例子使用</h1><p>这里是一个例子告诉你怎么实现一个简单的迭代器，这个例子是循环来反转一个集合。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseIterator</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Iterates the object given to it in reverse so it shows the difference.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable_object)</span>:</span></div><div class="line">        self.list = iterable_object</div><div class="line">        <span class="comment"># start at the end of the iterable_object</span></div><div class="line">        self.index = len(iterable_object)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># return an iterator</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Return the list backwards so it's noticeably different."""</span></div><div class="line">        <span class="keyword">if</span> (self.index == <span class="number">0</span>):</div><div class="line">            <span class="comment"># the list is over, raise a stop index exception</span></div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line">        self.index = self.index - <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> self.list[self.index]</div></pre></td></tr></table></figure></p>
<p>注意这里仅仅定义了迭代器协议所需要的两个方法。</p>
<p>这些方法的意思很明显了，构造函数 (<code>__init__</code>) 引用了一个可迭代对象，并且保持了这个可迭代对象的长度作为 <code>index</code>。这个 <code>__iter__</code> 返回它自己，因为它已经定义了一个 <code>next()</code> 方法。这个 <code>next()</code> 方法对 <code>index</code> 递减，然后返回这个元素项，除非没有元素项了，就抛出一个 <code>StopIteration</code> 异常</p>
<p>在这个例子中，这个 <code>ReverseIterator</code> 迭代器对象被 <code>Days</code> 对象使用。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Days</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.days = [</div><div class="line">        <span class="string">"Monday"</span>,</div><div class="line">        <span class="string">"Tuesday"</span>,</div><div class="line">        <span class="string">"Wednesday"</span>,</div><div class="line">        <span class="string">"Thursday"</span>,</div><div class="line">        <span class="string">"Friday"</span>,</div><div class="line">        <span class="string">"Saturday"</span>,</div><div class="line">        <span class="string">"Sunday"</span></div><div class="line">        ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_iter</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> ReverseIterator(self.days)</div></pre></td></tr></table></figure></p>
<p>这个类仅仅是对一周的日期list的装饰器，有一个公开的方法返回一个迭代器。</p>
<p>下面的代码显示了怎么使用 <code>Days</code> 类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="keyword">if</span> (__name__ == <span class="string">"__main__"</span>):</div><div class="line">    days = Days()</div><div class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> days.reverse_iter():</div><div class="line">        print(day)</div></pre></td></tr></table></figure></p>
<p>注：我也能够定义一个 <code>__iter__</code> 方法代替 <code>reverse_iter()</code> 方法，然后就可以像下面这样使用了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="keyword">if</span> (__name__ == <span class="string">"__main__"</span>):</div><div class="line">    days = Days()</div><div class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> days:</div><div class="line">        print(day)</div></pre></td></tr></table></figure></p>
<p>都将正确的输出下面的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sunday</div><div class="line">Saturday</div><div class="line">Friday</div><div class="line">Thursday</div><div class="line">Wednesday</div><div class="line">Tuesday</div><div class="line">Monday</div></pre></td></tr></table></figure></p>
<p>这部分的代码可以在这个文件找到<a href="https://github.com/davidcorne/Design-Patterns-In-Python/blob/master/Behavioural/Iterator.py" target="_blank" rel="external">this file</a></p>
<p>下面是这些类的UML类图</p>
<img src="/2016/08/18/Python：iterator-pattern—迭代器模式/Iterator_specific.png" alt="Iterator_specific.png" title="">
<p>这篇文章所以得代码都能在这里找到<a href="https://github.com/davidcorne/Design-Patterns-In-Python" target="_blank" rel="external">here</a></p>
<p>感谢你的阅读</p>
]]></content>
    
    <summary type="html">
    
      基于python语言的设计模式详解，迭代器模式
    
    </summary>
    
      <category term="python" scheme="https://tunsuy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
      <category term="设计模式" scheme="https://tunsuy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>iOS：性能之卡顿检测</title>
    <link href="https://tunsuy.github.io/2016/08/11/ios%EF%BC%9A%E6%80%A7%E8%83%BD%E4%B9%8B%E5%8D%A1%E9%A1%BF%E6%A3%80%E6%B5%8B/"/>
    <id>https://tunsuy.github.io/2016/08/11/ios：性能之卡顿检测/</id>
    <published>2016-08-11T11:11:51.000Z</published>
    <updated>2017-03-14T05:14:09.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-项目简介"><a href="#一、-项目简介" class="headerlink" title="一、 项目简介"></a>一、 项目简介</h1><p>项目地址：<br><a href="https://github.com/tunsuy/iOSMonitorLag" target="_blank" rel="external">https://github.com/tunsuy/iOSMonitorLag</a></p>
<p>该项目主要是针对ios项目的卡顿监控的探索，结合ios的运行机制和业界的实践，将其应用于公司项目中进行试运行，查看相关效果</p>
<h1 id="二、-方案一-基于RunLoop"><a href="#二、-方案一-基于RunLoop" class="headerlink" title="二、 方案一 基于RunLoop"></a>二、 方案一 基于RunLoop</h1><h2 id="1、-背景"><a href="#1、-背景" class="headerlink" title="1、 背景"></a>1、 背景</h2><ul>
<li><p>因为UIKit本身的特性,需要将所有的UI操作都放在主线程执行,所以也造成不少程序员都习惯将一些线程安全性不确定的逻辑,以及其它线程结束后的汇总工作等等放到了主线,所以主线程中包含的这些大量计算、IO、绘制都有可能造成卡顿.</p>
</li>
<li><p>在Xcode中已经集成了非常方便的调试工具Instruments,它可以帮助我们在开发测试阶段分析软件运行的性能消耗</p>
</li>
</ul>
<a id="more"></a>
<h2 id="2、-原理"><a href="#2、-原理" class="headerlink" title="2、 原理"></a>2、 原理</h2><ul>
<li><p>监控卡顿,最直接就是找到主线程都在干些啥玩意儿.我们知道一个线程的消息事件处理都是依赖于NSRunLoop来驱动,所以要知道线程正在调用什么方法,就需要从NSRunLoop来入手</p>
</li>
<li><p>发现NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿.</p>
</li>
</ul>
<h2 id="3、-缺点"><a href="#3、-缺点" class="headerlink" title="3、 缺点"></a>3、 缺点</h2><p>这种方式，当主线程中注册了timer等很多附加的东西时，会不断唤醒主线程，就会大量的调用observer回调，造成一定程度上的性能损耗</p>
<h1 id="三、-方案二-基于线程"><a href="#三、-方案二-基于线程" class="headerlink" title="三、 方案二 基于线程"></a>三、 方案二 基于线程</h1><h2 id="1、-背景-1"><a href="#1、-背景-1" class="headerlink" title="1、 背景"></a>1、 背景</h2><p>简单来说，主线程为了达到接近60fps的绘制效率，不能在UI线程有单个超过（1/60s≈16ms）的计算任务。通过Instrument设置16ms的采样率可以检测出大部分这种费时的任务，但有以下缺点：  </p>
<ul>
<li>Instrument profile一次重新编译，时间较长。</li>
<li>只能针对特定的操作场景进行检测，要预先知道卡顿产生的场景。</li>
<li>每次猜测，更改，再猜测再以此循环，需要重新profile。<br>我们的目标方案是，检测能够自动发生，并不需要开发人员做任何预先配置或profile。运行时发现卡顿能即时通知开发人员导致卡顿的函数调用栈。</li>
</ul>
<h2 id="2、-原理-1"><a href="#2、-原理-1" class="headerlink" title="2、 原理"></a>2、 原理</h2><ul>
<li><p>最理想的方案是让UI线程“主动汇报”当前耗时的任务，听起来简单做起来不轻松。</p>
</li>
<li><p>我们可以假设这样一套机制：每隔16ms让UI线程来报道一次，如果16ms之后UI线程没来报道，那就一定是在执行某个耗时的任务。</p>
</li>
</ul>
<p>下面是以接入口袋助理测试的效果图</p>
<img src="/2016/08/11/ios：性能之卡顿检测/卡顿图1.jpg" alt="卡顿图1.jpg" title="">
<img src="/2016/08/11/ios：性能之卡顿检测/卡顿图2.jpg" alt="卡顿图2.jpg" title="">
<h1 id="四、-最后"><a href="#四、-最后" class="headerlink" title="四、 最后"></a>四、 最后</h1><p>但是像在口袋助理这样大型负责的项目中，这些方法都存在一些弊端，监测出来的也不一定是真的由于代码问题引起的，<br>这只是可以作为一种自动提醒机制，让开发者自行去检查下提示的代码是否真的存在性能缺陷</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-项目简介&quot;&gt;&lt;a href=&quot;#一、-项目简介&quot; class=&quot;headerlink&quot; title=&quot;一、 项目简介&quot;&gt;&lt;/a&gt;一、 项目简介&lt;/h1&gt;&lt;p&gt;项目地址：&lt;br&gt;&lt;a href=&quot;https://github.com/tunsuy/iOSMonitorLag&quot;&gt;https://github.com/tunsuy/iOSMonitorLag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该项目主要是针对ios项目的卡顿监控的探索，结合ios的运行机制和业界的实践，将其应用于公司项目中进行试运行，查看相关效果&lt;/p&gt;
&lt;h1 id=&quot;二、-方案一-基于RunLoop&quot;&gt;&lt;a href=&quot;#二、-方案一-基于RunLoop&quot; class=&quot;headerlink&quot; title=&quot;二、 方案一 基于RunLoop&quot;&gt;&lt;/a&gt;二、 方案一 基于RunLoop&lt;/h1&gt;&lt;h2 id=&quot;1、-背景&quot;&gt;&lt;a href=&quot;#1、-背景&quot; class=&quot;headerlink&quot; title=&quot;1、 背景&quot;&gt;&lt;/a&gt;1、 背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为UIKit本身的特性,需要将所有的UI操作都放在主线程执行,所以也造成不少程序员都习惯将一些线程安全性不确定的逻辑,以及其它线程结束后的汇总工作等等放到了主线,所以主线程中包含的这些大量计算、IO、绘制都有可能造成卡顿.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Xcode中已经集成了非常方便的调试工具Instruments,它可以帮助我们在开发测试阶段分析软件运行的性能消耗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ios" scheme="https://tunsuy.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="https://tunsuy.github.io/tags/ios/"/>
    
      <category term="性能" scheme="https://tunsuy.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Python：builder pattern—建造者模式</title>
    <link href="https://tunsuy.github.io/2016/08/11/Python%EF%BC%9Abuilder-pattern%E2%80%94%E5%BB%BA%E9%80%A0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://tunsuy.github.io/2016/08/11/Python：builder-pattern—建造器模式/</id>
    <published>2016-08-11T10:00:47.000Z</published>
    <updated>2017-03-14T05:14:10.036Z</updated>
    
    <content type="html"><![CDATA[<p>翻译于<a href="https://davidcorne.com/2013/01/21/builder-pattern/" target="_blank" rel="external">https://davidcorne.com/2013/01/21/builder-pattern/</a></p>
<p>注：不是原文翻译，有些自己的理解改动</p>
<h1 id="一、-目的"><a href="#一、-目的" class="headerlink" title="一、 目的"></a>一、 目的</h1><p>builder设计模式（以下均称建造者模式）的意思是指一个对象的构造是抽象的，以便于许多的实现能够使用相同的builder，实际的类构造逻辑跟它的表现是分开的。</p>
<h1 id="二、-模式"><a href="#二、-模式" class="headerlink" title="二、 模式"></a>二、 模式</h1><p>下面是一般的UML类图</p>
<a id="more"></a>
<img src="/2016/08/11/Python：builder-pattern—建造器模式/Builder_general.png" alt="Builder_general.png" title="">
<p>上图中的 <code>product</code> 表示你想要创建的实际的类，这个类被称为 <code>Director</code> （导演）所调用。</p>
<p>这个 <code>Director</code> 持有 <code>builder</code> 的一个实例，并调用它的 <code>create()</code> 方法，这个成员是 <code>ConcreteBuilder</code> 类的一个实例，这个 <code>ConcreteBuilder</code> 类实现了你想要的指定 <code>product</code> 的逻辑</p>
<p>这个抽象的逻辑是需要用来创建不同的 <code>product</code> 类型，这个 <code>product</code> 也可以是一个接口，每个 <code>ConcreteBuilder</code> 也可能返回一个不同的产品类型。</p>
<p>译者注：<code>Director</code> 表示具体创建 <code>product</code> 的类或者代码块；<br><code>ConcreteBuilder</code> 表示一个具体的 <code>builder</code> 类，</p>
<h1 id="三、-一个例子使用"><a href="#三、-一个例子使用" class="headerlink" title="三、 一个例子使用"></a>三、 一个例子使用</h1><p>这个例子主要描述不同车辆的构造，所有的代码包含在这个文件中<a href="https://github.com/davidcorne/Design-Patterns-In-Python/blob/master/Structural/Builder.py" target="_blank" rel="external">this file</a></p>
<p>这个例子中的车辆就表示 <code>product</code> ，下面是具体的类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, type_name)</span>:</span></div><div class="line">        self.type = type_name</div><div class="line">        self.wheels = <span class="keyword">None</span></div><div class="line">        self.doors = <span class="keyword">None</span></div><div class="line">        self.seats = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(self)</span>:</span></div><div class="line">        print(</div><div class="line">            <span class="string">"This vehicle is a "</span> +</div><div class="line">            self.type +</div><div class="line">            <span class="string">" with; "</span> +</div><div class="line">            str(self.wheels) +</div><div class="line">            <span class="string">" wheels, "</span> +</div><div class="line">            str(self.doors) +</div><div class="line">            <span class="string">" doors, and "</span> +</div><div class="line">            str(self.seats) +</div><div class="line">            <span class="string">" seats."</span></div><div class="line">            )</div></pre></td></tr></table></figure></p>
<p>因此不同的车辆有不同的名字、轮胎的数量和座位数，这个 <code>view()</code> 方法将打印出车辆的具体信息。</p>
<p>车辆实例的构造将通过 <code>ConcreteBuilder</code> 类来完成的，这些类是来自 <code>builder</code> 接口（抽象类）,下面是 <code>builder</code>，即这个例子中的 <code>VehicleBuilder</code> 类代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VehicleBuilder</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    An abstract builder class, for concrete builders to be derived from.</div><div class="line">    """</div><div class="line">    __metadata__ = abc.ABCMeta</div><div class="line"></div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_wheels</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span></div><div class="line"></div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_doors</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span></div><div class="line"></div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_seats</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span></div></pre></td></tr></table></figure></p>
<p>这里使用了python中的 <code>ABC</code> 模块<br>译者注：<code>ABC</code> 模块是python中关于抽象类的一些定义</p>
<p>这个 <code>builder</code> 有三个方法用来设置车辆，这个例子中的 <code>ConcreteBuilder</code> 有两个： <code>CarBuilder</code> 和 <code>BikeBuilder</code> ，他们都是继承于 <code>VehicleBuilder</code> ,下面是这些类的实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarBuilder</span><span class="params">(VehicleBuilder)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle = Vehicle(<span class="string">"Car "</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_wheels</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle.wheels = <span class="number">4</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_doors</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle.doors = <span class="number">3</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_seats</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle.seats = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BikeBuilder</span><span class="params">(VehicleBuilder)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle = Vehicle(<span class="string">"Bike"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_wheels</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle.wheels = <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_doors</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle.doors = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_seats</span><span class="params">(self)</span>:</span></div><div class="line">        self.vehicle.seats = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>这些类的逻辑就是对车辆的创建及属性的设置。为了使用这些，我们需要创建一个 <code>Director</code> 类，这个例子中就叫做 <code>VehicleManufacturer</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VehicleManufacturer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    The director class, this will keep a concrete builder.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.builder = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Creates and returns a Vehicle using self.builder</div><div class="line">        Precondition: not self.builder is None</div><div class="line">        """</div><div class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.builder <span class="keyword">is</span> <span class="keyword">None</span>, <span class="string">"No defined builder"</span></div><div class="line">        self.builder.make_wheels()</div><div class="line">        self.builder.make_doors()</div><div class="line">        self.builder.make_seats()</div><div class="line">        <span class="keyword">return</span> self.builder.vehicle</div></pre></td></tr></table></figure></p>
<p>这个类有一个 <code>create()</code> 方法。作为你看到的，在注释中写明了：需要一个前提条件就是，需要给这个类中的 <code>builder</code> 属性显示的指定 <code>ConcreteBuilder</code> 。</p>
<p>下面是这个类的调用方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#==============================================================================</span></div><div class="line"><span class="keyword">if</span> (__name__ == <span class="string">"__main__"</span>):</div><div class="line">    manufacturer = VehicleManufacturer()</div><div class="line"></div><div class="line">    manufacturer.builder = CarBuilder()</div><div class="line">    car = manufacturer.create()</div><div class="line">    car.view()</div><div class="line"></div><div class="line">    manufacturer.builder = BikeBuilder()</div><div class="line">    bike = manufacturer.create()</div><div class="line">    bike.view()</div></pre></td></tr></table></figure></p>
<p>下面是结果输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">This vehicle <span class="keyword">is</span> a Car  <span class="keyword">with</span>; <span class="number">4</span> wheels, <span class="number">3</span> doors, <span class="keyword">and</span> <span class="number">5</span> seats.</div><div class="line">This vehicle <span class="keyword">is</span> a Bike <span class="keyword">with</span>; <span class="number">2</span> wheels, <span class="number">0</span> doors, <span class="keyword">and</span> <span class="number">2</span> seats.</div></pre></td></tr></table></figure></p>
<p>下面是这个例子的UML类图：</p>
<img src="/2016/08/11/Python：builder-pattern—建造器模式/Builder_specific.png" alt="Builder_specific.png" title="">
<p>这篇文章中的所有代码能在这里找到<a href="https://github.com/davidcorne/Design-Patterns-In-Python" target="_blank" rel="external">here</a></p>
<p>感谢你的阅读</p>
]]></content>
    
    <summary type="html">
    
      基于python语言的设计模式详解之建造者模式
    
    </summary>
    
      <category term="python" scheme="https://tunsuy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tunsuy.github.io/tags/python/"/>
    
      <category term="设计模式" scheme="https://tunsuy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>redmine系统二次开发之search功能</title>
    <link href="https://tunsuy.github.io/2016/07/18/redmine%E7%B3%BB%E7%BB%9F%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E4%B9%8Bsearch%E5%8A%9F%E8%83%BD/"/>
    <id>https://tunsuy.github.io/2016/07/18/redmine系统二次开发之search功能/</id>
    <published>2016-07-18T04:30:24.000Z</published>
    <updated>2017-03-14T05:14:10.220Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<br><a href="https://github.com/tunsuy/redmine_select_search" target="_blank" rel="external">https://github.com/tunsuy/redmine_select_search</a></p>
<h1 id="一、-项目简介"><a href="#一、-项目简介" class="headerlink" title="一、 项目简介"></a>一、 项目简介</h1><p>该项目主要是对redmine进行简单的二次开发，满足以下需求：<br>在redmine的select选择框中，如果选项特别多，那么选择是非常考验眼力的，可能眼睛看花了都找不到<br>那么就考虑对所有的select框增加搜索功能</p>
<h1 id="二、-方案一"><a href="#二、-方案一" class="headerlink" title="二、 方案一"></a>二、 方案一</h1><h2 id="1、-下载插件"><a href="#1、-下载插件" class="headerlink" title="1、 下载插件"></a>1、 下载插件</h2><p>使用了chosen插件：<a href="https://harvesthq.github.io/chosen/" target="_blank" rel="external">https://harvesthq.github.io/chosen/</a></p>
<a id="more"></a>
<h2 id="2、-添加文件到项目目录中"><a href="#2、-添加文件到项目目录中" class="headerlink" title="2、 添加文件到项目目录中"></a>2、 添加文件到项目目录中</h2><ul>
<li><p>将<code>chosen.jquery.js</code>文件添加到<code>./apps/redmine/htdocs/public/javascripts/</code></p>
</li>
<li><p>将<code>chosen.css、chosen-sprite.png</code>添加到 <code>./apps/redmine/htdocs/public/stylesheets/</code>  </p>
</li>
</ul>
<h2 id="3、-引入js文件"><a href="#3、-引入js文件" class="headerlink" title="3、 引入js文件"></a>3、 引入js文件</h2><ul>
<li>编辑 <code>./apps/redmine/htdocs/app/helpers/application_helper.rb</code><br>在下面方法处加入：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">javascript_heads</span></span></div><div class="line">    tags = javascript_include_tag(<span class="string">'jquery-1.11.1-ui-1.11.0-ujs-3.1.1'</span>, <span class="string">'application'</span>, <span class="string">'chosen.jquery'</span>)</div><div class="line">    unless User.current.pref.warn_on_leaving_unsaved == <span class="string">'0'</span></div><div class="line">      tags &lt;&lt; <span class="string">"\n"</span>.html_safe + javascript_tag(<span class="string">"$(window).load(function()&#123; warnLeavingUnsaved('<span class="subst">#&#123;escape_javascript l(<span class="symbol">:text_warn_on_leaving_unsaved</span>)&#125;</span>'); &#125;);"</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    tags</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4、-引入css文件"><a href="#4、-引入css文件" class="headerlink" title="4、 引入css文件"></a>4、 引入css文件</h2><ul>
<li>编辑 <code>./apps/redmine/htdocs/app/views/layouts/base.html.erb</code><br>在<head>标签处加入：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%= stylesheet_link_tag 'chosen', :media =&gt; 'all' %&gt;</div></pre></td></tr></table></figure>
</head></li>
</ul>
<h2 id="5、-实现"><a href="#5、-实现" class="headerlink" title="5、 实现"></a>5、 实现</h2><ul>
<li>在<code>./apps/redmine/htdocs/public/javascripts/application.js</code>文件中添加实现代码</li>
</ul>
<p>具体代码见项目地址</p>
<h1 id="三、-方案二"><a href="#三、-方案二" class="headerlink" title="三、 方案二"></a>三、 方案二</h1><p>直接Hook前端代码实现</p>
<h2 id="1、-加入拼音支持"><a href="#1、-加入拼音支持" class="headerlink" title="1、 加入拼音支持"></a>1、 加入拼音支持</h2><h2 id="2、-实现"><a href="#2、-实现" class="headerlink" title="2、 实现"></a>2、 实现</h2><ul>
<li><code>在./apps/redmine/htdocs/public/javascripts/application.js</code>文件中添加实现代码</li>
</ul>
<p>具体代码见项目地址</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;br&gt;&lt;a href=&quot;https://github.com/tunsuy/redmine_select_search&quot;&gt;https://github.com/tunsuy/redmine_select_search&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、-项目简介&quot;&gt;&lt;a href=&quot;#一、-项目简介&quot; class=&quot;headerlink&quot; title=&quot;一、 项目简介&quot;&gt;&lt;/a&gt;一、 项目简介&lt;/h1&gt;&lt;p&gt;该项目主要是对redmine进行简单的二次开发，满足以下需求：&lt;br&gt;在redmine的select选择框中，如果选项特别多，那么选择是非常考验眼力的，可能眼睛看花了都找不到&lt;br&gt;那么就考虑对所有的select框增加搜索功能&lt;/p&gt;
&lt;h1 id=&quot;二、-方案一&quot;&gt;&lt;a href=&quot;#二、-方案一&quot; class=&quot;headerlink&quot; title=&quot;二、 方案一&quot;&gt;&lt;/a&gt;二、 方案一&lt;/h1&gt;&lt;h2 id=&quot;1、-下载插件&quot;&gt;&lt;a href=&quot;#1、-下载插件&quot; class=&quot;headerlink&quot; title=&quot;1、 下载插件&quot;&gt;&lt;/a&gt;1、 下载插件&lt;/h2&gt;&lt;p&gt;使用了chosen插件：&lt;a href=&quot;https://harvesthq.github.io/chosen/&quot;&gt;https://harvesthq.github.io/chosen/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redmine" scheme="https://tunsuy.github.io/categories/redmine/"/>
    
    
      <category term="redmine" scheme="https://tunsuy.github.io/tags/redmine/"/>
    
      <category term="web" scheme="https://tunsuy.github.io/tags/web/"/>
    
  </entry>
  
</feed>
